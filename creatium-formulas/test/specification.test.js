const should = require('should/as-function');
should.config = { plusZeroAndMinusZeroEqual: false };

const mongo_evaluate = require('./mongo.evaluate');
const php_evaluate = require('./php.evaluate');
const node_evaluate = require('./node.evaluate');

const { parseExpression, Expression } = require("../dist/editor.cjs");

const utils = require('./utils.js');
const config = require("./config.js");

function DifferentResults(results) {
    this.mongo = results.mongo;
    this.php = results.php;
    this.node = results.node;
}

function factory(group) {
    return function () {
        for (const code in group) {
            const ast = parseExpression(code);
            const expectation = group[code];

            const results = { mongo: null, php: null, node: null };
            before(async function() {
                this.timeout(config.test_timeout);
                results.mongo = await mongo_evaluate(ast, utils.scope);
                results.php = await php_evaluate('evaluate', ast, utils.scope);
                results.node = node_evaluate('evaluate', ast, utils.scope);
            });

            for (const target of ['mongo', 'php', 'node']) {
                if (code.indexOf('lower(') === 0 || code.indexOf('upper(') === 0) {
                    if (target === 'mongo') continue;
                }

                specify(code + ', ' + target, async () => {
                    console.log(results[target]);

                    const expect = expectation instanceof DifferentResults ? expectation[target] : expectation;

                    if (expect instanceof Error) {
                        should(results[target].result).be.a.null();
                        should(results[target].error).not.be.a.null();

                        should(results[target].error).deepEqual(
                            expect.message,
                            `Different error from ${JSON.stringify(results[target])}`
                        );

                        should(Expression.ErrorTranslator.hasTranslationFor(results[target].error)).be.true(
                            'Missing translation for ' + results[target].error
                        );
                    } else {
                        should(results[target].error).be.a.null();
                        should(results[target].result).deepEqual(
                            expect,
                            `Different result from ${JSON.stringify(results[target])}`
                        );
                    }
                });
            }
        }
    }
}

describe('specification', () => {
    describe('Числа', factory({
        '1': 1,
        '1.2345': 1.2345,
        '-120000000000.1234': -120000000000.1234,
        '120000000000.1234': 120000000000.1234,
        'Infinity': Infinity,
        'NaN': NaN,
        '-Infinity': -Infinity,
    }));

    describe('Строки', factory({
        '"a"': "a",
        '\'a\'': "a",
        '"$a"': "$a",
        '"a\nb"': "a\nb",
    }));

    describe('Даты', factory({
        // Все возможные варианты дат тут не проверяем, поскольку ниже есть более
        // подробный тест toDate, который включает в себя все возможные варианты
        '#2022-07-02T13:38:47.000Z#': new Date('2022-07-02T13:38:47.000Z'),
        '#2020-01-01 00:00:00#': new Date('2020-01-01T00:00:00.000Z'),
        '#2020-01-01+02#': new Date('2019-12-31T22:00:00.000Z'),
    }));

    describe('Логика', factory({
        'true': true,
        'false': false,
    }));

    describe('Идентификаторы', factory({
        'number1': 1,
        '$test1': 1,
        '$0': 2,
        'unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'toString': new DifferentResults({
            mongo: new Error('convert :: var1 :: toString'),
            php: new Error('evaluate :: var1 :: toString'),
            node: new Error('evaluate :: var1 :: toString'),
        }),
        'number_1e_40': 10000000000000000000000000000000000000000,
    }));

    describe('Бинарные операторы: +', factory({
        '1 + 2': 3,
        '1 + NaN': NaN,
        'NaN + 2': NaN,
        'number1 + number2': 3,
        '1 + Infinity': Infinity,
        '2 + "test"': new Error('optimize :: add1 :: string'),
        '"test1" + "test2"': new Error('optimize :: add1 :: string'),
        '2 + null1': null,
        '0 + array1': new Error('evaluate :: add1 :: array'),
        '0 + object1': new Error('evaluate :: add1 :: object'),
        'array1 + 0': new Error('evaluate :: add1 :: array'),
        'object1 + 0': new Error('evaluate :: add1 :: object'),
        '0.1 + 0.2': 0.30000000000000004,
        'number1 + {}': new Error('evaluate :: add1 :: object'),
        'null1 + {}': null,
        'null1 + []': null,
        'null1 + 3': null,
        'null1 + "str"': null,
        'null1 + true': null,
        'null1 + unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: null,
            node: null,
        }),
        '[] + number1': new Error('evaluate :: add1 :: array'),
        '[] + string1': new DifferentResults({
            mongo: new Error('evaluate :: add1 :: array'),
            php: new Error('evaluate :: add1 :: string'),
            node: new Error('evaluate :: add1 :: string'),
        }),
        '[] + "test"': new Error('optimize :: add1 :: array'),
        'array0 + "test"': new Error('evaluate :: add1 :: array'),
        'toDate(123000) + 60': new Date('1970-01-01T00:02:03.060Z'),
        '60 + toDate(123000)': new Date('1970-01-01T00:02:03.060Z'),
        '60 + toDate(123000) + 10': new Date('1970-01-01T00:02:03.070Z'),
    }));

    describe('Бинарные операторы: -', factory({
        '5 - 3': 2,
        '2 - "test"': new Error('optimize :: subtract1 :: string,number'),
        '2 - null': null,
        '2 - unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '-0 - 0': 0,
        'Infinity - Infinity': NaN,
        'NaN - Infinity': NaN,
        'Infinity - NaN': NaN,
        '1 - NaN': NaN,
        'NaN - 1': NaN,
        '0 - array1': new Error('evaluate :: subtract1 :: array,number'),
        '0 - object1': new Error('evaluate :: subtract1 :: object,number'),
        'array1 - 0': new Error('evaluate :: subtract1 :: number,array'),
        'object1 - 0': new Error('evaluate :: subtract1 :: number,object'),
        'number1 - {}': new Error('evaluate :: subtract1 :: object,number'),
        'null1 - {}': null,
        'null1 - []': null,
        'toDate(123000) - 60': new Date('1970-01-01T00:02:02.940Z'),
        '6000000 - toDate(123000)': new Error('evaluate :: subtract1 :: date,number'),
        '6000000 - toDate(123000) - 1000': new Error('evaluate :: subtract1 :: date,number'),
    }));

    describe('Бинарные операторы: *', factory({
        '2.5 * 2': 5,
        '2 * "test"': new Error('optimize :: fn7 :: multiply,string'),
        '"test1" * "test2"': new Error('optimize :: fn7 :: multiply,string'),
        '2 * unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '-0 * 1': 0,
        '1 * object1': new Error('evaluate :: fn7 :: multiply,object'),
        'string1 * null1': new Error('evaluate :: fn7 :: multiply,string'),
        'string1 * number1': new Error('evaluate :: fn7 :: multiply,string'),
        'string1 * object1': new Error('evaluate :: fn7 :: multiply,string'),
        'string1 * array1': new Error('evaluate :: fn7 :: multiply,string'),
        'number1 * null1': null,
        'null1 * number1': null,
        'number1 * object1': new Error('evaluate :: fn7 :: multiply,object'),
        'number1 * array1': new Error('evaluate :: fn7 :: multiply,array'),
        'true1 * null1': new Error('evaluate :: fn7 :: multiply,boolean'),
        'true1 * number1': new Error('evaluate :: fn7 :: multiply,boolean'),
        'true1 * object1': new Error('evaluate :: fn7 :: multiply,boolean'),
        'true1 * array1': new Error('evaluate :: fn7 :: multiply,boolean'),
        'null1 * {}': null,
        'null1 * []': null,
        '{} * null1': new DifferentResults({
            mongo: new Error('evaluate :: fn7 :: multiply,object'),
            php: null,
            node: null,
        }),
        '[] * null1': new DifferentResults({
            mongo: new Error('evaluate :: fn7 :: multiply,array'),
            php: null,
            node: null,
        }),
        '[number1] * number2': new Error('evaluate :: fn7 :: multiply,array'),
        '[unknown] * number2': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '[] * number2': new Error('evaluate :: fn7 :: multiply,array'),
        '[] * unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'number2 * [number1]': new Error('evaluate :: fn7 :: multiply,array'),
        'number2 * [unknown]': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'number2 * []': new Error('evaluate :: fn7 :: multiply,array'),
        'unknown * []': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '[] * [number1]': new Error('evaluate :: fn7 :: multiply,array'),
        '{} * [number1]': new DifferentResults({
            mongo: new Error('evaluate :: fn7 :: multiply,object'),
            php: new Error('evaluate :: fn7 :: multiply,array'),
            node: new Error('evaluate :: fn7 :: multiply,array'),
        }),
        '[number1] * []': new Error('evaluate :: fn7 :: multiply,array'),
        '[number1] * {}': new Error('evaluate :: fn7 :: multiply,array'),
        '[] * { x: number1 }': new DifferentResults({
            mongo: new Error('evaluate :: fn7 :: multiply,array'),
            php: new Error('evaluate :: fn7 :: multiply,object'),
            node: new Error('evaluate :: fn7 :: multiply,object'),
        }),
        '{} * { x: number1 }': new Error('evaluate :: fn7 :: multiply,object'),
        '{ x: number1 } * []': new Error('evaluate :: fn7 :: multiply,object'),
        '{ x: number1 } * {}': new Error('evaluate :: fn7 :: multiply,object'),
        '"test" * unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'string1 * unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: fn7 :: multiply,string'),
            node: new Error('evaluate :: fn7 :: multiply,string'),
        }),
        'true * unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'true1 * unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: fn7 :: multiply,boolean'),
            node: new Error('evaluate :: fn7 :: multiply,boolean'),
        }),
        '1 * unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '{} * unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'array0 * "test"': new Error('evaluate :: fn7 :: multiply,array'),
        '25 * Infinity': Infinity,
        '25 * NaN': NaN,
        '-Infinity * Infinity': -Infinity,
        '-NaN * NaN': NaN,
    }));

    describe('Бинарные операторы: /', factory({
        '10 / 4': 2.5,
        'number3 / number2': 1.5,
        '1 / 0': new Error('optimize :: divide1'),
        '1 / 0.0': new Error('optimize :: divide1'),
        '2 / "test"': new Error('optimize :: divide2 :: number,string'),
        '2 / null': null,
        '2 / unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '-0 / 1': 0,
        '1 / object1': new Error('evaluate :: divide2 :: number,object'),
        '0.3 / 0.1': 2.9999999999999996,
        'null1 / {}': null,
        'null1 / []': null,
        '0 / Infinity': 0,
        'Infinity / 0': new Error('optimize :: divide1'),
        '0 / NaN': NaN,
        'NaN / 0': new Error('optimize :: divide1'),
    }));

    describe('Бинарные операторы: %', factory({
        '10 % 3': 1,
        '1 % 0': new Error('optimize :: mod1'),
        '1 % object1': new Error('evaluate :: mod2 :: number,object'),
    }));

    describe('Бинарные операторы: вложенная арифметика', factory({
        '2 + 2 * 2': 6,
        '2.5 * 20 - 5': 45,
        '2 * (20 - 5)': 30,
        'number2 + (4 / 2) * 2': 6,
    }));

    describe('Бинарный оператор ==', factory({
        '1 == 1': true,
        '1 == 2': false,
        '1 == "1"': false,
        '1 == true': false,
        '0 == false': false,
        '0 == ""': false,
        '1.4 == 1.4': true,
        '1.4 == 1.42': false,
        '"a" == "a"': true,
        '"a" == "b"': false,
        'true == true': true,
        'true == false': false,
        'true == "true"': false,
        'false == ""': false,
        'number2 == number2': true,
        'number2 == number3': false,
        'null == unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'unknown == unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'array0 == array0': true,
        'array1 == array1': true,
        'array0 == array1': false,
        'array0 == null': false,
        'array0 == unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'object0 == object0': true,
        'object1 == object1': true,
        'object0 == object1': false,
        'object0 == null': false,
        'object0 == unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'minus2 == +minus2': true,
        '{} == {}': true,
        '{x: 1} == {x: 1}': true,
        '{x: 1, y: 2} == {y: 2, x: 1}': false,
        'now() == now()': true,
        '[1, 2] == [1, 2]': true,
        '[1, 2, 3] == [1, 2]': false,
        '[1, 2, 3] == [1, 2, 3, 4]': false,
        '[1, 2] == [2, 1]': false,
        '[1, 2] == [1, 2, 3]': false,
        '[1, {}] == [1, 2, 3]': false,
        '[1, {}] == [1, {}]': true,
        '[1, {x: 2}] == [1, {x: 3}]': false,
        '[1, {x: 2}] == [1, {x: 2}]': true,
        '[{}] == [{}]': true,
        '[[]] == [[]]': true,
        'Infinity == Infinity': true,
        'NaN == NaN': true,
        'NaN == 0': false,
        'NaN == Infinity': false,
        'NaN == -Infinity': false,
    }));

    describe('Бинарный оператор !=', factory({
        '1 != 1': false,
        '1 != 2': true,
        '1 != "1"': true,
        '1 != true': true,
        '0 != false': true,
        '0 != ""': true,
        '1.4 != 1.4': false,
        '1.4 != 1.42': true,
        '"a" != "a"': false,
        '"a" != "b"': true,
        'true != true': false,
        'true != false': true,
        'true != "true"': true,
        'false != ""': true,
        'number2 != number2': false,
        'number2 != number3': true,
        'null != unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'unknown != unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'array0 != array0': false,
        'array1 != array1': false,
        'array0 != array1': true,
        'array0 != null': true,
        'array0 != unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'object0 != object0': false,
        'object1 != object1': false,
        'object0 != object1': true,
        'object0 != null': true,
        'object0 != unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '{} != {}': false,
        '{x: 1} != {x: 1}': false,
        '{x: 1, y: 2} != {y: 2, x: 1}': true,
        'now() != now()': false,
        'Infinity != Infinity': false,
        'NaN != NaN': false,
        'NaN != 0': true,
        'NaN != Infinity': true,
        'NaN != -Infinity': true,
    }));

    describe('Бинарный оператор >', factory({
        '1 > 1': false,
        '1 > 2': false,
        '2 > 1': true,
        '2 > "2"': false,
        '2 > "1"': false,
        '2 > false': false,
        '2 > true': false,
        '1 > null': true,
        '-1 > null': true,
        '1 > unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '-1 > unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'number2 > number2': false,
        'number3 > number2': true,
        'number2 > number3': false,
        '"" > 0': true,
        'array0 > array0': false,
        '[number1] > []': true,
        '[number1] > [number1]': false,
        '[number2, number1] > [number1]': true,
        '[number1, number2] > [number1]': true,
        '[number2, number3] > [number1]': true,
        '[number1, number3] > [number2]': false,
        '[number4] > number3': true,
        '[number2] > number3': true,
        '[] > number3': true,
        '[] > null1': true,
        '[] > unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '{} > {}': false,
        '{x: 1} > {}': true,
        '{} > {x: 1}': false,
        '{x: 1} > {x: 2}': false,
        '{y: 1} > {x: 2}': true,
        '{y: 1} > {x: 2, z: 4}': true,
        '{x: 0, y: 1} > {x: 2}': false,
        '[0, 1] > [2]': false,
        '[1] > [false]': false,
        'now() > now()': false,
        'Infinity > Infinity': false,
        'NaN > NaN': false,
        'NaN > 0': false,
        'NaN > Infinity': false,
        'NaN > -Infinity': false,
        '-Infinity > NaN': true,
        '#2022-07-20# > #2022-07-15#': true,
        '#2022-07-15# > #2022-07-20#': false,
        'date0 > now()': false,
    }));

    describe('Бинарный оператор >=', factory({
        '1 >= 1': true,
        '1 >= 2': false,
        '2 >= 1': true,
        '2 >= "2"': false,
        '2 >= false': false,
        '1 >= null': true,
        '-1 >= null': true,
        '1 >= unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '-1 >= unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'number2 >= number2': true,
        'number3 >= number2': true,
        'number2 >= number3': false,
        '"" > 0': true,
        'array0 >= array0': true,
        '[number1] >= []': true,
        '[number1] >= [number1]': true,
        '[number2, number1] >= [number1]': true,
        '[number1, number2] >= [number1]': true,
        '[number2, number3] >= [number1]': true,
        '[number1, number3] >= [number2]': false,
        '[number4] >= number3': true,
        '[number2] >= number3': true,
        '[] >= number3': true,
        '[] >= null1': true,
        '[] >= unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '{} >= {}': true,
        '{x: 1} >= {}': true,
        '{} >= {x: 1}': false,
        '{x: 1} >= {x: 2}': false,
        '{y: 1} >= {x: 2}': true,
        '{y: 1} >= {x: 2, z: 4}': true,
        '{x: 0, y: 1} >= {x: 2}': false,
        '[0, 1] >= [2]': false,
        '[1] >= [false]': false,
        'now() >= now()': true,
        'Infinity >= Infinity': true,
        'NaN >= NaN': true,
        'NaN >= 0': false,
        'NaN >= Infinity': false,
        'NaN >= -Infinity': false,
        '-Infinity >= NaN': true,
        '#2022-07-20# >= #2022-07-15#': true,
        '#2022-07-15# >= #2022-07-20#': false,
    }));

    describe('Бинарный оператор <', factory({
        '1 < 1': false,
        '1 < 2': true,
        '2 < 1': false,
        '2 < "2"': true,
        '2 < "1"': true,
        '2 < false': true,
        '2 < true': true,
        'number2 < number2': false,
        'number3 < number2': false,
        'number2 < number3': true,
        'array0 < array0': false,
        '[number1] < []': false,
        '[number1] < [number1]': false,
        '[number2, number1] < [number1]': false,
        '[number1, number2] < [number1]': false,
        '[number2, number3] < [number1]': false,
        '[number1, number3] < [number2]': true,
        '[number4] < number3': false,
        '[number2] < number3': false,
        '[] < number3': false,
        '[] < null1': false,
        '[] < unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '{} < {}': false,
        '{x: 1} < {}': false,
        '{} < {x: 1}': true,
        '{x: 1} < {x: 2}': true,
        '{y: 1} < {x: 2}': false,
        '{y: 1} < {x: 2, z: 4}': false,
        '{x: 0, y: 1} < {x: 2}': true,
        '[0, 1] < [2]': true,
        '[1] < [false]': true,
        'now() < now()': false,
        'Infinity < Infinity': false,
        'NaN < NaN': false,
        'NaN < 0': true,
        'NaN < -1': true,
        'NaN < 1': true,
        'NaN < Infinity': true,
        'NaN < -Infinity': true,
        '-Infinity < NaN': false,
        '#2022-07-20# < #2022-07-15#': false,
        '#2022-07-15# < #2022-07-20#': true,
    }));

    describe('Бинарный оператор <=', factory({
        '1 <= 1': true,
        '1 <= 2': true,
        '2 <= 1': false,
        '2 <= "2"': true,
        '2 <= "1"': true,
        '2 <= false': true,
        'number2 <= number2': true,
        'number3 <= number2': false,
        'number2 <= number3': true,
        'array0 <= array0': true,
        '[number1] <= []': false,
        '[number1] <= [number1]': true,
        '[number2, number1] <= [number1]': false,
        '[number1, number2] <= [number1]': false,
        '[number2, number3] <= [number1]': false,
        '[number1, number3] <= [number2]': true,
        '[number4] <= number3': false,
        '[number2] <= number3': false,
        '[] <= number3': false,
        '[] <= null1': false,
        '[] <= unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '{} <= {}': true,
        '{x: 1} <= {}': false,
        '{} <= {x: 1}': true,
        '{x: 1} <= {x: 2}': true,
        '{y: 1} <= {x: 2}': false,
        '{y: 1} <= {x: 2, z: 4}': false,
        '{x: 0, y: 1} <= {x: 2}': true,
        '[0, 1] <= [2]': true,
        '[1] <= [false]': true,
        'now() <= now()': true,
        'Infinity <= Infinity': true,
        'NaN <= NaN': true,
        'NaN <= 0': true,
        'NaN <= Infinity': true,
        'NaN <= -Infinity': true,
        '-Infinity <= NaN': false,
        '#2022-07-20# <= #2022-07-15#': false,
        '#2022-07-15# <= #2022-07-20#': true,
    }));

    describe('Бинарный оператор or', factory({
        '1 or 1': true,
        '1 or 2': true,
        '1 or 0': true,
        'Infinity or 0': true,
        'NaN or 0': true,
        'NaN or 1': true,
        '1 or "1"': true,
        'null or 0': false,
        'null or false': false,
        'null or ""': false,
        '"0" or ""': true,
        '0 or ""': false,
        '"test" or number1': true,
        'number3 or number2': true,
        'number2 or number3': true,
        'string0 or string0': false,
        'string0 or string1': true,
        'true or null1': true,
        'true1 or null1': true,
        'null1 or true': true,
        'null1 or true1': true,
        'false or null1': false,
        'false1 or null1': false,
        'null1 or false': false,
        'null1 or false1': false,
    }));

    describe('Бинарный оператор and', factory({
        '1 and 1': true,
        '1 and 2': true,
        '1 and 0': false,
        '1 and Infinity': true,
        '1 and NaN': true,
        '1 and "1"': true,
        'null and 0': false,
        'null and false': false,
        'null and ""': false,
        '"0" and ""': false,
        '0 and ""': false,
        '"test" and number1': true,
        'number3 and number2': true,
        'number2 and number3': true,
        '1 and true': true,
        '0 and false': false,
        '1 and unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'string0 and string0': false,
        'string0 and string1': false,
        'false and null1': false,
        'false1 and null1': false,
        'null1 and false': false,
        'null1 and false1': false,
        'true and null1': false,
        'true1 and null1': false,
        'null1 and true': false,
        'null1 and true1': false,
    }));

    describe('Бинарный оператор &', factory({
        '"a" & "b"': 'ab',
        'string1 & string2': 'abcdef',
        '2 & 2': '22',
        '2 & Infinity': '2Infinity',
        '2 & NaN': '2NaN',
        'number1 & number2': '12',
        'string1 & number1': 'abc1',
        'string1 & null': 'abc',
        'null & string1': 'abc',
        'string1 & null1': 'abc',
        'null1 & string1': 'abc',
        'string1 & {}': new Error('optimize :: convert1 :: object,string'),
        'string1 & []': new Error('optimize :: convert1 :: array,string'),
        'string1 & object1': new Error('evaluate :: convert1 :: object,string'),
        'string1 & array1': new Error('evaluate :: convert1 :: array,string'),
    }));

    describe('Бинарный оператор ??', factory({
        '1 ?? 2': 1,
        'null ?? 123': 123,
        '123 ?? null': 123,
        'Infinity ?? null': Infinity,
        'NaN ?? null': NaN,
        'null ?? null': null,
        'null1 ?? null': null,
        'null1 ?? 123': 123,
        'unknown ?? 123': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'null ?? unknown2': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown2'),
            php: new Error('evaluate :: var1 :: unknown2'),
            node: new Error('evaluate :: var1 :: unknown2'),
        }),
        'object1.unknown ?? 123': 123,
        'unknown.unknown ?? 123': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'null1.unknown ?? 123': 123,
        'null1[{}] ?? 123': 123,
        'number1[string1] ?? 123': new Error('evaluate :: member1 :: number,string'),
        'true1.unknown ?? 123': new Error('evaluate :: member1 :: boolean,string'),
        'true1[0] ?? 123': new Error('evaluate :: member1 :: boolean,number'),
        'unknown[object1] ?? 123': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'unknown.unknown["test"][2] ?? 123': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'unknown.unknown["test"][unknown] ?? 123': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'object1[object1] ?? 123': new Error('evaluate :: member1 :: object,object'),
        'object1.unknown["test"][2] ?? 123': 123,
        'object1.unknown["test"][unknown] ?? 123': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'if(true1, 1, 2).unknown ?? 123': new Error('evaluate :: member1 :: number,string'),
        'if(true1, [], 2).unknown ?? 123': new Error('evaluate :: member1 :: array,string'),
        'if(true1, {}, 2).unknown ?? 123': 123,
        'if(true1, {}, 2)[2] ?? 123': new Error('evaluate :: member1 :: object,number'),
        'if(true1, {}, 2)[2].unknown ?? 123': new Error('evaluate :: member1 :: object,number'),
        'if(true1, {}, 2)[unknown].unknown ?? 123': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'if(true1, unknown, 2)[2].unknown ?? 123': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'if(true1, 2, unknown)[2].unknown ?? 123': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: member1 :: number,number'),
            node: new Error('evaluate :: member1 :: number,number'),
        }),
        '1 > (null ?? 2)': false,
        '(1 > null) ?? 2': true,
        '1 > null ?? 2': false,
        '1 > (null1 ?? 2)': false,
        '(1 > null1) ?? 2': true,
        '1 > null1 ?? 2': false,
        'object1.unknown1 ?? object1.unknown2.unknown3 ?? 33': 33,
        'object1.unknown1 ?? object1.a ?? 123': 1,
        '(object1.unknown1 ?? object1.unknown2.unknown3) ?? 33': new Error('evaluate :: member2 :: unknown2'),
        '(object1.unknown1 ?? object1.a) ?? 123': 1,
        'object1.unknown1 ?? (object1.unknown2.unknown3 ?? 33)': 33,
        'object1.unknown1 ?? (object1.a ?? 123)': 1,
    }));

    describe('Бинарный оператор in', factory({
        '2 in 1': new Error('optimize :: in1 :: number'),
        '2 in Infinity': new Error('optimize :: in1 :: number'),
        '2 in -Infinity': new Error('optimize :: in1 :: number'),
        '2 in NaN': new Error('optimize :: in1 :: number'),
        '2 in -NaN': new Error('optimize :: in1 :: number'),
        '2 in "a"': new Error('optimize :: in1 :: string'),
        '2 in number1': new Error('evaluate :: in1 :: number'),
        '2 in string1': new Error('evaluate :: in1 :: string'),
        '2 in array1': true,
        '2 in object1': new Error('evaluate :: in1 :: object'),
        '2 in false': new Error('optimize :: in1 :: boolean'),
        '2 in null': new Error('optimize :: in1 :: null'),
        '2 in null1': new Error('evaluate :: in1 :: null'),
        '2 in unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '2 in ["a"]': false,
        '2 in ["a", "b"]': false,
        '2 in ["a", "b", "c"]': false,
        '2 in [1, 2, 3, 4, 5]': true,
        'Infinity in [1, 2, Infinity, 4, 5]': true,
        'NaN in [1, 2, NaN, 4, 5]': true,
        '2 in [1, 2, 3, false, 4, 0, 5]': true,
        '[1, 2] in [1, 2, 3]': false,
        '[1, 2] in [[1, 2], 3]': true,
        '[1, 2] in [[2, 1], 3]': false,
        '[1, 2] in [[1, 2, 3], 3]': false,
        '[1, {}] in [[1, 2, 3], 3]': false,
        '[1, {}] in [[1, 2, 3], 3, [1, {}]]': true,
        '[1, {x: 2}] in [[1, 2, 3], 3, [1, {x: 3}]]': false,
        '[1, {x: 2}] in [[1, 2, 3], 3, [1, {x: 2}]]': true,
    }));

    describe('Унарный оператор +', factory({
        '+0': 0,
        '+(0)': 0,
        '+null': null,
        '+true': new Error('optimize :: add1 :: boolean'),
        '+false': new Error('optimize :: add1 :: boolean'),
        '+[]': new Error('optimize :: add1 :: array'),
        '+{}': new Error('optimize :: add1 :: object'),
        '+"sdf"': new Error('optimize :: add1 :: string'),
        '+number1': 1,
        '+string1': new Error('evaluate :: add1 :: string'),
        '+array1': new Error('evaluate :: add1 :: array'),
        '+object1': new Error('evaluate :: add1 :: object'),
        '+null1': null,
        '+unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
    }));

    describe('Унарный оператор -', factory({
        '-1': -1,
        '-1 + 1': 0,
        '+ -1': -1,
        '- - 1': 1,
        '- (+ 1)': -1,
        '-number2': -2,
        '-0': 0,
        '-(0)': 0,
        '-null': null,
        '-true': new Error('optimize :: subtract1 :: boolean,number'),
        '-false': new Error('optimize :: subtract1 :: boolean,number'),
        '-[]': new Error('optimize :: subtract1 :: array,number'),
        '-{}': new Error('optimize :: subtract1 :: object,number'),
        '-"sdf"': new Error('optimize :: subtract1 :: string,number'),
        '-number1': -1,
        '-string1': new Error('evaluate :: subtract1 :: string,number'),
        '-array1': new Error('evaluate :: subtract1 :: array,number'),
        '-object1': new Error('evaluate :: subtract1 :: object,number'),
        '-null1': null,
        '-unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
    }));

    describe('Унарный оператор ?', factory({
        '{ x: 1, y: 2 }?': { x: 1, y: 2 },
        '{ x: 1, y: 2 }.x?': 1,
        '{ x: 1, y: 2 }["x"]?': 1,
        'object1.a?': 1,
        'object1.b.c?': null,
        'object1.b.c[23]?': null,
        'object1.b.c[object1.d.e?]?': null,
        'object1[0]?': new Error('evaluate :: member1 :: object,number'),
        'object1.ds[0]?': null,
        'array1[3334][0]?': null,
        'array1[3334].dsd?': null,
        '((array1[3334].dsd ?) ?) ?': null,
    }));

    describe('Объекты', factory({
        '{ x: 1, y: 2 }': { x: 1, y: 2 },
        '{ x: 1, "2": 3 }': { x: 1, "2": 3 },
        '{ "0": 2, "1": 4 }': { "0": 2, "1": 4 },
        '{ x: 1 + 2, y: { z: 4 } }': { x: 3, y: { z: 4 } },
        '{ x: 1 + 2, y: { z: if(4, 5, 6) } }': { x: 3, y: { z: 5 } },
        '{ "0": unknown }': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'object1': { a: 1 },
        '{ "x.y": 1 }': { "x.y": 1 },
        '{ add: [1, 2] }': { add: [1, 2] },
        '{ add: [1, 2 * 2] }': { add: [1, 4] },
        '{ $add: [1, 2] }': { $add: [1, 2] },
        '{ add$: [1, 2] }': { add$: [1, 2] },
        '{ $add: [1, 2 * 2] }': { $add: [1, 4] },
        '{ $add: [1, 2 * 2], $add2: [1] }': { $add: [1, 4], $add2: [1] },
    }));

    describe('Массивы', factory({
        '[1, 2, 3]': [1, 2, 3],
        '[1, "2", 3]': [1, "2", 3],
        '[1, "2", [3, null]]': [1, "2", [3, null]],
        '[unknown, 1]': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
    }));

    describe('Чтение свойств простых типов', factory({
        'unknown.unknown': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'number1.test': new Error('evaluate :: member1 :: number,string'),
        'number1["test"]': new Error('evaluate :: member1 :: number,string'),
        'number1[string1]': new Error('evaluate :: member1 :: number,string'),
        'number1[number2]': new Error('evaluate :: member1 :: number,number'),
        'number1[null]': new Error('evaluate :: member1 :: number,null'),
        'number1[{x: 1}]': new Error('evaluate :: member1 :: number,object'),
        'number1[[]]': new Error('evaluate :: member1 :: number,array'),
        'string1.test': new Error('evaluate :: member1 :: string,string'),
        'string1["test"]': new Error('evaluate :: member1 :: string,string'),
        'string1[number1]': new Error('evaluate :: member1 :: string,number'),
        'string1[string2]': new Error('evaluate :: member1 :: string,string'),
        'string1[null]': new Error('evaluate :: member1 :: string,null'),
        'string1[{x: 1}]': new Error('evaluate :: member1 :: string,object'),
        'string1[[]]': new Error('evaluate :: member1 :: string,array'),
        'null1.test': new Error('evaluate :: member1 :: null,string'),
        '[null][0].test': new Error('evaluate :: member1 :: null,string'),
        'number1[unknown]': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'null1[unknown]': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'null1[123]': new Error('evaluate :: member1 :: null,number'),
        'null1["test"]': new Error('evaluate :: member1 :: null,string'),
        'unknown[2]': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'unknown[unknown]': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'unknown[null]': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'number1["a\\"b"]': new Error('evaluate :: member1 :: number,string'),
    }));

    describe('Чтение свойств объектов', factory({
        '{x: 1, "2": 3}.x': 1,
        '{x: 1, "2": 3}["x"]': 1,
        '{x: 1, "2": 3}["2"]': 3,
        'object1.a': 1,
        'object1.unknown': new Error('evaluate :: member2 :: unknown'),
        'object1.unknown.unknown': new Error('evaluate :: member2 :: unknown'),
        'object1[{x: 1}]': new Error('evaluate :: member1 :: object,object'),
        'object1["$a"]': new Error('evaluate :: member2 :: $a'),
        'object1[number_1e_40]': new Error('evaluate :: member1 :: object,number'),
        'object1["a\\"b"]': new Error('evaluate :: member2 :: a"b'),
        'object1["a,b"]': new Error('evaluate :: member2 :: a,b'),
        'object1["a :: b"]': new Error('evaluate :: member2 :: a :: b'),
    }));

    describe('Чтение свойств массивов', factory({
        '[1, 2][0]': 1,
        '[1, 2][5]': new Error('evaluate :: member2 :: 5'),
        '[1, 2][-number1]': 2,
        'array1[0]': 1,
        'array1[0.5]': new Error('evaluate :: member3'),
        'array1[-10000]': new Error('evaluate :: member2 :: -10000'),
        'array1[0.0]': 1,
        'array1[number1 - 1]': 1,
        'array1.unknown': new Error('evaluate :: member1 :: array,string'),
        'array1.unknown.unknown': new Error('evaluate :: member1 :: array,string'),
        'array1["test"]': new Error('evaluate :: member1 :: array,string'),
        'array1[null]': new Error('evaluate :: member1 :: array,null'),
        'array1[unknown]': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        '[1, 2 + 2][number3 - 2] * 2': 8,
        'array1["length"]': new Error('evaluate :: member1 :: array,string'),
        'array1[9223372036854775807]': new Error('evaluate :: member3')
    }));

    describe('if()', factory({
        'if(1 == 2, "a", "b")': "b",
        'if(2 + 2 == 4, "x", "y")': "x",
        'if(true, 2, 3)': 2,
        'if(Infinity, 2, 3)': 2,
        'if(NaN, 2, 3)': 2,
        'if("", 2, 3)': 3,
        'if(string0, 2, 3)': 3,
        'if(1, 2, if(0, 4, 5))': 2,
        'if(if(1, 2, 0), 4, 5)': 4,
        'if(number1, number2, number3)': 2,
        'if(false, 1, true, 2, 3)': 2,
        'if(false, 1, false, 2, 3)': 3,
        'if(false, 1, false, 2, true, 3, 4)': 3,
        'if(false, 1, false, 2, false, 3, 4)': 4,
    }));

    describe('sum()', factory({
        'sum(1)': new Error('evaluate :: add1 :: number'),
        'sum("a")': new Error('evaluate :: add1 :: string'),
        'sum(number1)': new Error('evaluate :: add1 :: number'),
        'sum(string1)': new Error('evaluate :: add1 :: string'),
        'sum(array1)': 6,
        'sum(object1)': new Error('evaluate :: add1 :: object'),
        'sum(null)': null,
        'sum(null1)': null,
        'sum(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sum([1])': 1,
        'sum(if(number1, [1, 2], [3,4]))': 3,
        'sum([1, 2])': 3,
        'sum([1, Infinity])': Infinity,
        'sum([1, NaN])': NaN,
        'sum([1, 2, 3])': 6,
        'sum([1, 2, null])': null,
        'sum([1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sum([1, "2", null])': new Error('optimize :: add1 :: string'),
        'sum([1, string1, null])': new Error('evaluate :: add1 :: string'),
        'sum([1, null1, "2"])': new DifferentResults({
            mongo: null, // TODO
            php: new Error('optimize :: add1 :: string'),
            node: new Error('optimize :: add1 :: string'),
        }),
        'sum([1, null, string1])': new DifferentResults({
            mongo: null, // TODO
            php: new Error('evaluate :: add1 :: string'),
            node: new Error('evaluate :: add1 :: string'),
        }),
        'sum([1, 2, null, 4])': null,
        'sum([1, "2", 3])': new Error('optimize :: add1 :: string'),
        'sum([1, string1, 3])': new Error('evaluate :: add1 :: string'),
        'sum([1, "2", unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('optimize :: add1 :: string'),
            node: new Error('optimize :: add1 :: string'),
        }),
        'sum([1, string1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: add1 :: string'),
            node: new Error('evaluate :: add1 :: string'),
        }),
        'sum([1, 2, false])': new Error('optimize :: add1 :: boolean'),
        'sum([1, 2, true])': new Error('optimize :: add1 :: boolean'),
        'sum([number1])': 1,
        'sum([number1, 2])': 3,
        'sum([number1, 2, 3])': 6,
        'sum([number1, 2, null])': null,
        'sum([number1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sum([number1, "2", null])': new DifferentResults({
            mongo: new Error('evaluate :: add1 :: string'),
            php: new Error('optimize :: add1 :: string'),
            node: new Error('optimize :: add1 :: string'),
        }),
        'sum([number1, string1, null])': new Error('evaluate :: add1 :: string'),
        'sum([number1, null1, "2"])': null,
        'sum([number1, null, string1])': new DifferentResults({
            mongo: null, // TODO
            php: new Error('evaluate :: add1 :: string'),
            node: new Error('evaluate :: add1 :: string'),
        }),
        'sum([number1, 2, null, 4])': null,
        'sum([number1, "2", 3])': new DifferentResults({
            mongo: new Error('evaluate :: add1 :: string'),
            php: new Error('optimize :: add1 :: string'),
            node: new Error('optimize :: add1 :: string'),
        }),
        'sum([number1, string1, 3])': new Error('evaluate :: add1 :: string'),
        'sum([number1, "2", unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sum([number1, string1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: add1 :: string'),
            node: new Error('evaluate :: add1 :: string'),
        }),
        'sum([number1, 2, false])': new DifferentResults({
            mongo: new Error('evaluate :: add1 :: boolean'),
            php: new Error('optimize :: add1 :: boolean'),
            node: new Error('optimize :: add1 :: boolean'),
        }),
        'sum([number1, 2, true])': new DifferentResults({
            mongo: new Error('evaluate :: add1 :: boolean'),
            php: new Error('optimize :: add1 :: boolean'),
            node: new Error('optimize :: add1 :: boolean'),
        }),
        'sum(["test", unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sum([string1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: add1 :: string'),
            node: new Error('evaluate :: add1 :: string'),
        }),
        'sum([true, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sum([true1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: add1 :: boolean'),
            node: new Error('evaluate :: add1 :: boolean'),
        }),
        'sum([1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sum([{}, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sum({x: [toDate(1234567000), 70]}.x)': new Date('1970-01-15T06:56:07.070Z'),
        'sum({x: ["sdf", 70, []]}.x)': new Error('evaluate :: add1 :: string'),
        'sum({x: [10, toDate(1234567000), 70]}.x)': new Date('1970-01-15T06:56:07.080Z'),
        'sum([-Infinity, Infinity])': NaN,
        'sum(map([10], item)) + 1': 11,
    }));

    describe('min()', factory({
        'min(1)': new Error('evaluate :: fn1 :: min,number'),
        'min("a")': new Error('evaluate :: fn1 :: min,string'),
        'min(number1)': new Error('evaluate :: fn1 :: min,number'),
        'min(string1)': new Error('evaluate :: fn1 :: min,string'),
        'min(array1)': 1,
        'min(object1)': new Error('evaluate :: fn1 :: min,object'),
        'min(null)': null,
        'min(null1)': null,
        'min(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([1])': 1,
        'min(if(number1, [5, 2], [5, 4]))': 2,
        'min([2, 1])': 1,
        'min([2, 1, 3])': 1,
        'min([2, 1, Infinity])': 1,
        'min([2, 1, -Infinity])': -Infinity,
        'min([2, 1, NaN])': NaN,
        'min([2, 1, -NaN])': -NaN,
        'min([2, 1, NaN, 0])': NaN,
        'min([2, 1, -NaN, -Infinity])': NaN,
        'min([2, 1, null])': 1,
        'min([null, 2, 1])': 1,
        'min([2, 1, null, false, -33])': -33,
        'min([])': null,
        'min([null])': null,
        'min([null, null])': null,
        'min([1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([1, "2", null])': 1,
        'min([1, string1, null])': 1,
        'min([1, null1, "2"])': 1,
        'min([1, null, string1])': 1,
        'min([2, 1, null, 4])': 1,
        'min([1, "2", 3])': 1,
        'min([1, string1, 3])': 1,
        'min([1, "2", unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([1, string1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([2, 1, false])': 1,
        'min([2, 1, true])': 1,
        'min([number1])': 1,
        'min([2, number1])': 1,
        'min([2, number1, 3])': 1,
        'min([2, number1, null])': 1,
        'min([number1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([number1, "2", null])': 1,
        'min([number1, string1, null])': 1,
        'min([number1, null1, "2"])': 1,
        'min([number1, null, string1])': 1,
        'min([2, number1, null, 4])': 1,
        'min([number1, "2", 3])': 1,
        'min([number1, string1, 3])': 1,
        'min([number1, "2", unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([number1, string1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([2, number1, false])': 1,
        'min([2, number1, true])': 1,
        'min(["test", unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([string1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([true, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([true1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min([{}, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'min({x: [toDate(1234567000), 70]}.x)': 70,
        'min({x: ["sdf", 70, []]}.x)': 70,
        'min({x: [10, toDate(1234567000), 70]}.x)': 10,
    }));

    describe('max()', factory({
        'max(1)': new Error('evaluate :: fn1 :: max,number'),
        'max("a")': new Error('evaluate :: fn1 :: max,string'),
        'max(number1)': new Error('evaluate :: fn1 :: max,number'),
        'max(string1)': new Error('evaluate :: fn1 :: max,string'),
        'max(array1)': 3,
        'max(object1)': new Error('evaluate :: fn1 :: max,object'),
        'max(null)': null,
        'max(null1)': null,
        'max(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([1])': 1,
        'max(if(number1, [5, 2], [5, 4]))': 5,
        'max([2, 1])': 2,
        'max([2, 1, 3])': 3,
        'max([2, Infinity, 3])': Infinity,
        'max([2, NaN, 3])': 3,
        'max([2, 1, null])': 2,
        'max([null, 2, 1])': 2,
        'max([2, 1, null, false, -33])': false,
        'max([])': null,
        'max([null])': null,
        'max([null, null])': null,
        'max([1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([1, "2", null])': '2',
        'max([1, string1, null])': 'abc',
        'max([1, null1, "2"])': '2',
        'max([1, null, string1])': 'abc',
        'max([2, 1, null, 4])': 4,
        'max([1, "2", 3])': '2',
        'max([1, string1, 3])': 'abc',
        'max([1, "2", unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([1, string1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([2, 1, false])': false,
        'max([2, 1, true])': true,
        'max([number1])': 1,
        'max([2, number1])': 2,
        'max([2, number1, 3])': 3,
        'max([2, number1, null])': 2,
        'max([number1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([number1, "2", null])': '2',
        'max([number1, string1, null])': 'abc',
        'max([number1, null1, "2"])': '2',
        'max([number1, null, string1])': 'abc',
        'max([2, number1, null, 4])': 4,
        'max([number1, "2", 3])': '2',
        'max([number1, string1, 3])': 'abc',
        'max([number1, "2", unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([number1, string1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([2, number1, false])': false,
        'max([2, number1, true])': true,
        'max(["test", unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([string1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([true, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([true1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max([{}, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'max({x: [toDate(1234567000), 70]}.x)': new Date('1970-01-15T06:56:07.000Z'),
        'max({x: ["sdf", 70, []]}.x)': [],
        'max({x: [10, toDate(1234567000), 70]}.x)': new Date('1970-01-15T06:56:07.000Z'),
        '[map(array1, item), item]': new DifferentResults({
            mongo: new Error('convert :: var1 :: item'),
            php: new Error('evaluate :: var1 :: item'),
            node: new Error('evaluate :: var1 :: item'),
        }),
    }));

    describe('multiply()', factory({
        'multiply(1)': new Error('evaluate :: fn7 :: multiply,number'),
        'multiply("a")': new Error('evaluate :: fn7 :: multiply,string'),
        'multiply(number1)': new Error('evaluate :: fn7 :: multiply,number'),
        'multiply(string1)': new Error('evaluate :: fn7 :: multiply,string'),
        'multiply(Infinity)': new Error('evaluate :: fn7 :: multiply,number'),
        'multiply(NaN)': new Error('evaluate :: fn7 :: multiply,number'),
        'multiply(array1)': 6,
        'multiply(object1)': new Error('evaluate :: fn7 :: multiply,object'),
        'multiply(null)': null,
        'multiply(null1)': null,
        'multiply(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'multiply([1])': 1,
        'multiply([1, 2])': 2,
        'multiply([1, 2, 3])': 6,
        'multiply(if(number1, [1, 2], [3,4]))': 2,
        'multiply([1, 2, null])': null,
        'multiply([1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'multiply([1, "2", null])': new Error('optimize :: fn7 :: multiply,string'),
        'multiply([1, string1, null])': new Error('evaluate :: fn7 :: multiply,string'),
        'multiply([1, null1, "2"])': new DifferentResults({
            mongo: null, // TODO
            php: new Error('optimize :: fn7 :: multiply,string'),
            node: new Error('optimize :: fn7 :: multiply,string'),
        }),
        'multiply([1, null, string1])': new DifferentResults({
            mongo: null, // TODO
            php: new Error('evaluate :: fn7 :: multiply,string'),
            node: new Error('evaluate :: fn7 :: multiply,string'),
        }),
        'multiply([1, 2, null, 4])': null,
        'multiply([1, "2", 3])': new Error('optimize :: fn7 :: multiply,string'),
        'multiply([1, string1, 3])': new Error('evaluate :: fn7 :: multiply,string'),
        'multiply([1, "2", unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('optimize :: fn7 :: multiply,string'),
            node: new Error('optimize :: fn7 :: multiply,string'),
        }),
        'multiply([1, string1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: fn7 :: multiply,string'),
            node: new Error('evaluate :: fn7 :: multiply,string'),
        }),
        'multiply([1, 2, false])': new Error('optimize :: fn7 :: multiply,boolean'),
        'multiply([1, 2, true])': new Error('optimize :: fn7 :: multiply,boolean'),
        'multiply(["test", unknown, 1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('optimize :: fn7 :: multiply,string'),
            node: new Error('optimize :: fn7 :: multiply,string'),
        }),
        'multiply([string1, unknown, 1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: fn7 :: multiply,string'),
            node: new Error('evaluate :: fn7 :: multiply,string'),
        }),
        'multiply([true, unknown, 1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('optimize :: fn7 :: multiply,boolean'),
            node: new Error('optimize :: fn7 :: multiply,boolean'),
        }),
        'multiply([true1, unknown, 1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: fn7 :: multiply,boolean'),
            node: new Error('evaluate :: fn7 :: multiply,boolean'),
        }),
        'multiply([1, unknown, 1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'multiply([{}, unknown, 1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('optimize :: fn7 :: multiply,object'),
            node: new Error('optimize :: fn7 :: multiply,object'),
        }),
        'multiply([number1])': 1,
        'multiply([number1, 2])': 2,
        'multiply([number1, Infinity])': Infinity,
        'multiply([number1, NaN])': NaN,
        'multiply([number1, 2, 3])': 6,
        'multiply([number1, 2, null])': null,
        'multiply([number1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'multiply([number1, "2", null])': new DifferentResults({
            mongo: new Error('evaluate :: fn7 :: multiply,string'),
            php: new Error('optimize :: fn7 :: multiply,string'),
            node: new Error('optimize :: fn7 :: multiply,string'),
        }),
        'multiply([number1, string1, null])': new Error('evaluate :: fn7 :: multiply,string'),
        'multiply([number1, null1, "2"])': null,
        'multiply([number1, null, string1])': new DifferentResults({
            mongo: null,
            php: new Error('evaluate :: fn7 :: multiply,string'),
            node: new Error('evaluate :: fn7 :: multiply,string'),
        }),
        'multiply([number1, 2, null, 4])': null,
        'multiply([number1, "2", 3])': new DifferentResults({
            mongo: new Error('evaluate :: fn7 :: multiply,string'),
            php: new Error('optimize :: fn7 :: multiply,string'),
            node: new Error('optimize :: fn7 :: multiply,string'),
        }),
        'multiply([number1, string1, 3])': new Error('evaluate :: fn7 :: multiply,string'),
        'multiply([number1, "2", unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'multiply([number1, string1, unknown])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: fn7 :: multiply,string'),
            node: new Error('evaluate :: fn7 :: multiply,string'),
        }),
        'multiply([number1, 2, false])': new DifferentResults({
            mongo: new Error('evaluate :: fn7 :: multiply,boolean'),
            php: new Error('optimize :: fn7 :: multiply,boolean'),
            node: new Error('optimize :: fn7 :: multiply,boolean'),
        }),
        'multiply([number1, 2, true])': new DifferentResults({
            mongo: new Error('evaluate :: fn7 :: multiply,boolean'),
            php: new Error('optimize :: fn7 :: multiply,boolean'),
            node: new Error('optimize :: fn7 :: multiply,boolean'),
        }),
        'multiply(["test", unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'multiply([string1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: fn7 :: multiply,string'),
            node: new Error('evaluate :: fn7 :: multiply,string'),
        }),
        'multiply([true, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'multiply([true1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: fn7 :: multiply,boolean'),
            node: new Error('evaluate :: fn7 :: multiply,boolean'),
        }),
        'multiply([1, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'multiply([{}, unknown, number1])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'multiply({x: [10, string1, 70]}.x)': new Error('evaluate :: fn7 :: multiply,string'),
        'multiply(map([10], item)) * 2': 20,
    }));

    describe('round()', factory({
        'round(1)': 1,
        'round("a")': new Error('optimize :: fn7 :: round,string'),
        'round(number1)': 1,
        'round(string1)': new Error('evaluate :: fn7 :: round,string'),
        'round(array1)': new Error('evaluate :: fn7 :: round,array'),
        'round(object1)': new Error('evaluate :: fn7 :: round,object'),
        'round(null)': null,
        'round(null1)': null,
        'round(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'round(1, null)': null,
        'round(1, [4])': new Error('optimize :: convert3 :: array,number'),
        'round(1, "2")': new Error('optimize :: convert3 :: string,number'),
        'round(1, 2)': 1,
        'round(Infinity, 2)': Infinity,
        'round(-Infinity, 2)': -Infinity,
        'round(2, Infinity)': new Error('optimize :: general1'),
        'round(-Infinity, Infinity)': new Error('optimize :: general1'),
        'round(2, -Infinity)': new Error('optimize :: general1'),
        'round(-Infinity, -Infinity)': new Error('optimize :: general1'),
        'round(NaN, 2)': NaN,
        'round(-NaN, 2)': -NaN,
        'round(2, NaN)': new Error('optimize :: general1'),
        'round(-NaN, NaN)': new Error('optimize :: general1'),
        'round(2, -NaN)': new Error('optimize :: general1'),
        'round(-NaN, -NaN)': new Error('optimize :: general1'),
        'round(1, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'round(1234.5678)': 1235,
        'round(1234.5678, 1)': 1234.6,
        'round(1234.5678, 2)': 1234.57,
        'round(1234.5678, 3)': 1234.568,
        'round(1234.5678, 4)': 1234.5678,
        'round(1234.5678, 5)': 1234.5678,
        'round(1234.5678, -1)': 1230,
        'round(1234.5678, -2)': 1200,
        'round(1234.5678, -3)': 1000,
        'round(1234.5678, -4)': 0,
        'round(1234.5678, 99)': 1234.5678,
        'round(1234.5678, 100)': 1234.5678,
        'round(1234.5678, 120)': new Error('optimize :: round2 :: 120'),
        'round(1234.5678, -19)': 0,
        'round(1234.5678, -20)': 0,
        'round(1234.5678, -30)': new Error('optimize :: round2 :: -30'),
        'round(10.44, 1)': 10.4,
        'round(10.45, 1)': 10.4,
        'round(10.46, 1)': 10.5,
        'round(-10.44, 1)': -10.4,
        'round(-10.45, 1)': -10.4,
        'round(-10.46, 1)': -10.5,
        'round(10.5)': 10,
        'round(11.5)': 12,
        'round(-10.5)': -10,
        'round(-11.5)': -12,
        'round(-11.125, 2)': -11.12,
        'round(-11.135, 2)': -11.13,
        'round(-11.25, 1)': -11.2,
        'round(-11.35, 1)': -11.3,
        'round(-1125, -1)': -1120,
        'round(-1135, -1)': -1140,
        'round(11.125, 2)': 11.12,
        'round(11.135, 2)': 11.13,
        'round(11.135, 2.5)': new Error('optimize :: round3'),
        'round(11.25, 1)': 11.2,
        'round(11.35, 1)': 11.3,
        'round(1125, -1)': 1120,
        'round(1135, -1)': 1140,
        'round(0.5)': 0,
        'round(-0.1)': 0,
        'round(-0.5)': 0,
        'round(7247295, -4)': 7250000,
    }));

    describe('trunc()', factory({
        'trunc(1)': 1,
        'trunc(Infinity)': Infinity,
        'trunc(NaN)': NaN,
        'trunc("a")': new Error('optimize :: fn7 :: trunc,string'),
        'trunc(number1)': 1,
        'trunc(string1)': new Error('evaluate :: fn7 :: trunc,string'),
        'trunc(array1)': new Error('evaluate :: fn7 :: trunc,array'),
        'trunc(object1)': new Error('evaluate :: fn7 :: trunc,object'),
        'trunc(null)': null,
        'trunc(null1)': null,
        'trunc(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'trunc(1, null)': null,
        'trunc(1, [4])': new Error('optimize :: convert3 :: array,number'),
        'trunc(1, "2")': new Error('optimize :: convert3 :: string,number'),
        'trunc(1, 2)': 1,
        'trunc(1, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'trunc(1234.5678)': 1234,
        'trunc(1234.5678, 1)': 1234.5,
        'trunc(1234.5678, 2)': 1234.56,
        'trunc(1234.5678, 3)': 1234.567,
        'trunc(1234.5678, 4)': 1234.5678,
        'trunc(1234.5678, 5)': 1234.5678,
        'trunc(1234.5678, -1)': 1230,
        'trunc(1234.5678, -2)': 1200,
        'trunc(1234.5678, -3)': 1000,
        'trunc(1234.5678, -4)': 0,
        'trunc(1234.5678, 99)': 1234.5678,
        'trunc(1234.5678, 100)': 1234.5678,
        'trunc(1234.5678, 120)': new Error('optimize :: trunc2 :: 120'),
        'trunc(1234.5678, -19)': 0,
        'trunc(1234.5678, -20)': 0,
        'trunc(1234.5678, -30)': new Error('optimize :: trunc2 :: -30'),
        'trunc(-1234.5678)': -1234,
        'trunc(-1234.5678, 1)': -1234.5,
        'trunc(-1234.5678, 2)': -1234.56,
        'trunc(-1234.5678, 3)': -1234.567,
        'trunc(-1234.5678, 4)': -1234.5678,
        'trunc(-1234.5678, 5)': -1234.5678,
        'trunc(-1234.5678, -1)': -1230,
        'trunc(-1234.5678, -2)': -1200,
        'trunc(-1234.5678, -3)': -1000,
        'trunc(-1234.5678, -4)': 0,
        'trunc(-1234.5678, 99)': -1234.5678,
        'trunc(-1234.5678, 100)': -1234.5678,
        'trunc(-1234.5678, 120)': new Error('optimize :: trunc2 :: 120'),
        'trunc(-1234.5678, -19)': 0,
        'trunc(-1234.5678, -20)': 0,
        'trunc(-1234.5678, -30)': new Error('optimize :: trunc2 :: -30'),
        'trunc(10.44, 1)': 10.4,
        'trunc(10.45, 1)': 10.4,
        'trunc(10.46, 1)': 10.4,
        'trunc(-10.44, 1)': -10.4,
        'trunc(-10.45, 1)': -10.4,
        'trunc(-10.46, 1)': -10.4,
        'trunc(10.5)': 10,
        'trunc(11.5)': 11,
        'trunc(-10.5)': -10,
        'trunc(-11.5)': -11,
        'trunc(-11.125, 2)': -11.12,
        'trunc(-11.135, 2)': -11.13,
        'trunc(-11.25, 1)': -11.2,
        'trunc(-11.35, 1)': -11.3,
        'trunc(-1125, -1)': -1120,
        'trunc(-1135, -1)': -1130,
        'trunc(11.125, 2)': 11.12,
        'trunc(11.135, 2)': 11.13,
        'trunc(11.25, 1)': 11.2,
        'trunc(11.35, 1)': 11.3,
        'trunc(1125, -1)': 1120,
        'trunc(1135, -1)': 1130,
        'trunc(0.5)': 0,
        'trunc(-0.1)': 0,
        'trunc(-0.5)': 0,
    }));

    describe('random()', factory({
        'random() > 0': true,
        'random() < 1': true,
        // Так проверяем, что внутри map дважды выполненный random не кэшируется
        'map([map([1, 2], random())], item[0] != item[1])[0]': true,
    }));

    describe('floor()', factory({
        'floor(1)': 1,
        'floor(Infinity)': Infinity,
        'floor(NaN)': NaN,
        'floor("a")': new Error('optimize :: fn7 :: floor,string'),
        'floor(number1)': 1,
        'floor(string1)': new Error('evaluate :: fn7 :: floor,string'),
        'floor(array1)': new Error('evaluate :: fn7 :: floor,array'),
        'floor(object1)': new Error('evaluate :: fn7 :: floor,object'),
        'floor(null)': null,
        'floor(null1)': null,
        'floor(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'floor(1234.5678)': 1234,
        'floor(1234.5)': 1234,
        'floor(1234.3)': 1234,
        'floor(1234.8)': 1234,
        'floor(-1234.8)': -1235,
        'floor(-1234.3)': -1235,
    }));

    describe('ceil()', factory({
        'ceil(1)': 1,
        'ceil(Infinity)': Infinity,
        'ceil(NaN)': NaN,
        'ceil("a")': new Error('optimize :: fn7 :: ceil,string'),
        'ceil(number1)': 1,
        'ceil(string1)': new Error('evaluate :: fn7 :: ceil,string'),
        'ceil(array1)': new Error('evaluate :: fn7 :: ceil,array'),
        'ceil(object1)': new Error('evaluate :: fn7 :: ceil,object'),
        'ceil(null)': null,
        'ceil(null1)': null,
        'ceil(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'ceil(1234.5678)': 1235,
        'ceil(1234.5)': 1235,
        'ceil(1234.3)': 1235,
        'ceil(1234.8)': 1235,
        'ceil(-1234.8)': -1234,
        'ceil(-1234.3)': -1234,
    }));

    describe('abs()', factory({
        'abs(1)': 1,
        'abs(Infinity)': Infinity,
        'abs(NaN)': NaN,
        'abs("a")': new Error('optimize :: fn7 :: abs,string'),
        'abs(number1)': 1,
        'abs(string1)': new Error('evaluate :: fn7 :: abs,string'),
        'abs(array1)': new Error('evaluate :: fn7 :: abs,array'),
        'abs(object1)': new Error('evaluate :: fn7 :: abs,object'),
        'abs(null)': null,
        'abs(null1)': null,
        'abs(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'abs(1234.5678)': 1234.5678,
        'abs(1234.5)': 1234.5,
        'abs(1234.3)': 1234.3,
        'abs(1234.8)': 1234.8,
        'abs(-1234.8)': 1234.8,
        'abs(-1234.3)': 1234.3,
    }));

    describe('sqrt()', factory({
        'sqrt(1)': 1,
        'sqrt(-1)': new Error('optimize :: sqrt2'),
        'sqrt(Infinity)': Infinity,
        'sqrt(NaN)': NaN,
        'sqrt("a")': new Error('optimize :: fn7 :: sqrt,string'),
        'sqrt(number1)': 1,
        'sqrt(string1)': new Error('evaluate :: fn7 :: sqrt,string'),
        'sqrt(array1)': new Error('evaluate :: fn7 :: sqrt,array'),
        'sqrt(object1)': new Error('evaluate :: fn7 :: sqrt,object'),
        'sqrt(null)': null,
        'sqrt(null1)': null,
        'sqrt(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sqrt(1234.5678)': 35.13641700572214,
        'sqrt(1234.5)': 35.13545218152173,
        'sqrt(4)': 2,
        'sqrt(0)': 0,
        'sqrt(9)': 3,
        'sqrt(16)': 4,
        'sqrt(1234.3)': 35.13260593807411,
        'sqrt(1234.8)': 35.139721114431175,
        'sqrt(-1234.8)': new Error('optimize :: sqrt2'),
        'sqrt(-1234.3)': new Error('optimize :: sqrt2'),
    }));

    describe('exp()', factory({
        'exp(1)': 2.718281828459045,
        'exp(Infinity)': Infinity,
        'exp(NaN)': NaN,
        'exp("a")': new Error('optimize :: fn7 :: exp,string'),
        'exp(number1)': 2.718281828459045,
        'exp(string1)': new Error('evaluate :: fn7 :: exp,string'),
        'exp(array1)': new Error('evaluate :: fn7 :: exp,array'),
        'exp(object1)': new Error('evaluate :: fn7 :: exp,object'),
        'exp(null)': null,
        'exp(null1)': null,
        'exp(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'exp(1234.5678)': Infinity,
        'exp(1234.5)': Infinity,
        'exp(4)': 54.598150033144236,
        'exp(0)': 1,
        'exp(9)': 8103.083927575384,
        'exp(16)': 8886110.520507872,
        'exp(1234.3)': Infinity,
        'exp(1234.8)': Infinity,
        'exp(-1234.8)': 0,
        'exp(-1234.3)': 0,
    }));

    describe('sin()', factory({
        'sin(1)': 0.8414709848078965,
        'sin("a")': new Error('optimize :: fn7 :: sin,string'),
        'sin(number1)': 0.8414709848078965,
        'sin(string1)': new Error('evaluate :: fn7 :: sin,string'),
        'sin(array1)': new Error('evaluate :: fn7 :: sin,array'),
        'sin(object1)': new Error('evaluate :: fn7 :: sin,object'),
        'sin(null)': null,
        'sin(null1)': null,
        'sin(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sin(0)': 0,
        'sin(1234.5678)': 0.07803344920002027,
        'sin(1234.5)': 0.14539565052293643,
        'sin(1.2)': 0.9320390859672263,
        'sin(0.2)': 0.19866933079506122,
        'sin(0.05)': 0.04997916927067833,
        'sin(1.05)': 0.867423225594017,
        'round(sin(4), 14)': -0.75680249530793,
        'sin(9)': 0.4121184852417566,
        'sin(16)': -0.2879033166650653,
        'sin(1234.3)': 0.33905560709631233,
        'sin(124344534.8)': 0.7709848321176074,
        'sin(-1234.5678)': -0.07803344920002027,
        'sin(-1234.5)': -0.14539565052293643,
        'sin(-1.2)': -0.9320390859672263,
        'sin(-0.2)': -0.19866933079506122,
        'sin(-0.05)': -0.04997916927067833,
        'sin(-1.05)': -0.867423225594017,
        'round(sin(-4), 14)': 0.75680249530793,
        'sin(-9)': -0.4121184852417566,
        'sin(-16)': 0.2879033166650653,
        'sin(-1234.3)': -0.33905560709631233,
        'sin(-124344534.8)': -0.7709848321176074,
        'sin(Infinity)': new Error('optimize :: sin2'),
        'sin(NaN)': NaN,
        'sin(-Infinity)': new Error('optimize :: sin2'),
    }));

    describe('cos()', factory({
        'cos(1)': 0.5403023058681398,
        'cos("a")': new Error('optimize :: fn7 :: cos,string'),
        'cos(number1)': 0.5403023058681398,
        'cos(string1)': new Error('evaluate :: fn7 :: cos,string'),
        'cos(array1)': new Error('evaluate :: fn7 :: cos,array'),
        'cos(object1)': new Error('evaluate :: fn7 :: cos,object'),
        'cos(null)': null,
        'cos(null1)': null,
        'cos(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'cos(0)': 1,
        'cos(1234.5678)': -0.9969507414140119,
        'cos(1234.5)': -0.989373592132422,
        'cos(1.2)': 0.3623577544766736,
        'cos(0.2)': 0.9800665778412416,
        'cos(0.05)': 0.9987502603949663,
        'cos(1.05)': 0.49757104789172696,
        'cos(4)': -0.6536436208636119,
        'cos(9)': -0.9111302618846769,
        'cos(16)': -0.9576594803233847,
        'cos(1234.3)': -0.9407663340577994,
        'cos(1234.8)': -0.9881520466315824,
        'cos(124344534.8)': -0.6368535064240322,
        'cos(-1234.5678)': -0.9969507414140119,
        'cos(-1234.5)': -0.989373592132422,
        'cos(-1.2)': 0.3623577544766736,
        'cos(-0.2)': 0.9800665778412416,
        'cos(-0.05)': 0.9987502603949663,
        'cos(-1.05)': 0.49757104789172696,
        'cos(-4)': -0.6536436208636119,
        'cos(-9)': -0.9111302618846769,
        'cos(-16)': -0.9576594803233847,
        'cos(-1234.3)': -0.9407663340577994,
        'cos(-1234.8)': -0.9881520466315824,
        'cos(-124344534.8)': -0.6368535064240322,
        'cos(Infinity)': new Error('optimize :: cos2'),
        'cos(NaN)': NaN,
        'cos(-Infinity)': new Error('optimize :: cos2'),
    }));

    describe('cosh()', factory({
        'cosh(1)': 1.5430806348152437,
        'cosh("a")': new Error('optimize :: fn7 :: cosh,string'),
        'cosh(number1)': 1.5430806348152437,
        'cosh(string1)': new Error('evaluate :: fn7 :: cosh,string'),
        'cosh(array1)': new Error('evaluate :: fn7 :: cosh,array'),
        'cosh(object1)': new Error('evaluate :: fn7 :: cosh,object'),
        'cosh(null)': null,
        'cosh(null1)': null,
        'cosh(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'cosh(0)': 1,
        'cosh(1234.56)': Infinity,
        'cosh(1234.5)': Infinity,
        'cosh(1.2)': 1.8106555673243747,
        'cosh(0.2)': 1.020066755619076,
        'cosh(0.05)': 1.001250260438369,
        'cosh(1.05)': 1.6037944335871597,
        'cosh(4)': 27.308232836016487,
        'round(cosh(9), 8)': 4051.54202549,
        'round(cosh(16), 8)': 4443055.26025399,
        'cosh(1234.3)': Infinity,
        'cosh(1234.8)': Infinity,
        'cosh(124345)': Infinity,
        'cosh(-1234.56)': Infinity,
        'cosh(-1234.5)': Infinity,
        'cosh(-1.2)': 1.8106555673243747,
        'cosh(-0.2)': 1.020066755619076,
        'cosh(-0.05)': 1.001250260438369,
        'cosh(-1.05)': 1.6037944335871597,
        'cosh(-4)': 27.308232836016487,
        'round(cosh(-9), 8)': 4051.54202549,
        'round(cosh(-16), 8)': 4443055.26025399,
        'cosh(-1234.3)': Infinity,
        'cosh(-1234.8)': Infinity,
        'cosh(-12435)': Infinity,
        'cosh(Infinity)': Infinity,
        'cosh(NaN)': NaN,
        'cosh(-Infinity)': Infinity,
    }));

    describe('acos()', factory({
        'acos(1)': 0,
        'acos("a")': new Error('optimize :: fn7 :: acos,string'),
        'acos(number1)': 0,
        'acos(string1)': new Error('evaluate :: fn7 :: acos,string'),
        'acos(array1)': new Error('evaluate :: fn7 :: acos,array'),
        'acos(object1)': new Error('evaluate :: fn7 :: acos,object'),
        'acos(null)': null,
        'acos(null1)': null,
        'acos(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'acos(0)': 1.5707963267948966,
        'acos(1234.56)': new Error('optimize :: acos2 :: 1234.56'),
        'acos(1234.5)': new Error('optimize :: acos2 :: 1234.5'),
        'acos(1.2)': new Error('optimize :: acos2 :: 1.2'),
        'round(acos(0.2), 14)': 1.36943840600457,
        'round(acos(0.05), 14)': 1.52077546998913,
        'acos(1.05)': new Error('optimize :: acos2 :: 1.05'),
        'acos(4)': new Error('optimize :: acos2 :: 4'),
        'acos(9)': new Error('optimize :: acos2 :: 9'),
        'acos(16)': new Error('optimize :: acos2 :: 16'),
        'acos(1234.3)': new Error('optimize :: acos2 :: 1234.3'),
        'acos(1234.8)': new Error('optimize :: acos2 :: 1234.8'),
        'acos(124345)': new Error('optimize :: acos2 :: 124345'),
        'acos(-1234.56)': new Error('optimize :: acos2 :: -1234.56'),
        'acos(-1234.5)': new Error('optimize :: acos2 :: -1234.5'),
        'acos(-1.2)': new Error('optimize :: acos2 :: -1.2'),
        'acos(-0.2)': 1.7721542475852274,
        'acos(-0.05)': 1.6208171836006666,
        'acos(-1.05)': new Error('optimize :: acos2 :: -1.05'),
        'acos(-4)': new Error('optimize :: acos2 :: -4'),
        'acos(-9)': new Error('optimize :: acos2 :: -9'),
        'acos(-16)': new Error('optimize :: acos2 :: -16'),
        'acos(-1234.3)': new Error('optimize :: acos2 :: -1234.3'),
        'acos(-1234.8)': new Error('optimize :: acos2 :: -1234.8'),
        'acos(-12435)': new Error('optimize :: acos2 :: -12435'),
        'acos(Infinity)': new Error('optimize :: acos2 :: Infinity'),
        'acos(NaN)': NaN,
        'acos(-Infinity)': new Error('optimize :: acos2 :: -Infinity'),
    }));

    describe('acosh()', factory({
        'acosh(1)': 0,
        'acosh("a")': new Error('optimize :: fn7 :: acosh,string'),
        'acosh(number1)': 0,
        'acosh(string1)': new Error('evaluate :: fn7 :: acosh,string'),
        'acosh(array1)': new Error('evaluate :: fn7 :: acosh,array'),
        'acosh(object1)': new Error('evaluate :: fn7 :: acosh,object'),
        'acosh(null)': null,
        'acosh(null1)': null,
        'acosh(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'acosh(0)': new Error('optimize :: acosh2 :: 0'),
        'acosh(1234.56)': 7.811616926810115,
        'acosh(1234.5)': 7.811568325302095,
        'acosh(1.2)': 0.6223625037147786,
        'acosh(0.2)': new Error('optimize :: acosh2 :: 0.2'),
        'acosh(0.05)': new Error('optimize :: acosh2 :: 0.05'),
        'acosh(1.05)': 0.314924756603848,
        'acosh(4)': 2.0634370688955608,
        'acosh(9)': 2.8872709503576206,
        'acosh(16)': 3.464757906675863,
        'acosh(1234.3)': 7.811406303213578,
        'acosh(1234.8)': 7.811811309224566,
        'acosh(124345)': 12.423962419879667,
        'acosh(-1234.56)': new Error('optimize :: acosh2 :: -1234.56'),
        'acosh(-1234.5)': new Error('optimize :: acosh2 :: -1234.5'),
        'acosh(-1.2)': new Error('optimize :: acosh2 :: -1.2'),
        'acosh(-0.2)': new Error('optimize :: acosh2 :: -0.2'),
        'acosh(-0.05)': new Error('optimize :: acosh2 :: -0.05'),
        'acosh(-1.05)': new Error('optimize :: acosh2 :: -1.05'),
        'acosh(-4)': new Error('optimize :: acosh2 :: -4'),
        'acosh(-9)': new Error('optimize :: acosh2 :: -9'),
        'acosh(-16)': new Error('optimize :: acosh2 :: -16'),
        'acosh(-1234.3)': new Error('optimize :: acosh2 :: -1234.3'),
        'acosh(-1234.8)': new Error('optimize :: acosh2 :: -1234.8'),
        'acosh(-12435)': new Error('optimize :: acosh2 :: -12435'),
        'acosh(Infinity)': Infinity,
        'acosh(NaN)': NaN,
        'acosh(-Infinity)': new Error('optimize :: acosh2 :: -Infinity'),
    }));

    describe('asin()', factory({
        'asin(1)': 1.5707963267948966,
        'asin("a")': new Error('optimize :: fn7 :: asin,string'),
        'asin(number1)': 1.5707963267948966,
        'asin(string1)': new Error('evaluate :: fn7 :: asin,string'),
        'asin(array1)': new Error('evaluate :: fn7 :: asin,array'),
        'asin(object1)': new Error('evaluate :: fn7 :: asin,object'),
        'asin(null)': null,
        'asin(null1)': null,
        'asin(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'asin(0)': 0,
        'asin(1234.56)': new Error('optimize :: asin2 :: 1234.56'),
        'asin(1234.5)': new Error('optimize :: asin2 :: 1234.5'),
        'asin(1.2)': new Error('optimize :: asin2 :: 1.2'),
        'asin(0.2)': 0.2013579207903308,
        'asin(0.05)': 0.050020856805770016,
        'asin(1.05)': new Error('optimize :: asin2 :: 1.05'),
        'asin(4)': new Error('optimize :: asin2 :: 4'),
        'asin(9)': new Error('optimize :: asin2 :: 9'),
        'asin(16)': new Error('optimize :: asin2 :: 16'),
        'asin(1234.3)': new Error('optimize :: asin2 :: 1234.3'),
        'asin(1234.8)': new Error('optimize :: asin2 :: 1234.8'),
        'asin(124345)': new Error('optimize :: asin2 :: 124345'),
        'asin(-1234.56)': new Error('optimize :: asin2 :: -1234.56'),
        'asin(-1234.5)': new Error('optimize :: asin2 :: -1234.5'),
        'asin(-1.2)': new Error('optimize :: asin2 :: -1.2'),
        'asin(-0.2)': -0.2013579207903308,
        'asin(-0.05)': -0.050020856805770016,
        'asin(-1.05)': new Error('optimize :: asin2 :: -1.05'),
        'asin(-4)': new Error('optimize :: asin2 :: -4'),
        'asin(-9)': new Error('optimize :: asin2 :: -9'),
        'asin(-16)': new Error('optimize :: asin2 :: -16'),
        'asin(-1234.3)': new Error('optimize :: asin2 :: -1234.3'),
        'asin(-1234.8)': new Error('optimize :: asin2 :: -1234.8'),
        'asin(-12435)': new Error('optimize :: asin2 :: -12435'),
        'asin(Infinity)': new Error('optimize :: asin2 :: Infinity'),
        'asin(NaN)': NaN,
        'asin(-Infinity)': new Error('optimize :: asin2 :: -Infinity'),
    }));

    describe('sinh()', factory({
        'sinh(1)': 1.1752011936438014,
        'sinh("a")': new Error('optimize :: fn7 :: sinh,string'),
        'sinh(number1)': 1.1752011936438014,
        'sinh(string1)': new Error('evaluate :: fn7 :: sinh,string'),
        'sinh(array1)': new Error('evaluate :: fn7 :: sinh,array'),
        'sinh(object1)': new Error('evaluate :: fn7 :: sinh,object'),
        'sinh(null)': null,
        'sinh(null1)': null,
        'sinh(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sinh(0)': 0,
        'sinh(1234.56)': Infinity,
        'sinh(1234.5)': Infinity,
        'sinh(1.2)': 1.5094613554121725,
        'round(sinh(0.2), 14)': 0.20133600254109,
        'sinh(0.05)': 0.050020835937655016,
        'sinh(1.05)': 1.2538566844760042,
        'round(sinh(4), 12)': 27.289917197128,
        'sinh(9)': 4051.54190208279,
        'sinh(16)': 4443055.26025388,
        'sinh(1234.3)': Infinity,
        'sinh(1234.8)': Infinity,
        'sinh(124345)': Infinity,
        'sinh(-1234.56)': -Infinity,
        'sinh(-1234.5)': -Infinity,
        'sinh(-1.2)': -1.5094613554121725,
        'round(sinh(-0.2), 14)': -0.20133600254109,
        'sinh(-0.05)': -0.050020835937655016,
        'sinh(-1.05)': -1.2538566844760042,
        'round(sinh(-4), 12)': -27.289917197128,
        'sinh(-9)': -4051.54190208279,
        'sinh(-16)': -4443055.26025388,
        'sinh(-1234.3)': -Infinity,
        'sinh(-1234.8)': -Infinity,
        'sinh(-12435)': -Infinity,
        'sinh(Infinity)': Infinity,
        'sinh(NaN)': NaN,
        'sinh(-Infinity)': -Infinity,
    }));

    describe('asinh()', factory({
        'asinh(1)': 0.881373587019543,
        'asinh("a")': new Error('optimize :: fn7 :: asinh,string'),
        'asinh(number1)': 0.881373587019543,
        'asinh(string1)': new Error('evaluate :: fn7 :: asinh,string'),
        'asinh(array1)': new Error('evaluate :: fn7 :: asinh,array'),
        'asinh(object1)': new Error('evaluate :: fn7 :: asinh,object'),
        'asinh(null)': null,
        'asinh(null1)': null,
        'asinh(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'asinh(0)': 0,
        'asinh(1234.56)': 7.811617254864314,
        'asinh(1234.5)': 7.811568653388183,
        'asinh(1.2)': 1.015973134179692,
        'asinh(0.2)': 0.19869011034924142,
        'asinh(0.05)': 0.04997919006934867,
        'asinh(1.05)': 0.9162907318741551,
        'asinh(4)': 2.0947125472611012,
        'asinh(9)': 2.8934439858858716,
        'asinh(16)': 3.466711037884725,
        'asinh(1234.3)': 7.811406631405998,
        'asinh(1234.8)': 7.811811637151253,
        'asinh(124345)': 12.423962419912005,
        'asinh(-1234.56)': -7.811617254864314,
        'asinh(-1234.5)': -7.811568653388183,
        'asinh(-1.2)': -1.015973134179692,
        'asinh(-0.2)': -0.19869011034924142,
        'asinh(-0.05)': -0.04997919006934867,
        'asinh(-1.05)': -0.9162907318741551,
        'asinh(-4)': -2.0947125472611012,
        'asinh(-9)': -2.8934439858858716,
        'asinh(-16)': -3.466711037884725,
        'asinh(-1234.3)': -7.811406631405998,
        'asinh(-1234.8)': -7.811811637151253,
        'asinh(-12435)': -10.12141753841422,
        'asinh(Infinity)': Infinity,
        'asinh(NaN)': NaN,
        'asinh(-Infinity)': -Infinity,
    }));

    describe('atan()', factory({
        'atan(1)': 0.7853981633974483,
        'atan("a")': new Error('optimize :: fn7 :: atan,string'),
        'atan(number1)': 0.7853981633974483,
        'atan(string1)': new Error('evaluate :: fn7 :: atan,string'),
        'atan(array1)': new Error('evaluate :: fn7 :: atan,array'),
        'atan(object1)': new Error('evaluate :: fn7 :: atan,object'),
        'atan(null)': null,
        'atan(null1)': null,
        'atan(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'atan(0)': 0,
        'atan(1234.56)': 1.5699863217880137,
        'atan(1234.5)': 1.5699862824196225,
        'atan(1.2)': 0.8760580505981934,
        'atan(0.2)': 0.19739555984988078,
        'atan(0.05)': 0.049958395721942765,
        'atan(1.05)': 0.8097835725701669,
        'atan(4)': 1.3258176636680326,
        'atan(9)': 1.460139105621001,
        'atan(16)': 1.5083775167989393,
        'atan(1234.3)': 1.5699861511640085,
        'atan(1234.8)': 1.5699864792233205,
        'atan(124345)': 1.5707882846540788,
        'atan(-1234.56)': -1.5699863217880137,
        'atan(-1234.5)': -1.5699862824196225,
        'atan(-1.2)': -0.8760580505981934,
        'atan(-0.2)': -0.19739555984988078,
        'atan(-0.05)': -0.049958395721942765,
        'atan(-1.05)': -0.8097835725701669,
        'atan(-4)': -1.3258176636680326,
        'atan(-9)': -1.460139105621001,
        'atan(-16)': -1.5083775167989393,
        'atan(-1234.3)': -1.5699861511640085,
        'atan(-1234.8)': -1.5699864792233205,
        'atan(-12435)': -1.5707159086205624,
        'atan(Infinity)': 1.5707963267948966,
        'atan(NaN)': NaN,
        'atan(-Infinity)': -1.5707963267948966,
    }));

    describe('atan2()', factory({
        'atan2(1, 1)': 0.7853981633974483,
        'atan2("a", 1)': new Error('optimize :: fn7 :: atan2,string'),
        'atan2(number1, 1)': 0.7853981633974483,
        'atan2(string1, 1)': new Error('evaluate :: fn7 :: atan2,string'),
        'atan2(array1, 1)': new Error('evaluate :: fn7 :: atan2,array'),
        'atan2(object1, 1)': new Error('evaluate :: fn7 :: atan2,object'),
        'atan2(null, 1)': null,
        'atan2(null1, 1)': null,
        'atan2(unknown, 1)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'atan2(0, 1)': 0,
        'atan2(1234.56, 1)': 1.5699863217880137,
        'atan2(1234.5, 1)': 1.5699862824196225,
        'atan2(1.2, 1)': 0.8760580505981934,
        'atan2(0.2, 1)': 0.19739555984988078,
        'atan2(0.05, 1)': 0.049958395721942765,
        'atan2(1.05, 1)': 0.8097835725701669,
        'atan2(4, 1)': 1.3258176636680326,
        'atan2(9, 1)': 1.460139105621001,
        'atan2(16, 1)': 1.5083775167989393,
        'atan2(1234.3, 1)': 1.5699861511640085,
        'atan2(1234.8, 1)': 1.5699864792233205,
        'atan2(124345, 1)': 1.5707882846540788,
        'atan2(-1234.56, 1)': -1.5699863217880137,
        'atan2(-1234.5, 1)': -1.5699862824196225,
        'atan2(-1.2, 1)': -0.8760580505981934,
        'atan2(-0.2, 1)': -0.19739555984988078,
        'atan2(-0.05, 1)': -0.049958395721942765,
        'atan2(-1.05, 1)': -0.8097835725701669,
        'atan2(-4, 1)': -1.3258176636680326,
        'atan2(-9, 1)': -1.460139105621001,
        'atan2(-16, 1)': -1.5083775167989393,
        'atan2(-1234.3, 1)': -1.5699861511640085,
        'atan2(-1234.8, 1)': -1.5699864792233205,
        'atan2(-12435, 1)': -1.5707159086205624,
        'atan2(Infinity, 1)': 1.5707963267948966,
        'atan2(NaN, 1)': NaN,
        'atan2(-Infinity, 1)': -1.5707963267948966,
        'atan2(1, "a")': new Error('optimize :: fn7 :: atan2,string'),
        'atan2(1, number1)': 0.7853981633974483,
        'atan2(1, string1)': new Error('evaluate :: fn7 :: atan2,string'),
        'atan2(1, array1)': new Error('evaluate :: fn7 :: atan2,array'),
        'atan2(1, object1)': new Error('evaluate :: fn7 :: atan2,object'),
        'atan2(1, null)': null,
        'atan2(1, null1)': null,
        'atan2(1, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'atan2(1, 0)': 1.5707963267948966,
        'atan2(1, 1234.56)': 0.0008100050068828463,
        'atan2(1, 1234.5)': 0.0008100443752742221,
        'atan2(1, 1.2)': 0.6947382761967033,
        'atan2(1, 0.2)': 1.373400766945016,
        'atan2(1, 0.05)': 1.5208379310729538,
        'round(atan2(1, 1.05), 12)': 0.761012754225,
        'atan2(1, 4)': 0.24497866312686414,
        'round(atan2(1, 9), 12)': 0.110657221174,
        'atan2(1, 16)': 0.06241880999595735,
        'atan2(1, 1234.3)': 0.0008101756308880657,
        'atan2(1, 1234.8)': 0.0008098475715762019,
        'round(atan2(1, 124345), 14)': 0.00000804214082,
        'atan2(1, -1234.56)': 3.1407826485829102,
        'atan2(1, -1234.5)': 3.140782609214519,
        'atan2(1, -1.2)': 2.44685437739309,
        'atan2(1, -0.2)': 1.7681918866447774,
        'round(atan2(1, -0.05), 14)': 1.62075472251684,
        'atan2(1, -1.05)': 2.3805798993650633,
        'atan2(1, -4)': 2.896613990462929,
        'atan2(1, -9)': 3.0309354324158977,
        'atan2(1, -16)': 3.079173843593836,
        'atan2(1, -1234.3)': 3.140782477958905,
        'atan2(1, -1234.8)': 3.1407828060182172,
        'atan2(1, -12435)': 3.141512235415459,
        'atan2(1, Infinity)': 0,
        'atan2(1, NaN)': NaN,
        'atan2(1, -Infinity)': 3.141592653589793,
        'atan2(Infinity, Infinity)': 0.7853981633974483,
        'atan2(Infinity, -Infinity)': 2.356194490192345,
        'atan2(-Infinity, Infinity)': -0.7853981633974483,
        'atan2(-Infinity, -Infinity)': -2.356194490192345,
    }));

    describe('tanh()', factory({
        'tanh(1)': 0.7615941559557649,
        'tanh("a")': new Error('optimize :: fn7 :: tanh,string'),
        'tanh(number1)': 0.7615941559557649,
        'tanh(string1)': new Error('evaluate :: fn7 :: tanh,string'),
        'tanh(array1)': new Error('evaluate :: fn7 :: tanh,array'),
        'tanh(object1)': new Error('evaluate :: fn7 :: tanh,object'),
        'tanh(null)': null,
        'tanh(null1)': null,
        'tanh(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'tanh(0)': 0,
        'tanh(1234.56)': 1,
        'tanh(1234.5)': 1,
        'tanh(1.2)': 0.8336546070121552,
        'tanh(0.2)': 0.197375320224904,
        'tanh(0.05)': 0.04995837495787998,
        'tanh(1.05)': 0.7818063576087741,
        'tanh(4)': 0.999329299739067,
        'tanh(9)': 0.999999969540041,
        'tanh(16)': 0.9999999999999747,
        'tanh(1234.3)': 1,
        'tanh(1234.8)': 1,
        'tanh(124345)': 1,
        'tanh(-1234.56)': -1,
        'tanh(-1234.5)': -1,
        'tanh(-1.2)': -0.8336546070121552,
        'tanh(-0.2)': -0.197375320224904,
        'tanh(-0.05)': -0.04995837495787998,
        'tanh(-1.05)': -0.7818063576087741,
        'tanh(-4)': -0.999329299739067,
        'tanh(-9)': -0.999999969540041,
        'tanh(-16)': -0.9999999999999747,
        'tanh(-1234.3)': -1,
        'tanh(-1234.8)': -1,
        'tanh(-12435)': -1,
        'tanh(Infinity)': 1,
        'tanh(NaN)': NaN,
        'tanh(-Infinity)': -1,
    }));

    describe('atanh()', factory({
        'atanh(1)': Infinity,
        'atanh("a")': new Error('optimize :: fn7 :: atanh,string'),
        'atanh(number1)': Infinity,
        'atanh(string1)': new Error('evaluate :: fn7 :: atanh,string'),
        'atanh(array1)': new Error('evaluate :: fn7 :: atanh,array'),
        'atanh(object1)': new Error('evaluate :: fn7 :: atanh,object'),
        'atanh(null)': null,
        'atanh(null1)': null,
        'atanh(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'atanh(0)': 0,
        'atanh(1234.56)': new Error('optimize :: atanh2 :: 1234.56'),
        'atanh(1234.5)': new Error('optimize :: atanh2 :: 1234.5'),
        'atanh(1.2)': new Error('optimize :: atanh2 :: 1.2'),
        'atanh(0.2)': 0.2027325540540822,
        'atanh(0.05)': 0.05004172927849127,
        'atanh(1.05)': new Error('optimize :: atanh2 :: 1.05'),
        'atanh(4)': new Error('optimize :: atanh2 :: 4'),
        'atanh(9)': new Error('optimize :: atanh2 :: 9'),
        'atanh(16)': new Error('optimize :: atanh2 :: 16'),
        'atanh(1234.3)': new Error('optimize :: atanh2 :: 1234.3'),
        'atanh(1234.8)': new Error('optimize :: atanh2 :: 1234.8'),
        'atanh(124345)': new Error('optimize :: atanh2 :: 124345'),
        'atanh(-1234.56)': new Error('optimize :: atanh2 :: -1234.56'),
        'atanh(-1234.5)': new Error('optimize :: atanh2 :: -1234.5'),
        'atanh(-1.2)': new Error('optimize :: atanh2 :: -1.2'),
        'atanh(-0.2)': -0.2027325540540822,
        'atanh(-0.05)': -0.05004172927849127,
        'atanh(-1.05)': new Error('optimize :: atanh2 :: -1.05'),
        'atanh(-4)': new Error('optimize :: atanh2 :: -4'),
        'atanh(-9)': new Error('optimize :: atanh2 :: -9'),
        'atanh(-16)': new Error('optimize :: atanh2 :: -16'),
        'atanh(-1234.3)': new Error('optimize :: atanh2 :: -1234.3'),
        'atanh(-1234.8)': new Error('optimize :: atanh2 :: -1234.8'),
        'atanh(-12435)': new Error('optimize :: atanh2 :: -12435'),
        'atanh(Infinity)': new Error('optimize :: atanh2 :: Infinity'),
        'atanh(NaN)': NaN,
        'atanh(-Infinity)': new Error('optimize :: atanh2 :: -Infinity'),
    }));

    describe('tan()', factory({
        'round(tan(1), 14)': 1.5574077246549,
        'tan("a")': new Error('optimize :: fn7 :: tan,string'),
        'round(tan(number1), 14)': 1.5574077246549,
        'tan(string1)': new Error('evaluate :: fn7 :: tan,string'),
        'tan(array1)': new Error('evaluate :: fn7 :: tan,array'),
        'tan(object1)': new Error('evaluate :: fn7 :: tan,object'),
        'tan(null)': null,
        'tan(null1)': null,
        'tan(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'tan(0)': 0,
        'round(tan(1234.5678), 14)': -0.07827212113744,
        'round(tan(1234.5), 14)': -0.14695727850342,
        'round(tan(1.2), 14)': 2.57215162212632,
        'round(tan(0.2), 14)': 0.20271003550867,
        'round(tan(0.05), 14)': 0.05004170837554,
        'round(tan(1.05), 14)': 1.74331530998317,
        'round(tan(4), 14)': 1.15782128234958,
        'round(tan(9), 14)': -0.45231565944181,
        'round(tan(16), 14)': 0.3006322420239,
        'round(tan(1234.3), 14)': -0.36040363565506,
        'round(tan(1234.8), 14)': 0.15531832234792,
        'round(tan(124344534.8), 14)': -1.21061566646108,
        'round(tan(-1234.5678), 14)': 0.07827212113744,
        'round(tan(-1234.5), 14)': 0.14695727850342,
        'round(tan(-1.2), 14)': -2.57215162212632,
        'round(tan(-0.2), 14)': -0.20271003550867,
        'round(tan(-0.05), 14)': -0.05004170837554,
        'round(tan(-1.05), 14)': -1.74331530998317,
        'round(tan(-4), 14)': -1.15782128234958,
        'round(tan(-9), 14)': 0.45231565944181,
        'round(tan(-16), 14)': -0.3006322420239,
        'round(tan(-1234.3), 14)': 0.36040363565506,
        'round(tan(-1234.8), 14)': -0.15531832234792,
        'round(tan(-124344534.8), 14)': 1.21061566646108,
        'tan(Infinity)': new Error('optimize :: tan2'),
        'tan(NaN)': NaN,
        'tan(-Infinity)': new Error('optimize :: tan2'),
    }));

    describe('pow()', factory({
        'pow(1, number2)': 1,
        'pow("a", number2)': new Error('evaluate :: fn2 :: pow,1st,string'),
        'pow(number1, number2)': 1,
        'pow(string1, number2)': new Error('evaluate :: fn2 :: pow,1st,string'),
        'pow(array1, number2)': new Error('evaluate :: fn2 :: pow,1st,array'),
        'pow(object1, number2)': new Error('evaluate :: fn2 :: pow,1st,object'),
        'pow(null, number2)': null,
        'pow(null1, number2)': null,
        'pow(unknown, number2)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'pow(1234.5678, number2)': 1524157.65279684,
        'pow(1234.5, number2)': 1523990.25,
        'pow(1234.3, number2)': 1523496.49,
        'pow(1234.8, number2)': 1524731.0399999998,
        'pow(-1234.8, number2)': 1524731.0399999998,
        'pow(-1234.3, number2)': 1523496.49,
        'pow(number2, 1)': 2,
        'pow(number2, "a")': new Error('evaluate :: fn2 :: pow,2nd,string'),
        'pow(number2, number1)': 2,
        'pow(number2, string1)': new Error('evaluate :: fn2 :: pow,2nd,string'),
        'pow(number2, array1)': new Error('evaluate :: fn2 :: pow,2nd,array'),
        'pow(number2, object1)': new Error('evaluate :: fn2 :: pow,2nd,object'),
        'pow(number2, null)': null,
        'pow(number2, null1)': null,
        'pow(number2, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'pow(number2, 1234.5678)': new Error('evaluate :: pow3'),
        'pow(number2, 1234.5)': new Error('evaluate :: pow3'),
        'pow(number2, 1234.3)': new Error('evaluate :: pow3'),
        'pow(number2, 1234.8)': new Error('evaluate :: pow3'),
        'pow(number2, 4.5678)': 23.716184167706693,
        'pow(number2, 4)': 16,
        'pow(number2, 4.3)': 19.698310613518657,
        'pow(number2, 4.8)': 27.85761802547597,
        'pow(number2, -1234.8)': 0,
        'pow(number2, -1234.3)': 0,
        'pow(2, -Infinity)': 0,
        'pow(number1 + 5, 0)': 1,
        'pow(0, 5 + number0)': 0,
        'pow(5 + number0, 2)': 25,
        'round(pow(50 + number0, -2), 5)': 0.0004,
        'pow(55 + number0, -1)': 0.01818181818181818,
        'pow(-55 + number0, 10)': 253295162119140640,
        'pow(5 + number0, -2)': 0.04,
        'pow(-5 + number0, 0.5)': new Error('evaluate :: pow4'),
    }));

    describe('log()', factory({
        'log(1, number2)': 0,
        'log(-1, number2)': new Error('evaluate :: log3'),
        'log(1, -1)': new Error('optimize :: log4'),
        'log("a", number2)': new Error('evaluate :: fn2 :: log,1st,string'),
        'log(number1, number2)': 0,
        'log(string1, number2)': new Error('evaluate :: fn2 :: log,1st,string'),
        'log(array1, number2)': new Error('evaluate :: fn2 :: log,1st,array'),
        'log(object1, number2)': new Error('evaluate :: fn2 :: log,1st,object'),
        'log(null, number2)': null,
        'log(null1, number2)': null,
        'log(unknown, number2)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'log(1234.5678, number2)': 10.269790353251189,
        'log(1234.5, number2)': 10.269711121142782,
        'log(1234.3, number2)': 10.269477372755865,
        'log(1234.3, Infinity)': 0,
        'log(Infinity, number2)': Infinity,
        'log(1234.3, NaN)': NaN,
        'log(NaN, number2)': NaN,
        'log(1234.8, number2)': 10.270061672727763,
        'log(-1234.8, number2)': new Error('evaluate :: log3'),
        'log(-1234.3, number2)': new Error('evaluate :: log3'),
        'log(number2, 1)': new Error('evaluate :: log4'),
        'log(number2, "a")': new Error('evaluate :: fn2 :: log,2nd,string'),
        'log(number2, number1)': new Error('evaluate :: log4'),
        'log(number2, string1)': new Error('evaluate :: fn2 :: log,2nd,string'),
        'log(number2, array1)': new Error('evaluate :: fn2 :: log,2nd,array'),
        'log(number2, object1)': new Error('evaluate :: fn2 :: log,2nd,object'),
        'log(number2, null)': null,
        'log(number2, null1)': null,
        'log(number2, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'log(number2, 1234.5678)': 0.09737297117106408,
        'log(number2, 1234.5)': 0.09737372241574045,
        'log(number2, 1234.3)': 0.09737593878466719,
        'log(number2, 1234.8)': 0.09737039872462583,
        'log(number2, 4.5678)': 0.45630857195474545,
        'log(number2, 4)': 0.5,
        'log(number2, 4.3)': 0.4752091331660017,
        'log(number2, 4.8)': 0.44188457648815965,
        'log(number2, -1234.8)': new Error('evaluate :: log4'),
        'log(number2, -1234.3)': new Error('evaluate :: log4'),
        'log(number1 + 5, 0)': new Error('evaluate :: log4'),
        'log(0, 5 + number0)': new Error('evaluate :: log3'),
        'log(5 + number0, 2)': 2.321928094887362,
        'log(50 + number0, -2)': new Error('evaluate :: log4'),
        'log(55 + number0, -1)': new Error('evaluate :: log4'),
        'log(-55 + number0, 10)': new Error('evaluate :: log3'),
        'log(5 + number0, -2)': new Error('evaluate :: log4'),
        'log(-5 + number0, 0.5)': new Error('evaluate :: log3'),
        'log(100, 10)': 2,
        'log(16, 2)': 4,
    }));

    describe('toString()', factory({
        'toString(1)': '1',
        'toString(-0)': '0',
        'toString(number1)': '1',
        'toString(-number1)': '-1',
        'toString(null)': '',
        'toString(null1)': '',
        'toString([])': new Error('evaluate :: convert1 :: array,string'),
        'toString({})': new Error('evaluate :: convert1 :: object,string'),
        'toString(array1)': new Error('evaluate :: convert1 :: array,string'),
        'toString(object1)': new Error('evaluate :: convert1 :: object,string'),
        'toString(toDate("2009-12T12:34"))': '2009-12-01T12:34:00.000Z',
        'toString(toDate(953869437240000))': new Error('evaluate :: convert2 :: 32196'),
        'toString(toDate(9538694372000))': '2272-04-08T13:19:32.000Z',
        'toString(toDate(12000000000000000))': new Error('evaluate :: toDate1'),
        'toString(toDate(1200000000000000))': new Error('evaluate :: convert2 :: 39996'),
        'toString(toDate(-1100000000000000))': new Error('evaluate :: convert2 :: -32888'),
        'toString(toDate(-1078145897160000))': new Error('evaluate :: convert2 :: -32196'),
        'toString(toDate(-107814160000))': '1966-08-02T03:37:20.000Z',
        'toString(toDate(-62167227654000))': new Error('evaluate :: convert2 :: -1'),
        'toString(round(-0.5))': '0',
        'toString(6.02214e23)': '6.02214e+23',
        'toString(2147483647)': '2147483647',
        'toString(2147483648)': '2147483648',
        'toString(21474836487)': '21474836487',
        'toString(Infinity)': 'Infinity',
        'toString(-Infinity)': '-Infinity',
        'toString(NaN)': 'NaN',

        'toString(9007199254740980)': '9007199254740980',
        'toString(9007199254740981)': '9007199254740981',
        'toString(9007199254740982)': '9007199254740982',
        'toString(9007199254740983)': '9007199254740983',
        'toString(9007199254740984)': '9007199254740984',
        'toString(9007199254740985)': '9007199254740985',
        'toString(9007199254740986)': '9007199254740986',
        'toString(9007199254740987)': '9007199254740987',
        'toString(9007199254740988)': '9007199254740988',
        'toString(9007199254740989)': '9007199254740989',
        'toString(9007199254740990)': '9007199254740990',
        'toString(9007199254740991)': '9007199254740991',

        // Вот это максимальное число, которое не теряет в точности
        'toString(9007199254740992)': '9007199254740992',

        // А это максимальное, которое не преобразуется в экспонентную форму
        'locate(toString(9223372036854775295), "e")': -1,

        // Чрезвычайно большие числа преобраются в строки с экспонентой
        'locate(toString(922337203685477529500000000), "e") > -1': true,

        // Вот тут конвертирует с дикими потерями, но хотя бы без ошибки в монге, это и проверяем
        'toNumber(toString(9223372036854775295)) >= 9223370000000000000': true,
        'toNumber(toString(9223372036854775296)) >= 9223370000000000000': true,
        'toNumber(toString(-9223372036854776832)) <= -9223370000000000000': true,
        'toNumber(toString(-9223372036854776833)) <= -9223370000000000000': true,

        'toString(1233445.66)': '1233445.66',
        'toString(-1233445.66)': '-1233445.66',
        'toString(1233445.5678)': '1233445.5678',
        'toString(-1233445.5678)': '-1233445.5678',
        'toString(1233273445.5678)': '1233273445.5678',
        'toString(-1233273445.5678)': '-1233273445.5678',
    }));

    describe('toBoolean()', factory({
        'toBoolean(1)': true,
        'toBoolean(Infinity)': true,
        'toBoolean(NaN)': true,
        'toBoolean("")': false,
        'toBoolean("abc")': true,
        'toBoolean(number1)': true,
        'toBoolean(null)': false,
        'toBoolean(null1)': false,
        'toBoolean([])': true,
        'toBoolean({})': true,
        'toBoolean(array1)': true,
        'toBoolean(object1)': true,
        'toBoolean(now())': true,
    }));

    describe('toDate()', factory({
        // Числа
        'toDate(1000)': new Date('1970-01-01T00:00:01.000Z'),
        'toDate(1000.94)': new Date('1970-01-01T00:00:01.000Z'),
        'toDate(1259692440000)': new Date('2009-12-01T18:34:00.000Z'),
        'toDate(120000000000000)': new Date('5772-08-24T21:20:00.000Z'),
        'toDate(120000000005000)': new Date('5772-08-24T21:20:05.000Z'),
        'toDate(12000000000000000)': new Error('evaluate :: toDate1'),
        'toDate(Infinity)': new Error('evaluate :: toDate1'),
        'toDate(NaN)': new Error('evaluate :: convert7'),
        'toDate(-110000000000)': new Date('1966-07-07T20:26:40.000Z'),
        'toDate(-100000000)': new Date('1969-12-30T20:13:20.000Z'),
        'toDate(number1 * 1000)': new Date('1970-01-01T00:00:01.000Z'),
        'toDate(120000000000200)': new Date('5772-08-24T21:20:00.200Z'),
        'toDate(120000000000700)': new Date('5772-08-24T21:20:00.700Z'),
        'toDate(120000000000700.5)': new Date('5772-08-24T21:20:00.700Z'),
        'toDate(-100000200)': new Date('1969-12-30T20:13:19.800Z'),
        'toDate(-100000800)': new Date('1969-12-30T20:13:19.200Z'),

        // Строки
        'toDate("")': new Error('evaluate :: toDate1'),
        'toDate("1")': new Error('evaluate :: toDate1'),
        'toDate(",")': new Error('evaluate :: toDate1'),
        'toDate("abc")': new Error('evaluate :: toDate1'),
        'toDate("2000-01-01")': new Date('2000-01-01T00:00:00.000Z'),
        'toDate("2000-13-01")': new Error('evaluate :: toDate1'),
        'toDate("2000-01-45")': new Error('evaluate :: toDate1'),
        'toDate("2018-03-20 11:00:06 +0500")': new Date('2018-03-20T06:00:06.000Z'),
        'toDate("2018-03-20T11:00:06Z+0500")': new Error('evaluate :: toDate1'),
        'toDate("2018-03-20T11:00:06 +0500")': new Date('2018-03-20T06:00:06.000Z'),
        'toDate("2018-03-20X11:00:06 +0500")': new Error('evaluate :: toDate1'),
        'toDate("2018-03-20T11:00:06X+0500")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19T00:00:00.000Z")': new Date('2009-05-19T00:00:00.000Z'),
        'toDate("2009-05-19T00:00:00.000 Z")': new Error('evaluate :: toDate1'),
        'toDate("2009-12T12:34")': new Date('2009-12-01T12:34:00.000Z'),
        'toDate("2009-12T12:34Z")': new Date('2009-12-01T12:34:00.000Z'),
        'toDate("2109-12T12:34Z")': new Date('2109-12-01T12:34:00.000Z'),
        'toDate("2009")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19")': new Date('2009-05-19T00:00:00.000Z'),
        'toDate("20090519")': new Error('evaluate :: toDate1'),
        'toDate("2009123")': new Error('evaluate :: toDate1'),
        'toDate("2009-05")': new Date('2009-05-01T00:00:00.000Z'),
        'toDate("2009-05+02")': new Date('2009-04-30T22:00:00.000Z'),
        'toDate("2009-05 +02")': new Date('2009-04-30T22:00:00.000Z'),
        'toDate("2009-123")': new Error('evaluate :: toDate1'),
        'toDate("2009-222")': new Error('evaluate :: toDate1'),
        'toDate("2009-001")': new Error('evaluate :: toDate1'),
        'toDate("2009-W01-1")': new Error('evaluate :: toDate1'),
        'toDate("2009-W51-1")': new Error('evaluate :: toDate1'),
        'toDate("2009-W511")': new Error('evaluate :: toDate1'),
        'toDate("2009-W33")': new Error('evaluate :: toDate1'),
        'toDate("2009W511")': new Error('evaluate :: toDate1'),
        'toDate("2009w33")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 00:00")': new Date('2009-05-19T00:00:00.000Z'),
        'toDate("2009-05-19 14")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 14:31")': new Date('2009-05-19T14:31:00.000Z'),
        'toDate("2009-05-19 14:39:22")': new Date('2009-05-19T14:39:22.000Z'),
        'toDate("2009-05-19T14:39Z")': new Date('2009-05-19T14:39:00.000Z'),
        'toDate("2009-W21-2")': new Error('evaluate :: toDate1'),
        'toDate("2009-W21-2T01:22")': new Error('evaluate :: toDate1'),
        'toDate("2009-139")': new Error('evaluate :: toDate1'),
        'toDate("2009-02-30")': new Error('evaluate :: toDate1'),
        'toDate("2009-02-31")': new Error('evaluate :: toDate1'),
        'toDate("2007-02-28T21:00:00.000-1500")': new Date('2007-03-01T12:00:00.000Z'),
        'toDate("2009-05-19 14:39:22-06:00")': new Date('2009-05-19T20:39:22.000Z'),
        'toDate("2009-05-19 14:39:22+0600")': new Date('2009-05-19T08:39:22.000Z'),
        'toDate("2009-05-19T14:39:22 +0600")': new Date('2009-05-19T08:39:22.000Z'),
        'toDate("2019-03-26T14:00+23:59")': new Date('2019-03-25T14:01:00.000Z'),
        'toDate("2019-03-26T14:00+24:00")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26T14:00+24:01")': new Error('evaluate :: toDate1'),
        'toDate("2019-03 -26T14:00+24:01")': new Error('evaluate :: toDate1'),
        'toDate("2019-03 -26T14:00+24: 01")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26T14: 00+24:01")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 14:39:22+06")': new Date('2009-05-19T08:39:22.000Z'),
        'toDate("2009-05-19 14:39:22-01")': new Date('2009-05-19T15:39:22.000Z'),
        'toDate("2009-05-19 14:39:22 -01")': new Date('2009-05-19T15:39:22.000Z'),
        'toDate("2009-05-19t14:39:22 -01")': new Date('2009-05-19T15:39:22.000Z'),
        'toDate("20090621T0545Z")': new Error('evaluate :: toDate1'),
        'toDate("2007-04-06T00:00")': new Date('2007-04-06T00:00:00.000Z'),
        'toDate("2007-04-06t00:00")': new Date('2007-04-06T00:00:00.000Z'),
        'toDate("2007-04-05T24:00")': new Error('evaluate :: toDate1'),
        'toDate("2007-04-05T23:60")': new Error('evaluate :: toDate1'),
        'toDate("2007-04-05T56:12")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16:23:48.5")': new Date('2010-02-18T16:23:48.500Z'),
        'toDate("2010-02-18T16:23:48.1")': new Date('2010-02-18T16:23:48.100Z'),
        'toDate("2010-02-18T16:23:48.8")': new Date('2010-02-18T16:23:48.800Z'),
        'toDate("2010-02-18T16:23:48,444")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16:23:48,3-06:00")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16:23.4")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16:23,25")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16:23.33+0600")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16.23334444")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16,2283")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 143922.500")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 1439,55")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-1914:39")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19r14:39")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19o14:39")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19w14:39")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19z14:39")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 14.5.44")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16:23.33.600")': new Error('evaluate :: toDate1'),
        'toDate("200905")': new Error('evaluate :: toDate1'),
        'toDate("2009367")': new Error('evaluate :: toDate1'),
        'toDate("2009-")': new Error('evaluate :: toDate1'),
        'toDate("2007-04-05T24:50")': new Error('evaluate :: toDate1'),
        'toDate("2009-000")': new Error('evaluate :: toDate1'),
        'toDate("2009-M511")': new Error('evaluate :: toDate1'),
        'toDate("2009M511")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19T14a39r")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19T14:3924")': new Error('evaluate :: toDate1'),
        'toDate("2009-0519")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 14:")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 14a39a22")': new Error('evaluate :: toDate1'),
        'toDate("200912-01")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 14:39:22+06a00")': new Error('evaluate :: toDate1'),
        'toDate("2009-05-19 146922.500")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16.5:23.35:48")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16:23.35:48")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16:23.35:48.45")': new Error('evaluate :: toDate1'),
        'toDate("2010-02-18T16,25:23:48,444")': new Error('evaluate :: toDate1'),
        'toDate("1972-06-30T23:59:60Z")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26T14:00:00.9Z")': new Date('2019-03-26T14:00:00.900Z'),
        'toDate("2019-03-26T14:00:00.4999Z")': new Date('2019-03-26T14:00:00.499Z'),
        'toDate("2019-03-26t14:00Z")': new Date('2019-03-26T14:00:00.000Z'),
        'toDate("2019-03-26T14:00z")': new Date('2019-03-26T14:00:00.000Z'),
        'toDate("2019-03-26T14:00:00,999Z")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26T10:00-04")': new Date('2019-03-26T14:00:00.000Z'),
        'toDate("2019-03-26T14:00.9Z")': new Error('evaluate :: toDate1'),
        'toDate("20190326T1400Z")': new Error('evaluate :: toDate1'),
        'toDate("2019-02-30")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-25T24:01Z")': new Error('evaluate :: toDate1'),
        'toDate("2018-06-30T23:59:60Z")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26T23:59:60Z")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26T13:59:60Z")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26Z")': new Date('2019-03-26T00:00:00.000Z'),
        'toDate("2019-03-26+01:00")': new Date('2019-03-25T23:00:00.000Z'),
        'toDate("2019-03-26-04:00")': new Date('2019-03-26T04:00:00.000Z'),
        'toDate("2019-03-26+0100")': new Date('2019-03-25T23:00:00.000Z'),
        'toDate("2019-03-26-0400")': new Date('2019-03-26T04:00:00.000Z'),
        'toDate("2019-03-26 +01:00")': new Date('2019-03-25T23:00:00.000Z'),
        'toDate("2019-03-26 -04:00")': new Date('2019-03-26T04:00:00.000Z'),
        'toDate("2019-03-26 +0100")': new Date('2019-03-25T23:00:00.000Z'),
        'toDate("2019-03-26 -0400")': new Date('2019-03-26T04:00:00.000Z'),
        'toDate("2019-03-26 +01")': new Date('2019-03-25T23:00:00.000Z'),
        'toDate("2019-03-26 -04")': new Date('2019-03-26T04:00:00.000Z'),
        'toDate("2019-03-26+01")': new Date('2019-03-25T23:00:00.000Z'),
        'toDate("2019-03-26-04")': new Date('2019-03-26T04:00:00.000Z'),
        'toDate("2019-03-26T10:00-0400")': new Date('2019-03-26T14:00:00.000Z'),
        'toDate("+0002019-03-26T14:00Z")': new Error('evaluate :: toDate1'),
        'toDate("+2019-03-26T14:00Z")': new Error('evaluate :: toDate1'),
        'toDate("002019-03-26T14:00Z")': new Error('evaluate :: toDate1'),
        'toDate("019-03-26T14:00Z")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26T10:00Q")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26T10:00T")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26Q")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26T")': new Error('evaluate :: toDate1'),
        'toDate("2019-03-26 14:00Z")': new Date('2019-03-26T14:00:00.000Z'),
        'toDate("2019-03-26T14:00:00.")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 GMT")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 GMT+00")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 GMT+00:00")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 GMT+02")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 GMT+02:00")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 UTC")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 CEST")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 EST")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 PDT")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 A")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 L")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 P")': new Error('evaluate :: toDate1'),
        'toDate("2017-07-14T12:02:44.771 Z")': new Error('evaluate :: toDate1'),
        'toDate("2009-12-01T12:34:00.50Z")': new Date('2009-12-01T12:34:00.500Z'),

        // Другие типы
        'toDate(null)': null,
        'toDate(null1)': null,
        'toDate([])': new Error('evaluate :: convert1 :: array,date'),
        'toDate({})': new Error('evaluate :: convert1 :: object,date'),
        'toDate(true)': new Error('evaluate :: convert1 :: boolean,date'),
        'toDate(false1)': new Error('evaluate :: convert1 :: boolean,date'),
        'toDate(array1)': new Error('evaluate :: convert1 :: array,date'),
        'toDate(object1)': new Error('evaluate :: convert1 :: object,date'),
    }));

    describe('toNumber()', factory({
        'toNumber(1)': 1,
        'toNumber(Infinity)': Infinity,
        'toNumber(NaN)': NaN,
        'toNumber("")': new Error('evaluate :: convert4'),
        'toNumber("abc")': new Error('evaluate :: convert5'),
        'toNumber("2abc")': new Error('evaluate :: convert5'),
        'toNumber("abc3")': new Error('evaluate :: convert5'),
        'toNumber("0abc")': new Error('evaluate :: convert5'),
        'toNumber(" abc")': new Error('evaluate :: convert5'),
        'toNumber(" 0abc")': new Error('evaluate :: convert5'),
        'toNumber("\u{2005}0abc")': new Error('evaluate :: convert5'),
        'toNumber("\n0abc")': new Error('evaluate :: convert5'),
        'toNumber("\t0abc")': new Error('evaluate :: convert5'),
        'toNumber("\r0abc")': new Error('evaluate :: convert5'),
        'toNumber("0abc ")': new Error('evaluate :: convert5'),
        'toNumber("-0abc")': new Error('evaluate :: convert5'),
        'toNumber("-abc")': new Error('evaluate :: convert5'),
        'toNumber("+abc")': new Error('evaluate :: convert5'),
        'toNumber("+-0abc")': new Error('evaluate :: convert5'),
        'toNumber("34e")': new Error('evaluate :: convert5'),
        'toNumber("34e3")': 34000,
        'toNumber("34e+3")': 34000,
        'toNumber("34e-3")': 0.034,
        'toNumber("34e3333333333")': new Error('evaluate :: convert6'),
        'toNumber("9223372036854775295")': 9223372036854775000,
        'toNumber("9223372036854775296")': 9223372036854776000,
        'toNumber("1.7976931348623157e+308")': 1.7976931348623157e+308,
        'toNumber("-1.7976931348623157e+308")': -1.7976931348623157e+308,
        'toNumber("1.7976931348627157e+308")': new Error('evaluate :: convert6'),
        'toNumber("-1.7976931348627157e+308")': new Error('evaluate :: convert6'),
        'toNumber(number1)': 1,
        'toNumber(null)': 0,
        'toNumber(null1)': 0,
        'toNumber(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'toNumber([])': new Error('evaluate :: convert1 :: array,number'),
        'toNumber({})': new Error('evaluate :: convert1 :: object,number'),
        'toNumber(array0)': new Error('evaluate :: convert1 :: array,number'),
        'toNumber(array1)': new Error('evaluate :: convert1 :: array,number'),
        'toNumber(object1)': new Error('evaluate :: convert1 :: object,number'),
        'toNumber("1")': 1,
        'toNumber("23")': 23,
        'toNumber("+23")': 23,
        'toNumber("+ 23")': new Error('evaluate :: convert5'),
        'toNumber("1.1")': 1.1,
        'toNumber("0.1")': 0.1,
        'toNumber("0.10")': 0.1,
        'toNumber("0.100")': 0.1,
        'toNumber("1.2.3")': new Error('evaluate :: convert5'),
        'toNumber("0.1 ")': new Error('evaluate :: convert5'),
        'toNumber(" 0.1 ")': new Error('evaluate :: convert5'),
        'toNumber("0.1 abc")': new Error('evaluate :: convert5'),
        'toNumber("abc0.1")': new Error('evaluate :: convert5'),
        'toNumber("abc 0.1")': new Error('evaluate :: convert5'),
        'toNumber("0x10")': new Error('evaluate :: convert5'),
        'toNumber("010")': 10,
        'toNumber("0010")': 10,
        'toNumber("00010")': 10,
        'toNumber("12345678912345678912345678912123456789")': 12345678912345678912345678912123456789,
        'toNumber("1e40")': 1e40,
        'toNumber("1E40")': 1e40,
        'toNumber("1e")': new Error('evaluate :: convert5'),
        'toNumber(toDate(1000))': 1000,
        'toNumber(toDate(120000000000000))': 120000000000000,
        'toNumber(toDate(12000000000000000))': new Error('evaluate :: toDate1'),
        'toNumber(toDate(1200000000000000))': 1200000000000000,
        'toNumber(toDate(1200000000005000))': 1200000000005000,
        'toNumber(toDate(-1100000000000000))': -1100000000000000,
        'toNumber(toDate(-62167227654000))': -62167227654000,
        'toNumber(toDate("2009-12-01T12:34:00.00Z"))': 1259670840000,
        'toNumber(toDate("2009-12-01T12:34:00.50Z"))': 1259670840500,
        'toNumber(toDate("2009-12-01T12:34:00.000Z"))': 1259670840000,
        'toNumber(toDate("2009-12-01t12:34:00.000z"))': 1259670840000,
        'toNumber(toDate("2009-12-01T12:34:00.1234Z"))': 1259670840123,
        'toNumber(toDate("2009-12-01T12:34:00.5678Z"))': 1259670840567,
        'toNumber(toDate("2009-12-01T12:34:00.0000Z"))': 1259670840000,
        'toNumber(toDate("2009-12-01T12:34:00.000-06:00"))': 1259692440000,
        'toNumber(toDate("2009-12-01"))': 1259625600000,
        'toNumber(toDate("2009-12T12:34"))': 1259670840000,
        'toNumber(toDate(120000000000200))': 120000000000200,
        'toNumber(toDate(120000000000700))': 120000000000700,
        'toNumber(toDate(120000000123))': 120000000123,
        'toNumber(toDate(120000000456))': 120000000456,
        'toNumber(toDate(120000000000123))': 120000000000123,
        'toNumber(toDate(120000000000456))': 120000000000456,
        'toNumber(toDate(-1100000000123))': -1100000000123,
        'toNumber(toDate(-1100000000456))': -1100000000456,
        'toNumber(toDate(-1100000000000123))': -1100000000000123,
        'toNumber(toDate(-1100000000000456))': -1100000000000456,
        'toNumber("Infinity")': Infinity,
        'toNumber("NaN")': NaN,
        'toNumber("nan")': NaN,
        'toNumber("+Infinity")': Infinity,
        'toNumber("-Infinity")': -Infinity,
        'toNumber("infinity")': Infinity,
        'toNumber("+infinity")': Infinity,
        'toNumber("-infinity")': -Infinity,
        'toNumber("INF")': Infinity,
        'toNumber("+INF")': Infinity,
        'toNumber("-INF")': -Infinity,
        'toNumber("InF")': Infinity,
        'toNumber("+InF")': Infinity,
        'toNumber("-InF")': -Infinity,
    }));

    describe('not()', factory({
        'not(1)': false,
        'not(Infinity)': false,
        'not(NaN)': false,
        'not("")': true,
        'not("abc")': false,
        'not(number1)': false,
        'not(null)': true,
        'not(null1)': true,
        'not([])': false,
        'not({})': false,
        'not(array1)': false,
        'not(object1)': false,
        'not(now())': false,
    }));

    describe('join()', factory({
        'join(1)': new Error('evaluate :: fn6 :: join,number'),
        'join(Infinity)': new Error('evaluate :: fn6 :: join,number'),
        'join(NaN)': new Error('evaluate :: fn6 :: join,number'),
        'join("a")': 'a',
        'join(number1)': new Error('evaluate :: fn6 :: join,number'),
        'join(string1)': 'abc',
        'join(array1)': '123',
        'join(object1)': new Error('evaluate :: fn6 :: join,object'),
        'join(null)': '',
        'join(null1)': '',
        'join(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'join(["a"])': 'a',
        'join(["a", "b"])': 'ab',
        'join([string1, string2])': 'abcdef',
        'join(["a-", string1, "-b"])': 'a-abc-b',
        'join([2, 2])': '22',
        'join(if(number1, [1, 2], [3, 4]))': '12',
        'join([number1, number2])': '12',
        'join([string1, number1])': 'abc1',
        'join([string1, true])': 'abctrue',
        'join([string1, null])': 'abc',
        'join([string1, Infinity])': 'abcInfinity',
        'join([string1, NaN])': 'abcNaN',
        'join([null, string1])': 'abc',
        'join([string1, null1])': 'abc',
        'join([null1, string1])': 'abc',
        'join([string1, {}])': new Error('optimize :: convert1 :: object,string'),
        'join([string1, []])': new Error('optimize :: convert1 :: array,string'),
        'join([string1, object1])': new Error('evaluate :: convert1 :: object,string'),
        'join([string1, array1])': new Error('evaluate :: convert1 :: array,string'),
        'join([string1, join([string2, []])])': new Error('optimize :: convert1 :: array,string'),
        'join(1, ", ")': new Error('evaluate :: fn6 :: join,number'),
        'join(["1"], null)': new Error('evaluate :: fn5 :: join,2nd,null'),
        'join(["1"], 123)': new Error('evaluate :: fn5 :: join,2nd,number'),
        'join("a", ", ")': 'a',
        'join([null, "a"], ", ")': ', a',
        'join(["a", null], ", ")': 'a, ',
        'join([null], ", ")': '',
        'join([null1, "a"], ", ")': ', a',
        'join(["a", null1], ", ")': 'a, ',
        'join([null1], ", ")': '',
        'join("a", 123)': 'a',
        'join(number1, ", ")': new Error('evaluate :: fn6 :: join,number'),
        'join(string1, ", ")': 'abc',
        'join(array1, ", ")': '1, 2, 3',
        'join(object1, ", ")': new Error('evaluate :: fn6 :: join,object'),
        'join(null, ", ")': '',
        'join(null, 123)': '',
        'join(null1, ", ")': '',
        'join(unknown, ", ")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'join(["a"], ", ")': 'a',
        'join(["a", "b"], ", ")': 'a, b',
        'join([string1, string2], ", ")': 'abc, def',
        'join(["a-", string1, "-b"], ", ")': 'a-, abc, -b',
        'join([2, 2], ", ")': '2, 2',
        'join(if(number1, [1, 2], [3, 4]), ", ")': '1, 2',
        'join([number1, number2], ", ")': '1, 2',
        'join([string1, number1], ", ")': 'abc, 1',
        'join([string1, true], ", ")': 'abc, true',
        'join([string1, null], ", ")': 'abc, ',
        'join([null, string1], ", ")': ', abc',
        'join([string1, null1], ", ")': 'abc, ',
        'join([null1, string1], ", ")': ', abc',
        'join([string1, {}], ", ")': new Error('evaluate :: convert1 :: object,string'),
        'join([string1, []], ", ")': new Error('evaluate :: convert1 :: array,string'),
        'join([string1, object1], ", ")': new Error('evaluate :: convert1 :: object,string'),
        'join([string1, array1], ", ")': new Error('evaluate :: convert1 :: array,string'),
        'join([string1, join([string2, []])], ", ")': new Error('optimize :: convert1 :: array,string'),
        'join([string1, "a"], join([string2, []]))': new Error('optimize :: convert1 :: array,string'),
        'join(["", ""], ", ")': ', ',
        'join(["", string0], ", ")': ', ',
        'join(["", string0, ""], ", ")': ', , ',
        'join(["", string0, " "], ", ")': ', ,  ',
        'join(map(["a"], item)) & "b"': "ab",
    }));

    describe('map()', factory({
        'map(1, true)': new Error('evaluate :: fn1 :: map,number'),
        'map("a", true)': new Error('evaluate :: fn1 :: map,string'),
        'map(number1, true)': new Error('evaluate :: fn1 :: map,number'),
        'map(string1, true)': new Error('evaluate :: fn1 :: map,string'),
        'map(array1, true)': [true, true, true],
        'map(array1, item)': [1, 2, 3],
        'map(array1, Infinity)': [Infinity, Infinity, Infinity],
        'map(array1, NaN)': [NaN, NaN, NaN],
        'map(object1, true)': new Error('evaluate :: fn1 :: map,object'),
        'map(null, true)': null,
        'map(null1, true)': null,
        'map(unknown, true)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'map(["a"], true)': [true],
        'map(["a", "b"], item & "+")': ['a+', 'b+'],
        'map([1, 2, 3], item * 2)': [2, 4, 6],
        'map([[1, 2], [3, 4]], map(item, item * 2))': [[2, 4], [6, 8]],
        'map([1, 2, 3], range(1, "a"))': new Error('optimize :: fn2 :: range,2nd,string'),
    }));

    describe('slice()', factory({
        'slice(1, true)': new Error('optimize :: fn1 :: slice,number'),
        'slice(Infinity, true)': new Error('optimize :: fn1 :: slice,number'),
        'slice(NaN, true)': new Error('optimize :: fn1 :: slice,number'),
        'slice("a", true)': new Error('optimize :: fn1 :: slice,string'),
        'slice(number1, true)': new Error('evaluate :: fn1 :: slice,number'),
        'slice(string1, true)': new Error('evaluate :: fn1 :: slice,string'),
        'slice(object1, true)': new Error('evaluate :: fn1 :: slice,object'),
        'slice(null, true)': null,
        'slice(null1, true)': null,
        'slice(unknown, true)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'slice([1, 2, 3], 1)': [2, 3],
        'slice([1, 2, 3], Infinity)': new Error('optimize :: fn3 :: slice,2nd'),
        'slice([1, 2, 3], NaN)': new Error('optimize :: fn3 :: slice,2nd'),
        'slice([1, 2, 3], -Infinity)': new Error('optimize :: fn3 :: slice,2nd'),
        'slice([1, 2, 3], 1, null)': null,
        'slice([1, 2, 3], 1, 0)': new Error('optimize :: slice2 :: 0'),
        'slice([1, 2, 3], null, 1)': null,
        'slice([1, 2, 3], null, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: null,
            node: null,
        }),
        'slice([1, 2, 3], unknown, null)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'slice(array1, 1)': [2, 3],
        'slice(array1, 1.1 - 0.1)': [2, 3],
        'slice(array1, "a")': new Error('evaluate :: slice3 :: string'),
        'slice(array1, true)': new Error('evaluate :: slice3 :: boolean'),
        'slice(array1, [0])': new Error('evaluate :: slice3 :: array'),
        'slice(array1, [0], "a")': new Error('evaluate :: slice3 :: array'),
        'slice(array1, 1, null)': null,
        'slice(array1, 1, 0)': new Error('evaluate :: slice2 :: 0'),
        'slice(array1, null, 1)': null,
        'slice(array1, null, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: null,
            node: null,
        }),
        'slice(array1, unknown, null)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'slice(null, unknown, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'slice(null1, unknown, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'slice([1, 2, 3], 1, 1)': [2],
        'slice([1, 2, 3], 1, -1)': new Error('optimize :: slice2 :: -1'),
        'slice([1, 2, 3], 0, -1)': new Error('optimize :: slice2 :: -1'),
        'slice([1, 2, 3], -1, -1)': new Error('optimize :: slice2 :: -1'),
        'slice([1, 2, 3], 0)': [1, 2, 3],
        'slice([1, 2, 3], -2)': [2, 3],
        'slice([1, 2, 3], -2, 1)': [2],
        'slice([1, 2, 3], 15, 2)': [],
        'slice([1, 2, 3], -15, 2)': [1, 2],
        'slice(array1, 1, 1)': [2],
        'slice(array1, 1, -1)': new Error('evaluate :: slice2 :: -1'),
        'slice(array1, 0, -1)': new Error('evaluate :: slice2 :: -1'),
        'slice(array1, -1, -1)': new Error('evaluate :: slice2 :: -1'),
        'slice(array1, 0)': [1, 2, 3],
        'slice(array1, -2)': [2, 3],
        'slice(array1, -2.5)': new Error('evaluate :: fn3 :: slice,2nd'),
        'slice(array1, 15, 2)': [],
        'slice(array1, 15, -Infinity)': new Error('evaluate :: fn3 :: slice,3rd'),
        'slice(array1, 15, 2.5)': new Error('evaluate :: fn3 :: slice,3rd'),
        'slice(array1, -15, 2)': [1, 2],
        'slice([1, 2, 3, 4, 5, 6], 3)': [4, 5, 6],
        'slice([1, 2, 3, 4, 5, 6], 3, 1)': [4],
        'slice([1, 2, 3, 4, 5, 6], 3, Infinity)': new Error('optimize :: fn3 :: slice,3rd'),
        'slice([1, 2, 3, 4, 5, 6], 3, NaN)': new Error('optimize :: fn3 :: slice,3rd'),
        'slice([1, 2, 3, 4, 5, 6], 3, -Infinity)': new Error('optimize :: fn3 :: slice,3rd'),
        'slice([1, 2, 3, 4, 5, 6], 3, 2)': [4, 5],
        'slice([1, 2, 3, 4, 5, 6], -3)': [4, 5, 6],
        'slice([1, 2, 3, 4, 5, 6], -3, 1)': [4],
        'slice([1, 2, 3, 4, 5, 6], -3, 2)': [4, 5],
        'slice(array1, number1 * -2, number1)': [2],
    }));

    // Требует MongoDB 5.2
    describe('sort()', factory({
        'sort(1, true)': new Error('evaluate :: fn1 :: sort,number'),
        'sort("a", true)': new Error('evaluate :: fn1 :: sort,string'),
        'sort(number1, true)': new Error('evaluate :: fn1 :: sort,number'),
        'sort(Infinity, true)': new Error('evaluate :: fn1 :: sort,number'),
        'sort(NaN, true)': new Error('evaluate :: fn1 :: sort,number'),
        'sort(string1, true)': new Error('evaluate :: fn1 :: sort,string'),
        'sort(array1, true)': [1, 2, 3],
        'sort([3, 2, 1], true)': [3, 2, 1],
        'sort([3, 2, 1])': [1, 2, 3],
        'sort(array1)': [1, 2, 3],
        'sort([3, 2, 1], item)': [1, 2, 3],
        'sort(array1, item)': [1, 2, 3],
        'sort(object1, true)': new Error('evaluate :: fn1 :: sort,object'),
        'sort(null, true)': null,
        'sort(null1, true)': null,
        'sort(unknown, true)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'sort(["a"], true)': ["a"],
        'sort(["a", "b"], item & "+")': ['a', 'b'],
        'sort([1, 2, 3], item * 2)': [1, 2, 3],
        'sort([[3, 4], [1, 2]], sort(item, item * 2))': [[1, 2], [3, 4]],
        'sort(["f", "a", "z"])': ["a", "f", "z"],
        'sort(["f", "a", "z"], item)': ["a", "f", "z"],
        'sort([true, {}, 34, "34", null, [], #2022-12-02#])': [null, 34, "34", {}, [], true, new Date('2022-12-02')],
        'sort([true, {}, 34, "34", null, [], #2022-12-02#], item)': [null, 34, "34", {}, [], true, new Date('2022-12-02')],
        'sort([{x: 12}, {x: 44}, {x: 2}, {x: 14}], item.x)': [{x: 2}, {x: 12}, {x: 14}, {x: 44}],
        'sort([{x: 12}, {x: 44}, {x: 2}, {x: 14}])': [{x: 2}, {x: 12}, {x: 14}, {x: 44}],
        'sort([{x: 44, y: 24}, {x: 12, y: 33}])': [{x: 12, y: 33}, {x: 44, y: 24}],
        'sort([{x: "a", y: 24}, {x: "0", y: 24}])': [{x: "0", y: 24}, {x: "a", y: 24}],
        'sort([{x: 12}, {x: 44}, {x: 2}, {x: 14}], item)': [{x: 2}, {x: 12}, {x: 14}, {x: 44}],
        'sort([{x: 44, y: 24}, {x: 12, y: 33}], item)': [{x: 12, y: 33}, {x: 44, y: 24}],
        'sort([{x: "a", y: 24}, {x: "0", y: 24}], item)': [{x: "0", y: 24}, {x: "a", y: 24}],
        'sort([{x: "a", y: 24}, {x: "0", y: 24}], item.y)': [{x: "a", y: 24}, {x: "0", y: 24}],
        '[sort([3, 2, 1], item), item]': new DifferentResults({
            mongo: new Error('convert :: var1 :: item'),
            php: new Error('evaluate :: var1 :: item'),
            node: new Error('evaluate :: var1 :: item'),
        }),
    }));

    describe('filter()', factory({
        'filter(1, true)': new Error('evaluate :: fn1 :: filter,number'),
        'filter(Infinity, true)': new Error('evaluate :: fn1 :: filter,number'),
        'filter(NaN, true)': new Error('evaluate :: fn1 :: filter,number'),
        'filter("a", true)': new Error('evaluate :: fn1 :: filter,string'),
        'filter(number1, true)': new Error('evaluate :: fn1 :: filter,number'),
        'filter(string1, true)': new Error('evaluate :: fn1 :: filter,string'),
        'filter(array1, true)': [1, 2, 3],
        'filter(array1, item)': [1, 2, 3],
        'filter(array1, item > 2)': [3],
        'filter(object1, true)': new Error('evaluate :: fn1 :: filter,object'),
        'filter(null, true)': null,
        'filter(null1, true)': null,
        'filter(unknown, true)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'filter(["a"], true)': ['a'],
        'filter([1, 2, 3, false, 4, 0, 5], item)': [1, 2, 3, 4, 5],
        'filter([1, 2, 3, false, 4, 0, 5], true)': [1, 2, 3, false, 4, 0, 5],
        'filter([1, 2, 3], range(1, "a"))': new Error('optimize :: fn2 :: range,2nd,string'),
        '[filter(array1, item), item]': new DifferentResults({
            mongo: new Error('convert :: var1 :: item'),
            php: new Error('evaluate :: var1 :: item'),
            node: new Error('evaluate :: var1 :: item'),
        }),
    }));

    describe('reduce()', factory({
        'reduce(1, true, 0)': new Error('evaluate :: fn1 :: reduce,number'),
        'reduce("a", true, 0)': new Error('evaluate :: fn1 :: reduce,string'),
        'reduce(number1, true, 0)': new Error('evaluate :: fn1 :: reduce,number'),
        'reduce(string1, true, 0)': new Error('evaluate :: fn1 :: reduce,string'),
        'reduce(array1, true, 0)': true,
        'reduce(array1, item, 0)': 3,
        'reduce(array1, item > 2, 0)': true,
        'reduce(array1, item > 2, Infinity)': true,
        'reduce(array1, item > 2, NaN)': true,
        'reduce(object1, true, 0)': new Error('evaluate :: fn1 :: reduce,object'),
        'reduce(false, true, 0)': new Error('evaluate :: fn1 :: reduce,boolean'),
        'reduce(null, true, 0)': null,
        'reduce(null1, true, 0)': null,
        'reduce(unknown, true, 0)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'reduce(["a"], item, 0)': 'a',
        'reduce(["a", "b"], item, 0)': 'b',
        'reduce(["a", "b", "c"], value & item, "")': 'abc',
        'reduce(["a", "b", "c"], value & item, "-")': '-abc',
        'reduce([1, 2, 3, 4, 5], value and item, true)': true,
        'reduce([1, 2, 3, false, 4, 0, 5], value and item, true)': false,
        'reduce([], value and item, true)': true,
        'reduce([1, 2, 3], range(1, "a"), true)': new Error('optimize :: fn2 :: range,2nd,string'),
        '[reduce(array1, item, 0), item]': new DifferentResults({
            mongo: new Error('convert :: var1 :: item'),
            php: new Error('evaluate :: var1 :: item'),
            node: new Error('evaluate :: var1 :: item'),
        }),
    }));

    describe('range()', factory({
        'range(1, "a")': new Error('optimize :: fn2 :: range,2nd,string'),
        'range(1, number1)': [],
        'range(1, string1)': new Error('evaluate :: fn2 :: range,2nd,string'),
        'range(1, array1)': new Error('evaluate :: fn2 :: range,2nd,array'),
        'range(1, object1)': new Error('evaluate :: fn2 :: range,2nd,object'),
        'range(1, null)': new Error('optimize :: fn2 :: range,2nd,null'),
        'range(1, null1)': new Error('evaluate :: fn2 :: range,2nd,null'),
        'range(1, unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'range("a", 1)': new Error('optimize :: fn2 :: range,1st,string'),
        'range(number1, 1)': [],
        'range(string1, 1)': new Error('evaluate :: fn2 :: range,1st,string'),
        'range(array1, 1)': new Error('evaluate :: fn2 :: range,1st,array'),
        'range(object1, 1)': new Error('evaluate :: fn2 :: range,1st,object'),
        'range(null, 1)': new Error('optimize :: fn2 :: range,1st,null'),
        'range(null1, 1)': new Error('evaluate :: fn2 :: range,1st,null'),
        'range(unknown, 1)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'range(1, [4])': new Error('optimize :: fn2 :: range,2nd,array'),
        'range(1, "2")': new Error('optimize :: fn2 :: range,2nd,string'),
        'range(1, 2)': [1],
        'range(1234.5678, 1)': new Error('optimize :: fn3 :: range,1st'),
        'range(1, 2.5)': new Error('optimize :: fn3 :: range,2nd'),
        'range(1, -1)': [],
        'range(1, -5)': [],
        'range(-3, 0)': [-3, -2, -1],
        'range(1, 4, 0)': new Error('optimize :: range7'),
        'range(1, 4, 2)': [1, 3],
        'range(1, 4, 3)': [1],
        'range(Infinity, 4, 3)': new Error('optimize :: fn3 :: range,1st'),
        'range(1, Infinity, 3)': new Error('optimize :: fn3 :: range,2nd'),
        'range(1, 4, Infinity)': new Error('optimize :: fn3 :: range,3rd'),
        'range(NaN, 4, 3)': new Error('optimize :: fn3 :: range,1st'),
        'range(1, NaN, 3)': new Error('optimize :: fn3 :: range,2nd'),
        'range(1, 4, NaN)': new Error('optimize :: fn3 :: range,3rd'),
        'range(-Infinity, 4, 3)': new Error('optimize :: fn3 :: range,1st'),
        'range(1, -Infinity, 3)': new Error('optimize :: fn3 :: range,2nd'),
        'range(1, 4, -Infinity)': new Error('optimize :: fn3 :: range,3rd'),
        'range(1, 4, "3")': new Error('optimize :: fn2 :: range,3rd,string'),
        'range(1, 4, string1)': new Error('evaluate :: fn2 :: range,3rd,string'),
        'range(1, 4, 4)': [1],
        'range(1, 4, 0.5)': new Error('optimize :: fn3 :: range,3rd'),
        'range(1, -1, -1)': [1, 0],
        'range(1, -5, -1)': [1, 0, -1, -2, -3, -4],
        'range(-3, 0, -1)': [],
        'range(0, 10, 2)': [0, 2, 4, 6, 8],
        'range(10, 0, -2)': [10, 8, 6, 4, 2],
        'range(0, 10, -2)': [],
        'range(0, 5)': [0, 1, 2, 3, 4],
        'range(0, 20, 5)': [0, 5, 10, 15],
        'range(0, -4, -1)': [0, -1, -2, -3],
        'range(1, 11)': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
        'range(0, 30, 5)': [0, 5, 10, 15, 20, 25],
        'range(0, -10, -1)': [0, -1, -2, -3, -4, -5, -6, -7, -8, -9],
        'range(2147483645, 2147483647)': [2147483645, 2147483646],
        'range(2147483647, 2147483648)': new Error('optimize :: fn3 :: range,2nd'),
        'range(2147483647 + number1, 2147483648)': new Error('evaluate :: fn3 :: range,1st'),
    }));

    describe('count()', factory({
        'count(1)': new Error('optimize :: fn1 :: count,number'),
        'count(Infinity)': new Error('optimize :: fn1 :: count,number'),
        'count(NaN)': new Error('optimize :: fn1 :: count,number'),
        'count("a")': new Error('optimize :: fn1 :: count,string'),
        'count(number1)': new Error('evaluate :: fn1 :: count,number'),
        'count(string1)': new Error('evaluate :: fn1 :: count,string'),
        'count(array1)': 3,
        'count(object1)': new Error('evaluate :: fn1 :: count,object'),
        'count(false)': new Error('optimize :: fn1 :: count,boolean'),
        'count(null)': new Error('optimize :: fn1 :: count,null'),
        'count(null1)': new Error('evaluate :: fn1 :: count,null'),
        'count(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'count(["a"])': 1,
        'count(["a", "b"])': 2,
        'count(["a", "b", "c"])': 3,
        'count([1, 2, 3, 4, 5])': 5,
        'count([1, 2, 3, false, 4, 0, 5])': 7,
    }));

    describe('reverse()', factory({
        'reverse(1)': new Error('optimize :: fn1 :: reverse,number'),
        'reverse(Infinity)': new Error('optimize :: fn1 :: reverse,number'),
        'reverse(NaN)': new Error('optimize :: fn1 :: reverse,number'),
        'reverse("a")': new Error('optimize :: fn1 :: reverse,string'),
        'reverse(number1)': new Error('evaluate :: fn1 :: reverse,number'),
        'reverse(string1)': new Error('evaluate :: fn1 :: reverse,string'),
        'reverse(array1)': [3, 2, 1],
        'reverse(object1)': new Error('evaluate :: fn1 :: reverse,object'),
        'reverse(false)': new Error('optimize :: fn1 :: reverse,boolean'),
        'reverse(null)': null,
        'reverse(null1)': null,
        'reverse(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'reverse(["a"])': ['a'],
        'reverse(["a", "b"])': ['b', 'a'],
        'reverse(["a", "b", "c"])': ['c', 'b', 'a'],
        'reverse([1, 2, 3, 4, 5])': [5, 4, 3, 2, 1],
        'reverse([1, 2, 3, false, 4, 0, 5])': [5, 0, 4, false, 3, 2, 1],
    }));

    describe('unique()', factory({
        'unique(1)': new Error('evaluate :: unique1 :: number'),
        'unique(Infinity)': new Error('evaluate :: unique1 :: number'),
        'unique(NaN)': new Error('evaluate :: unique1 :: number'),
        'unique("a")': new Error('evaluate :: unique1 :: string'),
        'unique(number1)': new Error('evaluate :: unique1 :: number'),
        'unique(string1)': new Error('evaluate :: unique1 :: string'),
        'unique(array1)': [1, 2, 3],
        'unique(merge(array1, array1))': [1, 2, 3],
        'unique(merge([1, 3, 2], array1))': [1, 3, 2],
        'unique(merge([1, 3], array1))': [1, 3, 2],
        'unique(object1)': new Error('evaluate :: unique1 :: object'),
        'unique(false)': new Error('evaluate :: unique1 :: boolean'),
        'unique(null)': null,
        'unique(null1)': null,
        'unique(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'unique(["a"])': ['a'],
        'unique(["a", "a"])': ['a'],
        'unique(["a", "b", "a"])': ['a', 'b'],
        'unique(["a", "b", "c"])': ['a', 'b', 'c'],
        'unique([1, 2, 3, 4, 5])': [1, 2, 3, 4, 5],
        'unique([1, 2, 3, false, 2, 0, 5])': [1, 2, 3, false, 0, 5],
        'unique([[1], [0]])': [[1], [0]],
        'unique([[{x: 1}], [{x: 1}], [{x: 2}]])': [[{x: 1}], [{x: 2}]],
    }));

    describe('merge()', factory({
        'merge(1)': new Error('optimize :: fn1 :: merge,number'),
        'merge(Infinity)': new Error('optimize :: fn1 :: merge,number'),
        'merge(NaN)': new Error('optimize :: fn1 :: merge,number'),
        'merge("a")': new Error('optimize :: fn1 :: merge,string'),
        'merge(number1)': new Error('evaluate :: fn1 :: merge,number'),
        'merge(string1)': new Error('evaluate :: fn1 :: merge,string'),
        'merge(array1)': [1, 2, 3],
        'merge(object1)': new Error('evaluate :: fn1 :: merge,object'),
        'merge(false)': new Error('optimize :: fn1 :: merge,boolean'),
        'merge(null)': null,
        'merge(null1)': null,
        'merge(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'merge(["a"])': ['a'],
        'merge(["a"], ["b"])': ['a', 'b'],
        'merge(["a", "b"], ["c"])': ['a', 'b', 'c'],
        'merge([1], [2, 3], [4, 5])': [1, 2, 3, 4, 5],
        'merge([1, 2, 3], [false], [4, 0, 5])': [1, 2, 3, false, 4, 0, 5],
        'merge([1, 2, 3], [null], [4, 0, 5])': [1, 2, 3, null, 4, 0, 5],
        'merge([1, 2, 3], null, [4, 0, 5])': null,
        'merge([1, 2, 3], number1, [4, 0, 5])': new Error('evaluate :: fn1 :: merge,number'),
    }));

    describe('indexOf()', factory({
        'indexOf(1, 2)': new Error('optimize :: indexOf1 :: number'),
        'indexOf(Infinity, 2)': new Error('optimize :: indexOf1 :: number'),
        'indexOf(NaN, 2)': new Error('optimize :: indexOf1 :: number'),
        'indexOf("a", 2)': new Error('optimize :: indexOf1 :: string'),
        'indexOf(number1, 2)': new Error('evaluate :: indexOf1 :: number'),
        'indexOf(string1, 2)': new Error('evaluate :: indexOf1 :: string'),
        'indexOf(array1, 2)': 1,
        'indexOf(object1, 2)': new Error('evaluate :: indexOf1 :: object'),
        'indexOf(false, 2)': new Error('optimize :: indexOf1 :: boolean'),
        'indexOf(null, 2)': null,
        'indexOf(null1, 2)': null,
        'indexOf(unknown, 2)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'indexOf(["a"], 2)': -1,
        'indexOf(["a", "b"], 2)': -1,
        'indexOf(["a", "b"], Infinity)': -1,
        'indexOf(["a", "b"], NaN)': -1,
        'indexOf(["a", "b", "c"], 2)': -1,
        'indexOf([1, 2, 3, 4, 5], 2)': 1,
        'indexOf([1, 2, 3, false, 4, 0, 5], 2)': 1,
        'indexOf([1, 2, 3, false, 4, 0, 5], false)': 3,
        'indexOf([1, 2, 3], [1, 2])': -1,
        'indexOf([[1, 2], 3], [1, 2])': 0,
        'indexOf([3, [1, 2]], [1, 2])': 1,
        'indexOf([[2, 1], 3], [1, 2])': -1,
        'indexOf([[1, 2, 3], 3], [1, 2])': -1,
        'indexOf([[1, 2, 3], 3], [1, {}])': -1,
        'indexOf([[1, 2, 3], 3, [1, {}]], [1, {}])': 2,
        'indexOf([[1, 2, 3], 3, [1, {x: 3}]], [1, {x: 2}])': -1,
        'indexOf([[1, 2, 3], 3, [1, {x: 2}]], [1, {x: 2}])': 2,
    }));

    describe('type()', factory({
        'type(1)': 'number',
        'type(Infinity)': 'number',
        'type(NaN)': 'number',
        'type(number1)': 'number',
        'type("abc")': 'string',
        'type(string1)': 'string',
        'type([])': 'array',
        'type(array1)': 'array',
        'type(true)': 'boolean',
        'type(true1)': 'boolean',
        'type(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'type(null)': 'null',
        'type(null1)': 'null',
        'type({})': 'object',
        'type(object1)': 'object',
        'type(now())': 'date',
    }));

    describe('now()', factory({
        // Пока не ясно, как это тестировать
    }));

    describe('dateAdd()', factory({
        'dateAdd(1, true, 0)': new Error('optimize :: dateAdd1 :: boolean'),
        'dateAdd("a", true, 0)': new Error('optimize :: dateAdd1 :: boolean'),
        'dateAdd(number1, true, 0)': new DifferentResults({
            mongo: new Error('optimize :: dateAdd1 :: boolean'),
            php: new Error('evaluate :: dateAdd1 :: boolean'),
            node: new Error('evaluate :: dateAdd1 :: boolean'),
        }),
        'dateAdd(string1, true, 0)': new DifferentResults({
            mongo: new Error('optimize :: dateAdd1 :: boolean'),
            php: new Error('evaluate :: dateAdd1 :: boolean'),
            node: new Error('evaluate :: dateAdd1 :: boolean'),
        }),
        'dateAdd(object1, true, 0)': new DifferentResults({
            mongo: new Error('optimize :: dateAdd1 :: boolean'),
            php: new Error('evaluate :: dateAdd1 :: boolean'),
            node: new Error('evaluate :: dateAdd1 :: boolean'),
        }),
        'dateAdd(false, true, 0)': new Error('optimize :: dateAdd1 :: boolean'),
        'dateAdd(null, true, 0)': null,
        'dateAdd(null1, true, 0)': new DifferentResults({
            mongo: new Error('optimize :: dateAdd1 :: boolean'),
            php: new Error('evaluate :: dateAdd1 :: boolean'),
            node: new Error('evaluate :: dateAdd1 :: boolean'),
        }),
        'dateAdd(unknown, true, 0)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'dateAdd(1, "hour", 0)': new Error('optimize :: dateAdd2'),
        'dateAdd("2009-12-01T12:34:00.000Z", "hour", 0)': new Error('optimize :: dateAdd2'),
        'dateAdd("a", "hour", 0)': new Error('optimize :: dateAdd2'),
        'dateAdd(number1, "hour", 0)': new Error('evaluate :: dateAdd2'),
        'dateAdd(string1, "hour", 0)': new Error('evaluate :: dateAdd2'),
        'dateAdd(object1, "hour", 0)': new Error('evaluate :: dateAdd2'),
        'dateAdd(false, "hour", 0)': new Error('optimize :: dateAdd2'),
        'dateAdd(null, "hour", 0)': null,
        'dateAdd(null1, "hour", 0)': null,
        'dateAdd(unknown, "hour", 0)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'dateAdd(#2009-12-01T12:34:00.000Z#, 1, 0)': new Error('optimize :: dateAdd1 :: number'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "a", 0)': new Error('optimize :: dateAdd3'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, number1, 0)': new Error('evaluate :: dateAdd1 :: number'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, string1, 0)': new Error('evaluate :: dateAdd3'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, object1, 0)': new Error('evaluate :: dateAdd1 :: object'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, false, 0)': new Error('optimize :: dateAdd1 :: boolean'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, null, 0)': null,
        'dateAdd(#2009-12-01T12:34:00.000Z#, null1, 0)': null,
        'dateAdd(#2009-12-01T12:34:00.000Z#, unknown, 0)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", 1.5)': new Error('optimize :: dateAdd4'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", "a")': new Error('optimize :: dateAdd4'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", number1)': new Date('2009-12-01T13:34:00.000Z'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", string1)': new Error('evaluate :: dateAdd4'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", object1)': new Error('evaluate :: dateAdd4'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", false)': new Error('optimize :: dateAdd4'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", null)': null,
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", null1)': null,
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'dateAdd("a", "b", "c")': new Error('optimize :: dateAdd3'),
        'dateAdd("a", "hour", "c")': new Error('optimize :: dateAdd2'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", 1)': new Date('2009-12-01T13:34:00.000Z'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", 30)': new Date('2009-12-02T18:34:00.000Z'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", 12000)': new Date('2011-04-15T12:34:00.000Z'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", 12000000)': new Date('3378-11-14T12:34:00.000Z'),
        'dateAdd(#1009-12-01T12:34:00.000Z#, "hour", 1)': new Date('1009-12-01T13:34:00.000Z'),
        'dateAdd(#1009-12-01T12:34:00.000Z#, "hour", 30)': new Date('1009-12-02T18:34:00.000Z'),
        'dateAdd(#1009-12-01T12:34:00.000Z#, "hour", 12000)': new Date('1011-04-15T12:34:00.000Z'),
        'dateAdd(#1009-12-01T12:34:00.000Z#, "hour", 12000000)': new Date('2378-11-14T12:34:00.000Z'),
        'dateAdd(#1009-12-01T12:34:00.000Z#, "year", 11)': new Date('1020-12-01T12:34:00.000Z'),
        'dateAdd(#2000-02-29T12:34:00.000Z#, "year", 1)': new Date('2001-02-28T12:34:00.000Z'),
        'dateAdd(#2000-02-29T12:34:00.000Z#, "day", 1)': new Date('2000-03-01T12:34:00.000Z'),
        'dateAdd(#2000-02-29T12:34:00.000Z#, "day", 365)': new Date('2001-02-28T12:34:00.000Z'),
        'dateAdd(#2000-02-29T12:34:00.000Z#, "day", 366)': new Date('2001-03-01T12:34:00.000Z'),
        'dateAdd(#1332-02-29T11:34:00.000Z#, "day", 132)': new Date('1332-07-10T11:34:00.000Z'),
        'dateAdd(#1009-12-31T12:34:00.000Z#, "month", 1)': new Date('1010-01-31T12:34:00.000Z'),
        'dateAdd(#1009-01-31T12:34:00.000Z#, "month", 1)': new Date('1009-02-28T12:34:00.000Z'),
        'dateAdd(#2023-02-28T12:34:00.000Z#, "month", 1)': new Date('2023-03-28T12:34:00.000Z'),
        'dateAdd(#2023-02-28T00:34:00.000Z#, "month", 1)': new Date('2023-03-28T00:34:00.000Z'),
        'dateAdd(#2023-02-28T00:00:00.000Z#, "month", 1)': new Date('2023-03-28T00:00:00.000Z'),
        'dateAdd(#2017-03-01T00:00:00.000Z#, "month", 1)': new Date('2017-04-01T00:00:00.000Z'),
        'dateAdd(#1009-12-31T12:34:00.000Z#, "day", 30)': new Date('1010-01-30T12:34:00.000Z'),
        'dateAdd(#1009-01-31T12:34:00.000Z#, "day", 30)': new Date('1009-03-02T12:34:00.000Z'),
        'dateAdd(#2023-02-28T12:34:00.000Z#, "day", 30)': new Date('2023-03-30T12:34:00.000Z'),
        'dateAdd(#2023-02-28T00:34:00.000Z#, "day", 30)': new Date('2023-03-30T00:34:00.000Z'),
        'dateAdd(#2023-02-28T00:00:00.000Z#, "day", 30)': new Date('2023-03-30T00:00:00.000Z'),
        'dateAdd(#2017-03-01T00:00:00.000Z#, "day", 30)': new Date('2017-03-31T00:00:00.000Z'),
        'dateAdd(#1009-01-31T12:34:00.000Z#, "month", 13)': new Date('1010-02-28T12:34:00.000Z'),
        'dateAdd(#1224-01-21T12:34:00.000Z#, "quarter", 21)': new Date('1229-04-21T12:34:00.000Z'),
        'dateAdd(#1224-01-21T12:34:00.000Z#, "second", 21)': new Date('1224-01-21T12:34:21.000Z'),
        'dateAdd(#1224-01-21T12:34:00.000Z#, "millisecond", 21)': new Date('1224-01-21T12:34:00.021Z'),
        'dateAdd(#1224-01-21T12:34:00.000Z#, "minute", 3345)': new Date('1224-01-23T20:19:00.000Z'),
        'dateAdd(#1224-01-21T12:34:00.000Z#, "week", 3345)': new Date('1288-02-29T12:34:00.000Z'),
        'dateAdd(#2009-12-01T11:34:00.000Z#, "hour", 1)': new Date('2009-12-01T12:34:00.000Z'),
        'dateAdd(#2009-11-30T06:34:00.000Z#, "hour", 30)': new Date('2009-12-01T12:34:00.000Z'),
        'dateAdd(#2008-07-19T12:34:00.000Z#, "hour", 12000)': new Date('2009-12-01T12:34:00.000Z'),
        'dateAdd(#0640-12-18T12:34:00.000Z#, "hour", 12000000)': new Date('2009-12-01T12:34:00.000Z'),
        'dateAdd(#1009-12-01T11:34:00.000Z#, "hour", 1)': new Date('1009-12-01T12:34:00.000Z'),
        'dateAdd(#1009-11-30T06:34:00.000Z#, "hour", 30)': new Date('1009-12-01T12:34:00.000Z'),
        'dateAdd(#1008-07-19T12:34:00.000Z#, "hour", 12000)': new Date('1009-12-01T12:34:00.000Z'),
        'dateAdd(#0998-12-01T12:34:00.000Z#, "year", 11)': new Date('1009-12-01T12:34:00.000Z'),
        'dateAdd(#1999-02-28T12:34:00.000Z#, "year", 1)': new Date('2000-02-28T12:34:00.000Z'),
        'dateAdd(#2000-02-28T12:34:00.000Z#, "day", 1)': new Date('2000-02-29T12:34:00.000Z'),
        'dateAdd(#1999-03-01T12:34:00.000Z#, "day", 365)': new Date('2000-02-29T12:34:00.000Z'),
        'dateAdd(#1999-02-28T12:34:00.000Z#, "day", 366)': new Date('2000-02-29T12:34:00.000Z'),
        'dateAdd(#1331-10-20T11:34:00.000Z#, "day", 132)': new Date('1332-02-29T11:34:00.000Z'),
        'dateAdd(#1009-11-30T12:34:00.000Z#, "month", 1)': new Date('1009-12-30T12:34:00.000Z'),
        'dateAdd(#1008-12-31T12:34:00.000Z#, "month", 1)': new Date('1009-01-31T12:34:00.000Z'),
        'dateAdd(#1009-02-28T12:34:00.000Z#, "month", 1)': new Date('1009-03-28T12:34:00.000Z'),
        'dateAdd(#1009-02-15T12:34:00.000Z#, "month", 1)': new Date('1009-03-15T12:34:00.000Z'),
        'dateAdd(#1009-02-01T12:34:00.000Z#, "month", 1)': new Date('1009-03-01T12:34:00.000Z'),
        'dateAdd(#2023-02-28T23:30:00.000Z#, "month", 1)': new Date('2023-03-28T23:30:00.000Z'),
        'dateAdd(#2023-02-28T00:30:00.000Z#, "month", 1)': new Date('2023-03-28T00:30:00.000Z'),
        'dateAdd(#1009-12-01T12:34:00.000Z#, "day", 30)': new Date('1009-12-31T12:34:00.000Z'),
        'dateAdd(#1009-01-01T12:34:00.000Z#, "day", 30)': new Date('1009-01-31T12:34:00.000Z'),
        'dateAdd(#1009-03-01T12:34:00.000Z#, "day", 30)': new Date('1009-03-31T12:34:00.000Z'),
        'dateAdd(#1009-02-13T12:34:00.000Z#, "day", 30)': new Date('1009-03-15T12:34:00.000Z'),
        'dateAdd(#1009-01-30T12:34:00.000Z#, "day", 30)': new Date('1009-03-01T12:34:00.000Z'),
        'dateAdd(#2023-03-01T12:34:00.000Z#, "day", 30)': new Date('2023-03-31T12:34:00.000Z'),
        'dateAdd(#2023-03-01T23:30:00.000Z#, "day", 30)': new Date('2023-03-31T23:30:00.000Z'),
        'dateAdd(#2023-03-01T00:30:00.000Z#, "day", 30)': new Date('2023-03-31T00:30:00.000Z'),
        'dateAdd(#2017-03-02T00:00:00.000Z#, "day", 30)': new Date('2017-04-01T00:00:00.000Z'),
        'dateAdd(#2021-02-01T00:00:00.000Z#, "month", 3)': new Date('2021-05-01T00:00:00.000Z'),
        'dateAdd(#2020-11-01T00:00:00.000Z#, "month", 3)': new Date('2021-02-01T00:00:00.000Z'),
        'dateAdd(#2021-07-01T00:00:00.000Z#, "month", 3)': new Date('2021-10-01T00:00:00.000Z'),
        'dateAdd(#1999-09-01T00:00:00.000Z#, "month", 4)': new Date('2000-01-01T00:00:00.000Z'),
        'dateAdd(#1007-12-31T12:34:00.000Z#, "month", 13)': new Date('1009-01-31T12:34:00.000Z'),
        'dateAdd(#1218-10-21T12:34:00.000Z#, "quarter", 21)': new Date('1224-01-21T12:34:00.000Z'),
        'dateAdd(#1224-01-21T12:33:39.000Z#, "second", 21)': new Date('1224-01-21T12:34:00.000Z'),
        'dateAdd(#1224-01-21T12:33:59.979Z#, "millisecond", 21)': new Date('1224-01-21T12:34:00.000Z'),
        'dateAdd(#1224-01-19T04:49:00.000Z#, "minute", 3345)': new Date('1224-01-21T12:34:00.000Z'),
        'dateAdd(#1159-12-13T12:34:00.000Z#, "week", 3345)': new Date('1224-01-21T12:34:00.000Z'),
    }));

    describe('dateSubtract()', factory({
        'dateSubtract(1, true, 0)': new Error('optimize :: dateSubtract1 :: boolean'),
        'dateSubtract("a", true, 0)': new Error('optimize :: dateSubtract1 :: boolean'),
        'dateSubtract(number1, true, 0)': new DifferentResults({
            mongo: new Error('optimize :: dateSubtract1 :: boolean'),
            php: new Error('evaluate :: dateSubtract1 :: boolean'),
            node: new Error('evaluate :: dateSubtract1 :: boolean'),
        }),
        'dateSubtract(string1, true, 0)': new DifferentResults({
            mongo: new Error('optimize :: dateSubtract1 :: boolean'),
            php: new Error('evaluate :: dateSubtract1 :: boolean'),
            node: new Error('evaluate :: dateSubtract1 :: boolean'),
        }),
        'dateSubtract(object1, true, 0)': new DifferentResults({
            mongo: new Error('optimize :: dateSubtract1 :: boolean'),
            php: new Error('evaluate :: dateSubtract1 :: boolean'),
            node: new Error('evaluate :: dateSubtract1 :: boolean'),
        }),
        'dateSubtract(false, true, 0)': new Error('optimize :: dateSubtract1 :: boolean'),
        'dateSubtract(null, true, 0)': null,
        'dateSubtract(null1, true, 0)': new DifferentResults({
            mongo: new Error('optimize :: dateSubtract1 :: boolean'),
            php: new Error('evaluate :: dateSubtract1 :: boolean'),
            node: new Error('evaluate :: dateSubtract1 :: boolean'),
        }),
        'dateSubtract(unknown, true, 0)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'dateSubtract(1, "hour", 0)': new Error('optimize :: dateSubtract2'),
        'dateSubtract("2009-12-01T12:34:00.000Z", "hour", 0)': new Error('optimize :: dateSubtract2'),
        'dateSubtract("a", "hour", 0)': new Error('optimize :: dateSubtract2'),
        'dateSubtract(number1, "hour", 0)': new Error('evaluate :: dateSubtract2'),
        'dateSubtract(string1, "hour", 0)': new Error('evaluate :: dateSubtract2'),
        'dateSubtract(object1, "hour", 0)': new Error('evaluate :: dateSubtract2'),
        'dateSubtract(false, "hour", 0)': new Error('optimize :: dateSubtract2'),
        'dateSubtract(null, "hour", 0)': null,
        'dateSubtract(null1, "hour", 0)': null,
        'dateSubtract(unknown, "hour", 0)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, 1, 0)': new Error('optimize :: dateSubtract1 :: number'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "a", 0)': new Error('optimize :: dateSubtract3'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, number1, 0)': new Error('evaluate :: dateSubtract1 :: number'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, string1, 0)': new Error('evaluate :: dateSubtract3'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, object1, 0)': new Error('evaluate :: dateSubtract1 :: object'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, false, 0)': new Error('optimize :: dateSubtract1 :: boolean'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, null, 0)': null,
        'dateSubtract(#2009-12-01T12:34:00.000Z#, null1, 0)': null,
        'dateSubtract(#2009-12-01T12:34:00.000Z#, unknown, 0)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", 1.5)': new Error('optimize :: dateSubtract4'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", "a")': new Error('optimize :: dateSubtract4'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", number1)': new Date('2009-12-01T11:34:00.000Z'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", string1)': new Error('evaluate :: dateSubtract4'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", object1)': new Error('evaluate :: dateSubtract4'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", false)': new Error('optimize :: dateSubtract4'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", null)': null,
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", null1)': null,
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'dateSubtract("a", "b", "c")': new Error('optimize :: dateSubtract3'),
        'dateSubtract("a", "hour", "c")': new Error('optimize :: dateSubtract2'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", 1)': new Date('2009-12-01T11:34:00.000Z'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", 30)': new Date('2009-11-30T06:34:00.000Z'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", 12000)': new Date('2008-07-19T12:34:00.000Z'),
        'dateSubtract(#2009-12-01T12:34:00.000Z#, "hour", 12000000)': new Date('0640-12-18T12:34:00.000Z'),
        'dateSubtract(#1009-12-01T12:34:00.000Z#, "hour", 1)': new Date('1009-12-01T11:34:00.000Z'),
        'dateSubtract(#1009-12-01T12:34:00.000Z#, "hour", 30)': new Date('1009-11-30T06:34:00.000Z'),
        'dateSubtract(#1009-12-01T12:34:00.000Z#, "hour", 12000)': new Date('1008-07-19T12:34:00.000Z'),
        'dateSubtract(#1009-12-01T12:34:00.000Z#, "year", 11)': new Date('0998-12-01T12:34:00.000Z'),
        'dateSubtract(#2000-02-29T12:34:00.000Z#, "year", 1)': new Date('1999-02-28T12:34:00.000Z'),
        'dateSubtract(#2000-02-29T12:34:00.000Z#, "day", 1)': new Date('2000-02-28T12:34:00.000Z'),
        'dateSubtract(#2000-03-01T12:34:00.000Z#, "day", 1)': new Date('2000-02-29T12:34:00.000Z'),
        'dateSubtract(#2000-02-29T12:34:00.000Z#, "day", 365)': new Date('1999-03-01T12:34:00.000Z'),
        'dateSubtract(#2000-02-29T12:34:00.000Z#, "day", 366)': new Date('1999-02-28T12:34:00.000Z'),
        'dateSubtract(#1332-02-29T11:34:00.000Z#, "day", 132)': new Date('1331-10-20T11:34:00.000Z'),
        'dateSubtract(#1009-12-31T12:34:00.000Z#, "month", 1)': new Date('1009-11-30T12:34:00.000Z'),
        'dateSubtract(#1009-01-31T12:34:00.000Z#, "month", 1)': new Date('1008-12-31T12:34:00.000Z'),
        'dateSubtract(#1009-03-31T12:34:00.000Z#, "month", 1)': new Date('1009-02-28T12:34:00.000Z'),
        'dateSubtract(#1009-03-15T12:34:00.000Z#, "month", 1)': new Date('1009-02-15T12:34:00.000Z'),
        'dateSubtract(#1009-03-01T12:34:00.000Z#, "month", 1)': new Date('1009-02-01T12:34:00.000Z'),
        'dateSubtract(#2023-03-31T12:34:00.000Z#, "month", 1)': new Date('2023-02-28T12:34:00.000Z'),
        'dateSubtract(#2023-03-31T23:30:00.000Z#, "month", 1)': new Date('2023-02-28T23:30:00.000Z'),
        'dateSubtract(#2023-03-31T23:30:00.000Z#, "quarter", 1)': new Date('2022-12-31T23:30:00.000Z'),
        'dateSubtract(#2023-03-31T23:30:00.000Z#, "year", 1)': new Date('2022-03-31T23:30:00.000Z'),
        'dateSubtract(#2023-03-31T23:30:00.000Z#, "hour", 1)': new Date('2023-03-31T22:30:00.000Z'),
        'dateSubtract(#2023-03-31T00:30:00.000Z#, "month", 1)': new Date('2023-02-28T00:30:00.000Z'),
        'dateSubtract(#2017-04-01T00:00:00.000Z#, "month", 1)': new Date('2017-03-01T00:00:00.000Z'),
        'dateSubtract(#1009-12-31T12:34:00.000Z#, "day", 30)': new Date('1009-12-01T12:34:00.000Z'),
        'dateSubtract(#1009-01-31T12:34:00.000Z#, "day", 30)': new Date('1009-01-01T12:34:00.000Z'),
        'dateSubtract(#1009-03-31T12:34:00.000Z#, "day", 30)': new Date('1009-03-01T12:34:00.000Z'),
        'dateSubtract(#1009-03-15T12:34:00.000Z#, "day", 30)': new Date('1009-02-13T12:34:00.000Z'),
        'dateSubtract(#1009-03-01T12:34:00.000Z#, "day", 30)': new Date('1009-01-30T12:34:00.000Z'),
        'dateSubtract(#2023-03-31T12:34:00.000Z#, "day", 30)': new Date('2023-03-01T12:34:00.000Z'),
        'dateSubtract(#2023-03-31T23:30:00.000Z#, "day", 30)': new Date('2023-03-01T23:30:00.000Z'),
        'dateSubtract(#2023-03-31T00:30:00.000Z#, "day", 30)': new Date('2023-03-01T00:30:00.000Z'),
        'dateSubtract(#2017-04-01T00:00:00.000Z#, "day", 30)': new Date('2017-03-02T00:00:00.000Z'),
        'dateSubtract(#2021-05-01T00:00:00.000Z#, "month", 3)': new Date('2021-02-01T00:00:00.000Z'),
        'dateSubtract(#2021-02-01T00:00:00.000Z#, "month", 3)': new Date('2020-11-01T00:00:00.000Z'),
        'dateSubtract(#2021-10-01T00:00:00.000Z#, "month", 3)': new Date('2021-07-01T00:00:00.000Z'),
        'dateSubtract(#2000-01-01T00:00:00.000Z#, "month", 4)': new Date('1999-09-01T00:00:00.000Z'),
        'dateSubtract(#1009-01-31T12:34:00.000Z#, "month", 13)': new Date('1007-12-31T12:34:00.000Z'),
        'dateSubtract(#1224-01-21T12:34:00.000Z#, "quarter", 21)': new Date('1218-10-21T12:34:00.000Z'),
        'dateSubtract(#1224-01-21T12:34:00.000Z#, "second", 21)': new Date('1224-01-21T12:33:39.000Z'),
        'dateSubtract(#1224-01-21T12:34:00.000Z#, "millisecond", 21)': new Date('1224-01-21T12:33:59.979Z'),
        'dateSubtract(#1224-01-21T12:34:00.000Z#, "minute", 3345)': new Date('1224-01-19T04:49:00.000Z'),
        'dateSubtract(#1224-01-21T12:34:00.000Z#, "week", 3345)': new Date('1159-12-13T12:34:00.000Z'),
        'dateSubtract(#2009-12-01T13:34:00.000Z#, "hour", 1)': new Date('2009-12-01T12:34:00.000Z'),
        'dateSubtract(#2009-12-02T18:34:00.000Z#, "hour", 30)': new Date('2009-12-01T12:34:00.000Z'),
        'dateSubtract(#2011-04-15T12:34:00.000Z#, "hour", 12000)': new Date('2009-12-01T12:34:00.000Z'),
        'dateSubtract(#3378-11-14T12:34:00.000Z#, "hour", 12000000)': new Date('2009-12-01T12:34:00.000Z'),
        'dateSubtract(#1009-12-01T13:34:00.000Z#, "hour", 1)': new Date('1009-12-01T12:34:00.000Z'),
        'dateSubtract(#1009-12-02T18:34:00.000Z#, "hour", 30)': new Date('1009-12-01T12:34:00.000Z'),
        'dateSubtract(#1011-04-15T12:34:00.000Z#, "hour", 12000)': new Date('1009-12-01T12:34:00.000Z'),
        'dateSubtract(#2378-11-14T12:34:00.000Z#, "hour", 12000000)': new Date('1009-12-01T12:34:00.000Z'),
        'dateSubtract(#1020-12-01T12:34:00.000Z#, "year", 11)': new Date('1009-12-01T12:34:00.000Z'),
        'dateSubtract(#2001-02-28T12:34:00.000Z#, "year", 1)': new Date('2000-02-28T12:34:00.000Z'),
        'dateSubtract(#2001-02-28T12:34:00.000Z#, "day", 365)': new Date('2000-02-29T12:34:00.000Z'),
        'dateSubtract(#2001-03-01T12:34:00.000Z#, "day", 366)': new Date('2000-02-29T12:34:00.000Z'),
        'dateSubtract(#1332-07-10T11:34:00.000Z#, "day", 132)': new Date('1332-02-29T11:34:00.000Z'),
        'dateSubtract(#1010-01-31T12:34:00.000Z#, "month", 1)': new Date('1009-12-31T12:34:00.000Z'),
        'dateSubtract(#1009-02-28T12:34:00.000Z#, "month", 1)': new Date('1009-01-28T12:34:00.000Z'),
        'dateSubtract(#2023-03-28T12:34:00.000Z#, "month", 1)': new Date('2023-02-28T12:34:00.000Z'),
        'dateSubtract(#2023-03-28T00:34:00.000Z#, "month", 1)': new Date('2023-02-28T00:34:00.000Z'),
        'dateSubtract(#2023-03-28T00:00:00.000Z#, "month", 1)': new Date('2023-02-28T00:00:00.000Z'),
        'dateSubtract(#2023-03-28T23:30:00.000Z#, "month", 1)': new Date('2023-02-28T23:30:00.000Z'),
        'dateSubtract(#1010-01-30T12:34:00.000Z#, "day", 30)': new Date('1009-12-31T12:34:00.000Z'),
        'dateSubtract(#1009-03-02T12:34:00.000Z#, "day", 30)': new Date('1009-01-31T12:34:00.000Z'),
        'dateSubtract(#2023-03-30T12:34:00.000Z#, "day", 30)': new Date('2023-02-28T12:34:00.000Z'),
        'dateSubtract(#2023-03-30T00:34:00.000Z#, "day", 30)': new Date('2023-02-28T00:34:00.000Z'),
        'dateSubtract(#2023-03-30T00:00:00.000Z#, "day", 30)': new Date('2023-02-28T00:00:00.000Z'),
        'dateSubtract(#2017-03-31T00:00:00.000Z#, "day", 30)': new Date('2017-03-01T00:00:00.000Z'),
        'dateSubtract(#1010-02-28T12:34:00.000Z#, "month", 13)': new Date('1009-01-28T12:34:00.000Z'),
        'dateSubtract(#1229-04-21T12:34:00.000Z#, "quarter", 21)': new Date('1224-01-21T12:34:00.000Z'),
        'dateSubtract(#1224-01-21T12:34:21.000Z#, "second", 21)': new Date('1224-01-21T12:34:00.000Z'),
        'dateSubtract(#1224-01-21T12:34:00.021Z#, "millisecond", 21)': new Date('1224-01-21T12:34:00.000Z'),
        'dateSubtract(#1224-01-23T20:19:00.000Z#, "minute", 3345)': new Date('1224-01-21T12:34:00.000Z'),
        'dateSubtract(#1288-02-29T12:34:00.000Z#, "week", 3345)': new Date('1224-01-21T12:34:00.000Z'),
    }));

    describe('length()', factory({
        'length(1)': new Error('optimize :: fn6 :: length,number'),
        'length(Infinity)': new Error('optimize :: fn6 :: length,number'),
        'length(NaN)': new Error('optimize :: fn6 :: length,number'),
        'length(number1)': new Error('evaluate :: fn6 :: length,number'),
        'length("abc")': 3,
        'length(string1)': 3,
        'length([])': new Error('optimize :: fn6 :: length,array'),
        'length(array1)': new Error('evaluate :: fn6 :: length,array'),
        'length(true)': new Error('optimize :: fn6 :: length,boolean'),
        'length(true1)': new Error('evaluate :: fn6 :: length,boolean'),
        'length(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'length(null)': new Error('optimize :: fn6 :: length,null'),
        'length(null1)': new Error('evaluate :: fn6 :: length,null'),
        'length({})': new Error('optimize :: fn6 :: length,object'),
        'length(object1)': new Error('evaluate :: fn6 :: length,object'),
        'length(now())': new DifferentResults({
            mongo: new Error('evaluate :: fn6 :: length,date'),
            php: new Error('optimize :: fn6 :: length,date'),
            node: new Error('optimize :: fn6 :: length,date'),
        }),
        'length("abcde")': 5,
        'length("Hello World!")': 12,
        'length("cafeteria")': 9,
        'length("cafétéria")': 9,
        'length("$€λA")': 4,
        'length("寿司")': 2,
        'length("a😉b")': 3,
        'length("नुच्छेद")': 7,
        'length("🌷🎁💩😜👍🏳️‍🌈")': 9,
        'length("Ĺo͂řȩm̅")': 10,
        'length("뎌쉐")': 4,
        'length("अनुच्छेद")': 8,
        'length("Z͑ͫ̓ͪ̂ͫ̽͏̴̙̤̞͉͚̯̞̠͍A̴̵̜̰͔ͫ͗͢L̠ͨͧͩ͘G̴̻͈͍͔̹̑͗̎̅͛́Ǫ̵̹̻̝̳͂̌̌͘!͖̬̰̙̗̿̋ͥͥ̂ͣ̐́́͜͞")': 75,
    }));

    describe('trim()', factory({
        'trim(1)': new Error('optimize :: fn6 :: trim,number'),
        'trim(Infinity)': new Error('optimize :: fn6 :: trim,number'),
        'trim(NaN)': new Error('optimize :: fn6 :: trim,number'),
        'trim(number1)': new Error('evaluate :: fn6 :: trim,number'),
        'trim("abc")': 'abc',
        'trim(string1)': 'abc',
        'trim([])': new Error('optimize :: fn6 :: trim,array'),
        'trim(array1)': new Error('evaluate :: fn6 :: trim,array'),
        'trim(true)': new Error('optimize :: fn6 :: trim,boolean'),
        'trim(true1)': new Error('evaluate :: fn6 :: trim,boolean'),
        'trim(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'trim(null)': null,
        'trim(null1)': null,
        'trim({})': new Error('optimize :: fn6 :: trim,object'),
        'trim(object1)': new Error('evaluate :: fn6 :: trim,object'),
        'trim(now())': new DifferentResults({
            mongo: new Error('evaluate :: fn6 :: trim,date'),
            php: new Error('optimize :: fn6 :: trim,date'),
            node: new Error('optimize :: fn6 :: trim,date'),
        }),
        'trim("abcde\n")': 'abcde',
        'trim("Hello World!")': 'Hello World!',
        'trim("cafeteria")': 'cafeteria',
        'trim(" cafétéria ")': 'cafétéria',
        'trim(" \u{1680} cafétéria ")': 'cafétéria',
        'trim("$€λA ")': '$€λA',
        'trim(" $€λA ")': '$€λA',
        'trim("\n\u{000B}$€λA ")': '$€λA',
        'trim("寿司 ")': '寿司',
        'trim("Кекс")': 'Кекс',
        'trim("Ке \n кс")': 'Ке \n кс',
        'trim(" Ке \n кс ")': 'Ке \n кс',
        'trim("\u{0000}寿司 \u{2008}")': '寿司',
    }));

    describe('lower()', factory({
        'lower(1)': new Error('optimize :: fn6 :: lower,number'),
        'lower(Infinity)': new Error('optimize :: fn6 :: lower,number'),
        'lower(NaN)': new Error('optimize :: fn6 :: lower,number'),
        'lower(number1)': new Error('evaluate :: fn6 :: lower,number'),
        'lower("aBc")': 'abc',
        'lower(string1)': 'abc',
        'lower([])': new Error('optimize :: fn6 :: lower,array'),
        'lower(array1)': new Error('evaluate :: fn6 :: lower,array'),
        'lower(true)': new Error('optimize :: fn6 :: lower,boolean'),
        'lower(true1)': new Error('evaluate :: fn6 :: lower,boolean'),
        'lower(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'lower(null)': null,
        'lower(null1)': null,
        'lower({})': new Error('optimize :: fn6 :: lower,object'),
        'lower(object1)': new Error('evaluate :: fn6 :: lower,object'),
        'lower(now())': new Error('optimize :: fn6 :: lower,date'),
        'lower("AbCdE")': 'abcde',
        'lower("Hello World!")': 'hello world!',
        'lower("CAFETERIA")': 'cafeteria',
        'lower("CAFÉTÉRIA")': 'cafétéria',
        'lower("$€λA")': '$€λa',
        'lower("寿司")': '寿司',
        'lower("Проверка")': 'проверка',
        'lower("ПровЁиЙрка")': 'провёийрка',
        'lower("ЗНАК УДАРЕ́НИЯ")': 'знак ударе́ния',
    }));

    describe('upper()', factory({
        'upper(1)': new Error('optimize :: fn6 :: upper,number'),
        'upper(Infinity)': new Error('optimize :: fn6 :: upper,number'),
        'upper(NaN)': new Error('optimize :: fn6 :: upper,number'),
        'upper(number1)': new Error('evaluate :: fn6 :: upper,number'),
        'upper("aBc")': 'ABC',
        'upper(string1)': 'ABC',
        'upper([])': new Error('optimize :: fn6 :: upper,array'),
        'upper(array1)': new Error('evaluate :: fn6 :: upper,array'),
        'upper(true)': new Error('optimize :: fn6 :: upper,boolean'),
        'upper(true1)': new Error('evaluate :: fn6 :: upper,boolean'),
        'upper(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'upper(null)': null,
        'upper(null1)': null,
        'upper({})': new Error('optimize :: fn6 :: upper,object'),
        'upper(object1)': new Error('evaluate :: fn6 :: upper,object'),
        'upper(now())': new Error('optimize :: fn6 :: upper,date'),
        'upper("AbCdE")': 'ABCDE',
        'upper("Hello World!")': 'HELLO WORLD!',
        'upper("cafeteria")': 'CAFETERIA',
        'upper("cafétéria")': 'CAFÉTÉRIA',
        'upper("$€λa")': '$€ΛA',
        'upper("寿司")': '寿司',
        'upper("Проверка")': 'ПРОВЕРКА',
        'upper("ПровЁиЙрка")': 'ПРОВЁИЙРКА',
        'upper("Провёийрка")': 'ПРОВЁИЙРКА',
        'upper("Знак ударе́ния")': 'ЗНАК УДАРЕ́НИЯ',
    }));

    describe('trimStart()', factory({
        'trimStart(1)': new Error('optimize :: fn6 :: trimStart,number'),
        'trimStart(Infinity)': new Error('optimize :: fn6 :: trimStart,number'),
        'trimStart(NaN)': new Error('optimize :: fn6 :: trimStart,number'),
        'trimStart(number1)': new Error('evaluate :: fn6 :: trimStart,number'),
        'trimStart("abc")': 'abc',
        'trimStart(string1)': 'abc',
        'trimStart([])': new Error('optimize :: fn6 :: trimStart,array'),
        'trimStart(array1)': new Error('evaluate :: fn6 :: trimStart,array'),
        'trimStart(true)': new Error('optimize :: fn6 :: trimStart,boolean'),
        'trimStart(true1)': new Error('evaluate :: fn6 :: trimStart,boolean'),
        'trimStart(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'trimStart(null)': null,
        'trimStart(null1)': null,
        'trimStart({})': new Error('optimize :: fn6 :: trimStart,object'),
        'trimStart(object1)': new Error('evaluate :: fn6 :: trimStart,object'),
        'trimStart(now())': new DifferentResults({
            mongo: new Error('evaluate :: fn6 :: trimStart,date'),
            php: new Error('optimize :: fn6 :: trimStart,date'),
            node: new Error('optimize :: fn6 :: trimStart,date'),
        }),
        'trimStart("abcde\n")': 'abcde\n',
        'trimStart("Hello World!")': 'Hello World!',
        'trimStart("cafeteria")': 'cafeteria',
        'trimStart(" cafétéria ")': 'cafétéria ',
        'trimStart(" \u{1680} cafétéria ")': 'cafétéria ',
        'trimStart("$€λA ")': '$€λA ',
        'trimStart(" $€λA ")': '$€λA ',
        'trimStart("\n\u{000B}$€λA ")': '$€λA ',
        'trimStart(" abc\n")': 'abc\n',
        'trimStart("寿司 ")': '寿司 ',
        'trimStart("Кекс")': 'Кекс',
        'trimStart("Ке \n кс")': 'Ке \n кс',
        'trimStart(" Ке \n кс ")': 'Ке \n кс ',
        'trimStart("\u{0000}寿司 \u{2008}")': '寿司 \u{2008}',
    }));

    describe('trimEnd()', factory({
        'trimEnd(1)': new Error('optimize :: fn6 :: trimEnd,number'),
        'trimEnd(Infinity)': new Error('optimize :: fn6 :: trimEnd,number'),
        'trimEnd(NaN)': new Error('optimize :: fn6 :: trimEnd,number'),
        'trimEnd(number1)': new Error('evaluate :: fn6 :: trimEnd,number'),
        'trimEnd("abc")': 'abc',
        'trimEnd(string1)': 'abc',
        'trimEnd([])': new Error('optimize :: fn6 :: trimEnd,array'),
        'trimEnd(array1)': new Error('evaluate :: fn6 :: trimEnd,array'),
        'trimEnd(true)': new Error('optimize :: fn6 :: trimEnd,boolean'),
        'trimEnd(true1)': new Error('evaluate :: fn6 :: trimEnd,boolean'),
        'trimEnd(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'trimEnd(null)': null,
        'trimEnd(null1)': null,
        'trimEnd({})': new Error('optimize :: fn6 :: trimEnd,object'),
        'trimEnd(object1)': new Error('evaluate :: fn6 :: trimEnd,object'),
        'trimEnd(now())': new DifferentResults({
            mongo: new Error('evaluate :: fn6 :: trimEnd,date'),
            php: new Error('optimize :: fn6 :: trimEnd,date'),
            node: new Error('optimize :: fn6 :: trimEnd,date'),
        }),
        'trimEnd("\nabcde")': '\nabcde',
        'trimEnd("Hello World!")': 'Hello World!',
        'trimEnd("cafeteria")': 'cafeteria',
        'trimEnd(" cafétéria ")': ' cafétéria',
        'trimEnd(" \u{1680} cafétéria ")': ' \u{1680} cafétéria',
        'trimEnd(" $€λA ")': ' $€λA',
        'trimEnd("\n\u{000B}$€λA ")': '\n\u{000B}$€λA',
        'trimEnd("寿司 ")': '寿司',
        'trimEnd("Кекс")': 'Кекс',
        'trimEnd("Ке \n кс")': 'Ке \n кс',
        'trimEnd(" Ке \n кс ")': ' Ке \n кс',
        'trimEnd("\u{0000}寿司 \u{2008}")': '\u{0000}寿司',
    }));

    describe('substr()', factory({
        'substr(1)': '1',
        'substr(Infinity)': 'Infinity',
        'substr(NaN)': 'NaN',
        'substr(number1)': '1',
        'substr("abc")': 'abc',
        'substr(string1)': 'abc',
        'substr([])': new Error('optimize :: convert1 :: array,string'),
        'substr(array1)': new Error('evaluate :: convert1 :: array,string'),
        'substr(true)': 'true',
        'substr(true1)': 'true',
        'substr(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'substr(null)': '',
        'substr(null1)': '',
        'substr({})': new Error('optimize :: convert1 :: object,string'),
        'substr(object1)': new Error('evaluate :: convert1 :: object,string'),
        'substr(toDate("2009-12T12:34"))': '2009-12-01T12:34:00.000Z',
        'substr(toDate("0009-12T12:34"))': '0009-12-01T12:34:00.000Z',
        'substr("abcde")': 'abcde',
        'substr("Hello World!")': 'Hello World!',
        'substr("cafeteria")': 'cafeteria',
        'substr("cafétéria")': 'cafétéria',
        'substr("$€λA")': '$€λA',
        'substr("寿司")': '寿司',
        'substr("$€λA", 2)': 'λA',
        'substr("寿司", 1)': '司',
        'substr("a😉b", 1)': '😉b',
        'substr("a😉b", 1, 1)': '😉',
        'substr("a😉b", 2)': 'b',
        'substr("अनुच्छेद", 2)': 'ुच्छेद',
        'substr("a😉b", 2)': 'b',
        'substr("a😉b", 1)': '😉b',
        'substr("नुच्छेद", 4)': 'छेद',
        'substr("🌷🎁💩😜👍🏳️‍🌈", 8)': '🌈',
        'substr("🌷🎁💩😜👍🏳️‍🌈", 5)': '🏳️‍🌈',
        'substr("Ĺo͂řȩm̅", 6)': 'ȩm̅',
        'substr("뎌쉐", 2)': '쉐',
        'substr("뎌쉐", 3)': 'ᅰ',
        'substr("अनुच्छेद", 1)': 'नुच्छेद',
        'substr("abcde", 0)': 'abcde',
        'substr([], -1)': new Error('optimize :: convert1 :: array,string'),
        'substr("abcde", 1)': 'bcde',
        'substr("abcde", 1.1 - 0.1)': 'bcde',
        'substr("abcde", 1, 1.1 - 0.1)': 'b',
        'substr("abcde", 1, 1.5)': new Error('optimize :: fn3 :: substr,3rd'),
        'substr("abcde", null)': new Error('optimize :: fn2 :: substr,2nd,null'),
        'substr("abcde", [])': new Error('optimize :: fn2 :: substr,2nd,array'),
        'substr("abcde", -1)': new Error('optimize :: substr3'),
        'substr("abcde", -1, "")': new Error('optimize :: fn2 :: substr,3rd,string'),
        'substr("abcde", 1.5, 1)': new Error('optimize :: fn3 :: substr,2nd'),
        'substr("abcde", 1.5, "")': new Error('optimize :: fn3 :: substr,2nd'),
        'substr("abcde", 0, 0)': '',
        'substr("abcde", 2147483648, 0)': new Error('optimize :: fn3 :: substr,2nd'),
        'substr("abcde", 0, 1)': 'a',
        'substr("abcde", Infinity, 1)': new Error('optimize :: fn3 :: substr,2nd'),
        'substr("abcde", 0, Infinity)': new Error('optimize :: fn3 :: substr,3rd'),
        'substr("abcde", NaN, 1)': new Error('optimize :: fn3 :: substr,2nd'),
        'substr("abcde", 0, NaN)': new Error('optimize :: fn3 :: substr,3rd'),
        'substr("abcde", 0, 2147483648)': new Error('optimize :: fn3 :: substr,3rd'),
        'substr("abcde", 0, null)': new Error('optimize :: fn2 :: substr,3rd,null'),
        'substr("abcde", 0, [])': new Error('optimize :: fn2 :: substr,3rd,array'),
        'substr("abcde", 0, -1)': new Error('optimize :: substr5'),
        'substr(Infinity, 2)': 'finity',
        'substr(Infinity, 1, 1)': 'n',
        'substr(NaN, 2)': 'N',
        'substr(NaN, 1, 1)': 'a',
    }));

    describe('split()', factory({
        'split("a", 1)': new Error('optimize :: fn5 :: split,2nd,number'),
        'split("a", number1)': new Error('evaluate :: fn5 :: split,2nd,number'),
        'split("a", "abc")': ['a'],
        'split("a", string1)': ['a'],
        'split("a", [])': new Error('optimize :: fn5 :: split,2nd,array'),
        'split("a", array1)': new Error('evaluate :: fn5 :: split,2nd,array'),
        'split("a", true)': new Error('optimize :: fn5 :: split,2nd,boolean'),
        'split("a", true1)': new Error('evaluate :: fn5 :: split,2nd,boolean'),
        'split("a", unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'split("a", null)': null,
        'split("a", null1)': null,
        'split(12, null1)': null,
        'split("a", {})': new Error('optimize :: fn5 :: split,2nd,object'),
        'split("a", object1)': new Error('evaluate :: fn5 :: split,2nd,object'),
        'split("a", #2009-12T12:34#)': new Error('optimize :: fn5 :: split,2nd,date'),
        'split("a", "abcde")': ['a'],
        'split("a", "Hello World!")': ['a'],
        'split("a", "cafeteria")': ['a'],
        'split("a", "cafétéria")': ['a'],
        'split("a", "$€λA")': ['a'],
        'split("a", "寿司")': ['a'],
        'split(1, "a")': new Error('optimize :: fn5 :: split,1st,number'),
        'split(Infinity, "a")': new Error('optimize :: fn5 :: split,1st,number'),
        'split(NaN, "a")': new Error('optimize :: fn5 :: split,1st,number'),
        'split(number1, "a")': new Error('evaluate :: fn5 :: split,1st,number'),
        'split("abc", "a")': ['', 'bc'],
        'split("abc", Infinity)': new Error('optimize :: fn5 :: split,2nd,number'),
        'split("abc", NaN)': new Error('optimize :: fn5 :: split,2nd,number'),
        'split(string1, "a")': ['', 'bc'],
        'split([], "a")': new Error('optimize :: fn5 :: split,1st,array'),
        'split(array1, "a")': new Error('evaluate :: fn5 :: split,1st,array'),
        'split(true, "a")': new Error('optimize :: fn5 :: split,1st,boolean'),
        'split(true1, "a")': new Error('evaluate :: fn5 :: split,1st,boolean'),
        'split(unknown, "a")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'split(null, "a")': null,
        'split(null1, "a")': null,
        'split(null1, 12)': null,
        'split({}, "a")': new Error('optimize :: fn5 :: split,1st,object'),
        'split(object1, "a")': new Error('evaluate :: fn5 :: split,1st,object'),
        'split(toDate("2009-12T12:34"), "a")': new Error('evaluate :: fn5 :: split,1st,date'),
        'split("abcde", "a")': ['', 'bcde'],
        'split("Hello World!", "a")': ['Hello World!'],
        'split("cafeteria", "a")': ['c', 'feteri', ''],
        'split("cafétéria", "a")': ['c', 'fétéri', ''],
        'split("$€λA", "a")': ['$€λA'],
        'split("寿司", "a")': ['寿司'],
        'split("a, b, c", ", ")': ['a', 'b', 'c'],
        'split("a, b, c", ",")': ['a', ' b', ' c'],
        'split("a, b, c", "")': new Error('optimize :: split3'),
        'split("寿,司", ",")': ['寿', '司'],
        'split(",寿,寿,", "寿")': [',', ',', ','],
    }));

    describe('replace()', factory({
        'replace([], "a", "b")': new Error('evaluate :: fn5 :: replace,1st,array'),
        'replace(array1, "a", "b")': new Error('evaluate :: fn5 :: replace,1st,array'),
        'replace(true, "a", "b")': new Error('evaluate :: fn5 :: replace,1st,boolean'),
        'replace(true1, "a", "b")': new Error('evaluate :: fn5 :: replace,1st,boolean'),
        'replace(unknown, "a", "b")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'replace(null, "a", "b")': null,
        'replace(null1, "a", "b")': null,
        'replace("abc", "b", 1)': new Error('evaluate :: fn5 :: replace,3rd,number'),
        'replace("abc", "b", number1)': new Error('evaluate :: fn5 :: replace,3rd,number'),
        'replace("a", "e", "abc")': 'a',
        'replace(#2012-05-12#, "a", "abc")': new Error('evaluate :: fn5 :: replace,1st,date'),
        'replace("abc", "b", string1)': 'aabcc',
        'replace("abc", "b", [])': new Error('evaluate :: fn5 :: replace,3rd,array'),
        'replace("abc", "b", array1)': new Error('evaluate :: fn5 :: replace,3rd,array'),
        'replace("abc", "b", true)': new Error('evaluate :: fn5 :: replace,3rd,boolean'),
        'replace("abc", "b", true1)': new Error('evaluate :: fn5 :: replace,3rd,boolean'),
        'replace("abc", "b", unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'replace("abc", "b", null)': null,
        'replace("abc", "b", null1)': null,
        'replace("a", 12, null1)': new Error('evaluate :: fn5 :: replace,2nd,number'),
        'replace("abc", "b", {})': new Error('evaluate :: fn5 :: replace,3rd,object'),
        'replace("abc", "b", object1)': new Error('evaluate :: fn5 :: replace,3rd,object'),
        'replace("abc", "b", #2009-12T12:34#)': new Error('evaluate :: fn5 :: replace,3rd,date'),
        'replace("abc", "b", "abcde")': 'aabcdec',
        'replace("abc", "b", Infinity)': new Error('evaluate :: fn5 :: replace,3rd,number'),
        'replace("abc", Infinity, "abcde")': new Error('evaluate :: fn5 :: replace,2nd,number'),
        'replace("abc", "b", NaN)': new Error('evaluate :: fn5 :: replace,3rd,number'),
        'replace("abc", NaN, "abcde")': new Error('evaluate :: fn5 :: replace,2nd,number'),
        'replace("abc", "b", "Hello World!")': 'aHello World!c',
        'replace("abc", "b", "cafeteria")': 'acafeteriac',
        'replace("abc", "b", "cafétéria")': 'acafétériac',
        'replace("cafétéria", "é", "司")': 'caf司téria',
        'replace("cafetéria", "é", "司")': 'cafet司ria',
        'replace("abc", "b", "$€λA")': 'a$€λAc',
        'replace("abc", "b", "寿司")': 'a寿司c',
        'replace("a", 1, "a")': new Error('evaluate :: fn5 :: replace,2nd,number'),
        'replace("a", number1, "a")': new Error('evaluate :: fn5 :: replace,2nd,number'),
        'replace("a", "abc", "a")': 'a',
        'replace("a", string1, "a")': 'a',
        'replace("a", [], "a")': new Error('evaluate :: fn5 :: replace,2nd,array'),
        'replace("a", array1, "a")': new Error('evaluate :: fn5 :: replace,2nd,array'),
        'replace("a", true, "a")': new Error('evaluate :: fn5 :: replace,2nd,boolean'),
        'replace("a", true1, "a")': new Error('evaluate :: fn5 :: replace,2nd,boolean'),
        'replace("a", unknown, "a")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'replace("a", null, "a")': null,
        'replace(123, null, "a")': new Error('evaluate :: fn5 :: replace,1st,number'),
        'replace("a", "b", null1)': null,
        'replace(12, 34, null1)': new Error('evaluate :: fn5 :: replace,1st,number'),
        'replace(null1, "a", 12)': new Error('evaluate :: fn5 :: replace,3rd,number'),
        'replace("a", null1, "a")': null,
        'replace("a", null1, 12)': new Error('evaluate :: fn5 :: replace,3rd,number'),
        'replace("a", {}, "a")': new Error('evaluate :: fn5 :: replace,2nd,object'),
        'replace("a", object1, "a")': new Error('evaluate :: fn5 :: replace,2nd,object'),
        'replace("a", toDate("2009-12T12:34"), "a")': new Error('evaluate :: fn5 :: replace,2nd,date'),
        'replace("a", "abcde", "a")': 'a',
        'replace("aaa", "a", "a")': 'aaa',
        'replace("aaa", "A", "a")': 'aaa',
        'replace("aaa", "a", "")': 'aa',
        'replace("aaa", "a", "b")': 'baa',
    }));

    describe('replaceAll()', factory({
        'replaceAll([], "a", "b")': new Error('evaluate :: fn5 :: replaceAll,1st,array'),
        'replaceAll(array1, "a", "b")': new Error('evaluate :: fn5 :: replaceAll,1st,array'),
        'replaceAll(true, "a", "b")': new Error('evaluate :: fn5 :: replaceAll,1st,boolean'),
        'replaceAll(true1, "a", "b")': new Error('evaluate :: fn5 :: replaceAll,1st,boolean'),
        'replaceAll(unknown, "a", "b")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'replaceAll(null, "a", "b")': null,
        'replaceAll(null1, "a", "b")': null,
        'replaceAll("abc", "b", 1)': new Error('evaluate :: fn5 :: replaceAll,3rd,number'),
        'replaceAll("abc", "b", number1)': new Error('evaluate :: fn5 :: replaceAll,3rd,number'),
        'replaceAll("a", "e", "abc")': 'a',
        'replaceAll(#2012-05-12#, "a", "abc")': new Error('evaluate :: fn5 :: replaceAll,1st,date'),
        'replaceAll("abc", "b", string1)': 'aabcc',
        'replaceAll("abc", "b", [])': new Error('evaluate :: fn5 :: replaceAll,3rd,array'),
        'replaceAll("abc", "b", array1)': new Error('evaluate :: fn5 :: replaceAll,3rd,array'),
        'replaceAll("abc", "b", true)': new Error('evaluate :: fn5 :: replaceAll,3rd,boolean'),
        'replaceAll("abc", "b", true1)': new Error('evaluate :: fn5 :: replaceAll,3rd,boolean'),
        'replaceAll("abc", "b", unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'replaceAll("abc", "b", null)': null,
        'replaceAll("abc", "b", null1)': null,
        'replaceAll("a", 12, null1)': new Error('evaluate :: fn5 :: replaceAll,2nd,number'),
        'replaceAll("abc", "b", {})': new Error('evaluate :: fn5 :: replaceAll,3rd,object'),
        'replaceAll("abc", "b", object1)': new Error('evaluate :: fn5 :: replaceAll,3rd,object'),
        'replaceAll("abc", "b", #2009-12T12:34#)': new Error('evaluate :: fn5 :: replaceAll,3rd,date'),
        'replaceAll("abc", "b", "abcde")': 'aabcdec',
        'replaceAll("abc", "b", "Hello World!")': 'aHello World!c',
        'replaceAll("abc", "b", "cafeteria")': 'acafeteriac',
        'replaceAll("abc", "b", "cafétéria")': 'acafétériac',
        'replaceAll("cafétéria", "é", "司")': 'caf司t司ria',
        'replaceAll("caféteria", "é", "司")': 'caf司teria',
        'replaceAll("abc", "b", "$€λA")': 'a$€λAc',
        'replaceAll("abc", "b", "寿司")': 'a寿司c',
        'replaceAll("a", 1, "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,number'),
        'replaceAll("a", number1, "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,number'),
        'replaceAll("a", "abc", "a")': 'a',
        'replaceAll("a", "abc", Infinity)': new Error('evaluate :: fn5 :: replaceAll,3rd,number'),
        'replaceAll("a", Infinity, "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,number'),
        'replaceAll("a", "abc", NaN)': new Error('evaluate :: fn5 :: replaceAll,3rd,number'),
        'replaceAll("a", NaN, "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,number'),
        'replaceAll("a", string1, "a")': 'a',
        'replaceAll("a", [], "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,array'),
        'replaceAll("a", array1, "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,array'),
        'replaceAll("a", true, "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,boolean'),
        'replaceAll("a", true1, "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,boolean'),
        'replaceAll("a", unknown, "a")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'replaceAll("a", null, "a")': null,
        'replaceAll(123, null, "a")': new Error('evaluate :: fn5 :: replaceAll,1st,number'),
        'replaceAll("a", "b", null1)': null,
        'replaceAll(12, 34, null1)': new Error('evaluate :: fn5 :: replaceAll,1st,number'),
        'replaceAll(null1, "a", 12)': new Error('evaluate :: fn5 :: replaceAll,3rd,number'),
        'replaceAll("a", null1, "a")': null,
        'replaceAll("a", null1, 12)': new Error('evaluate :: fn5 :: replaceAll,3rd,number'),
        'replaceAll("a", {}, "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,object'),
        'replaceAll("a", object1, "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,object'),
        'replaceAll("a", toDate("2009-12T12:34"), "a")': new Error('evaluate :: fn5 :: replaceAll,2nd,date'),
        'replaceAll("a", "abcde", "a")': 'a',
        'replaceAll("aaa", "a", "a")': 'aaa',
        'replaceAll("aaa", "A", "a")': 'aaa',
        'replaceAll("aaa", "a", "A")': 'AAA',
        'replaceAll("aaa", "a", "")': '',
        'replaceAll("aaa", "a", "b")': 'bbb',
        'replaceAll("aaa", "a", "aba")': 'abaabaaba',
    }));

    describe('locate()', factory({
        'locate(1, "a")': new Error('optimize :: fn5 :: locate,1st,number'),
        'locate(number1, "a")': new Error('evaluate :: fn5 :: locate,1st,number'),
        'locate("abc", "a")': 0,
        'locate(string1, "a")': 0,
        'locate([], "a")': new Error('optimize :: fn5 :: locate,1st,array'),
        'locate(array1, "a")': new Error('evaluate :: fn5 :: locate,1st,array'),
        'locate(true, "a")': new Error('optimize :: fn5 :: locate,1st,boolean'),
        'locate(true1, "a")': new Error('evaluate :: fn5 :: locate,1st,boolean'),
        'locate(unknown, "a")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'locate(null, "a")': null,
        'locate(null1, "a")': null,
        'locate({}, "a")': new Error('optimize :: fn5 :: locate,1st,object'),
        'locate(object1, "a")': new Error('evaluate :: fn5 :: locate,1st,object'),
        'locate(toDate("2009-12T12:34"), "a")': new Error('evaluate :: fn5 :: locate,1st,date'),
        'locate("abcde", "a")': 0,
        'locate("Hello World!", "a")': -1,
        'locate("cafeteria", "a")': 1,
        'locate("cafétéria", "a")': 1,
        'locate("$€λA", "a")': -1,
        'locate("寿司", "a")': -1,
        'locate("a", 1)': new Error('optimize :: fn5 :: locate,2nd,number'),
        'locate("a", number1)': new Error('evaluate :: fn5 :: locate,2nd,number'),
        'locate("a", "abc")': -1,
        'locate("a", string1)': -1,
        'locate("a", [])': new Error('optimize :: fn5 :: locate,2nd,array'),
        'locate("a", array1)': new Error('evaluate :: fn5 :: locate,2nd,array'),
        'locate("a", true)': new Error('optimize :: fn5 :: locate,2nd,boolean'),
        'locate("a", true1)': new Error('evaluate :: fn5 :: locate,2nd,boolean'),
        'locate("a", unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'locate("a", null)': new Error('optimize :: fn5 :: locate,2nd,null'),
        'locate("a", null1)': new Error('evaluate :: fn5 :: locate,2nd,null'),
        'locate("a", {})': new Error('optimize :: fn5 :: locate,2nd,object'),
        'locate("a", object1)': new Error('evaluate :: fn5 :: locate,2nd,object'),
        'locate("a", toDate("2009-12T12:34"))': new Error('evaluate :: fn5 :: locate,2nd,date'),
        'locate("a", "abcde")': -1,
        'locate("a", "Hello World!")': -1,
        'locate("a", "cafeteria")': -1,
        'locate("a", "cafétéria")': -1,
        'locate("a", "$€λA")': -1,
        'locate("a", "寿司")': -1,
        'locate("Hello World!", "World")': 6,
        'locate("Hello World!", Infinity)': new Error('optimize :: fn5 :: locate,2nd,number'),
        'locate("Hello World!", NaN)': new Error('optimize :: fn5 :: locate,2nd,number'),
        'locate("Hello World!", "World", 5)': 6,
        'locate("Hello World!", "World", 6)': 6,
        'locate("Hello World!", "World", 7)': -1,
        'locate("Hello World!", "World", 9)': -1,
        'locate("a😉b", "b", 2)': 2,
        'locate("a😉b", "😉")': 1,
        'locate("नुच्छेद", "छ")': 4,
        'locate("🌷🎁💩😜👍🏳️‍🌈", "🌈")': 8,
        'locate("🌷🎁💩😜👍🏳️‍🌈", "🏳️‍🌈")': 5,
        'locate("Ĺo͂řȩm̅", "ȩ")': 6,
        'locate("뎌쉐", "쉐")': 2,
        'locate("뎌쉐", "ᅰ")': 3,
        'locate("अनुच्छेद", "नु")': 1,
    }));

    describe('regexTest()', factory({
        'regexTest(1, "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest(Infinity, "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest(NaN, "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest(number1, "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest("abc", "a")': true,
        'regexTest(string1, "a")': true,
        'regexTest([], "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest(array1, "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest(true, "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest(true1, "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest(unknown, "a")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'regexTest(null, "a")': false,
        'regexTest(null1, "a")': false,
        'regexTest(null, "")': false,
        'regexTest(null1, "")': false,
        'regexTest({}, "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest(object1, "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest(toDate("2009-12T12:34"), "a")': new Error('evaluate :: fn4 :: regexTest,1st'),
        'regexTest("abcde", "a")': true,
        'regexTest("Hello World!", "a")': false,
        'regexTest("cafeteria", "a")': true,
        'regexTest("cafétéria", "a")': true,
        'regexTest("$€λA", "a")': false,
        'regexTest("寿司", "a")': false,
        'regexTest("a", 1)': new Error('optimize :: fn4 :: regexTest,2nd'),
        'regexTest("a", Infinity)': new Error('optimize :: fn4 :: regexTest,2nd'),
        'regexTest("a", NaN)': new Error('optimize :: fn4 :: regexTest,2nd'),
        'regexTest("a", number1)': new Error('evaluate :: fn4 :: regexTest,2nd'),
        'regexTest("a", "abc")': false,
        'regexTest("a", string1)': false,
        'regexTest("a", [])': new Error('optimize :: fn4 :: regexTest,2nd'),
        'regexTest("a", array1)': new Error('evaluate :: fn4 :: regexTest,2nd'),
        'regexTest("a", true)': new Error('optimize :: fn4 :: regexTest,2nd'),
        'regexTest("a", true1)': new Error('evaluate :: fn4 :: regexTest,2nd'),
        'regexTest("a", unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'regexTest("a", null)': false,
        'regexTest("a", null1)': false,
        'regexTest("a", {})': new Error('optimize :: fn4 :: regexTest,2nd'),
        'regexTest("a", object1)': new Error('evaluate :: fn4 :: regexTest,2nd'),
        'regexTest("a", toDate("2009-12T12:34"))': new Error('evaluate :: fn4 :: regexTest,2nd'),
        'regexTest("a", "abcde")': false,
        'regexTest("a", "Hello World!")': false,
        'regexTest("a", "cafeteria")': false,
        'regexTest("a", "cafétéria")': false,
        'regexTest("a", "$€λA")': false,
        'regexTest("a", "寿司")': false,
        'regexTest("Hello World!", "World")': true,
        'regexTest("Hello World!", "World", 5)': new Error('evaluate :: regexTest3'),
        'regexTest("Hello World!", "World", "5")': new Error('evaluate :: regexTest4'),
        'regexTest("abcde", "a|b")': true,
        'regexTest("abcde", "x|y")': false,
        'regexTest("abcde", "x|y|a")': true,
        'regexTest("abcde", "\c")': true,
        'regexTest("abcde", "\\c")': true,
        'regexTest("abcde", "[c]")': true,
        'regexTest("abcde", "C")': false,
        'regexTest("abcde", "C", "i")': true,
        'regexTest("ab\ncde", "a.+d")': false,
        'regexTest("ab\ncde", "a.+d", "s")': true,

        'regexTest("café", "cafe")': false,
        'regexTest("cafe", "cafe")': true,
        'regexTest("cafE", "cafe")': false,

        'regexTest("Single LINE description.", "line")': false,
        'regexTest("First lines\nsecond line", "line")': true,
        'regexTest("Many spaces before     line", "line")': true,
        'regexTest("Multiple\nline descriptions", "line")': true,
        'regexTest("anchors, links and hyperlinks", "line")': false,
        'regexTest("métier work vocatio", "line")': false,

        'regexTest("Single LINE description.", "line", "i")': true,
        'regexTest("First lines\nsecond line", "line", "i")': true,
        'regexTest("Many spaces before     line", "line", "i")': true,
        'regexTest("Multiple\nline descriptions", "line", "i")': true,
        'regexTest("anchors, links and hyperlinks", "line", "i")': false,
        'regexTest("métier work vocatio", "line", "i")': false,

        'regexTest("Single LINE description.", "^s", "im")': true,
        'regexTest("First lines\nsecond line", "^s", "im")': true,
        'regexTest("Many spaces before     line", "^s", "im")': false,
        'regexTest("Multiple\nline descriptions", "^s", "im")': false,
        'regexTest("anchors, links and hyperlinks", "^s", "im")': false,
        'regexTest("métier work vocatio", "^s", "im")': false,

        'regexTest("abcd", "\\\\w+", "i")': true,

        'regexTest("Single LINE description.", "Single\\\\s*LINE", "i")': true,
        'regexTest("Single LINE description.", "Single" & "\\\\s*LINE", "i")': true,
        'regexTest("abc-dEf", string1 & "-" & string2, "i")': true,
        'regexTest("abc-dEf", string1 & "-" & string2)': false,

        'regexTest("Single LINE description.", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexTest4'),
        'regexTest("First lines\nsecond line", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexTest4'),
        'regexTest("Many spaces before     line", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexTest4'),
        'regexTest("Multiple\nline descriptions", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexTest4'),
        'regexTest("anchors, links and hyperlinks", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexTest4'),
        'regexTest("métier work vocatio", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexTest4'),

        'regexTest("Single LINE description.", "m.*line", "si")': false,
        'regexTest("First lines\nsecond line", "m.*line", "si")': false,
        'regexTest("Many spaces before     line", "m.*line", "si")': true,
        'regexTest("Multiple\nline descriptions", "m.*line", "si")': true,
        'regexTest("anchors, links and hyperlinks", "m.*line", "si")': false,
        'regexTest("métier work vocatio", "m.*line", "si")': false,

        'regexTest("Hi, I\'m just reading about MongoDB -- aunt.arc.tica@example.com", "[a-z0-9_.+-]+@mongodb.com", "i")': false,
        'regexTest("I wanted to concatenate a string", "[a-z0-9_.+-]+@mongodb.com", "i")': false,
        'regexTest("How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com", "[a-z0-9_.+-]+@mongodb.com", "i")': true,
        'regexTest("It\'s just me. I\'m testing.  fred@MongoDB.com", "[a-z0-9_.+-]+@mongodb.com", "i")': true,

        'regexTest("string", "[a-b]", "I")': new Error('evaluate :: regexTest4'),

        'regexTest("\nb", ".+")': true,
        'regexTest("\n", ".+")': false,
        'regexTest("a\nb", ".+")': true,

        'regexTest("abcdef", "^^[0-9_]+$")': false,
        'regexTest("ab7cdef", "^^[0-9_]+$")': false,
        'regexTest("ab_cdef", "^^[0-9_]+$")': false,

        'regexTest("ab", "(?<=a)b")': true,
        'regexTest("b", "(?<=a)b")': false,
        'regexTest("cb", "(?<=a)b")': false,

        'regexTest("ab", "(?<!a)b")': false,
        'regexTest("b", "(?<!a)b")': true,
        'regexTest("cb", "(?<!a)b")': true,

        'regexTest("abc", "\\\\babc")': true,
        'regexTest(" abc", "\\\\babc")': true,
        'regexTest("dabc", "\\\\babc")': false,
        'regexTest("abc", "abc\\\\b")': true,
        'regexTest("abc ", "abc\\\\b")': true,
        'regexTest("abcd", "abc\\\\b")': false,
        'regexTest("abc", "\\\\babc\\\\b")': true,
        'regexTest("abcx", "\\\\babc\\\\b")': false,
        'regexTest("vabc", "\\\\babc\\\\b")': false,
        'regexTest(" abc ", "\\\\babc\\\\b")': true,
        'regexTest(" abc:", "\\\\babc\\\\b")': true,

        'regexTest("abc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc")': true,
        'regexTest(" abc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc")': true,
        'regexTest("dabc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc")': false,
        'regexTest("abc", "abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': true,
        'regexTest("abc ", "abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': true,
        'regexTest("abcd", "abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': false,
        'regexTest("abc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': true,
        'regexTest("abcx", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': false,
        'regexTest("vabc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': false,
        'regexTest(" abc ", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': true,
        'regexTest(" abc:", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': true,

        'regexTest("привет", "\\\\w+")': false,
        'regexTest("приветworld", "^\\\\w+$")': false,
        'regexTest(" привет", " [а-я]+")': true,
        'regexTest("привет", "[а-я]+")': true,
        'regexTest("привет", "^[а-я]+")': true,

        'regexTest("a", /a/)': true,
        'regexTest("zyzzyva", /a/)': true,
        'regexTest("aa", /a+/)': true,
        'regexTest("ab", /(a+|b)+/)': true,
        'regexTest("xabcdx", /ab|cd/)': true,
        'regexTest("hello\ngoodbye\n", /h.*od?/)': true,
        'regexTest("hello\ngoodbye\n", /h.*o/)': true,
        'regexTest("goodbye\nhello\n", /h.*o/)': true,
        'regexTest("hello world", /h.*o/)': true,
        'regexTest("othello, world", /h.*o/)': true,
        'regexTest("aaaaaaa", /[^\\s\\S]/)': false,
        'regexTest("aaaaaaa", /a/)': true,
        'regexTest("aaaaaaa", /a*/)': true,
        'regexTest("", /a*/)': true,
        'regexTest("cab", /a/)': true,
        'regexTest("cab", /a*b/)': true,
        'regexTest("x", /((((((((((((((((((((x))))))))))))))))))))/)': true,
        'regexTest("xxxabcdxxx", /[abcd]/)': true,
        'regexTest("xxxabcdxxx", /[^x]/)': true,
        'regexTest("xxxabcdxxx", /[abcd]+/)': true,
        'regexTest("xxxabcdxxx", /[^x]+/)': true,
        'regexTest("fo", /(fo|foo)/)': true,
        'regexTest("foo", /(foo|fo)/)': true,
        'regexTest("aA", /aa/)': false,
        'regexTest("Aa", /a/)': true,
        'regexTest("A", /a/)': false,
        'regexTest("abc", /ABC/)': false,
        'regexTest("XABCY", /abc/)': false,
        'regexTest("xabcy", /ABC/)': false,
        'regexTest("foo", /foo|bar|[A-Z]/)': true,
        'regexTest("foo", /^(foo|bar|[A-Z])/)': true,
        'regexTest("foo", /(foo|bar|[A-Z])$/)': true,
        'regexTest("foo", /^(foo|bar|[A-Z])$/)': true,
        'regexTest("bar", /^(foo|bar|[A-Z])$/)': true,
        'regexTest("X", /^(foo|bar|[A-Z])$/)': true,
        'regexTest("XY", /^(foo|bar|[A-Z])$/)': false,
        'regexTest("fo", /^(fo|foo)$/)': true,
        'regexTest("foo", /^(fo|foo)$/)': true,
        'regexTest("fo", /^^(fo|foo)$/)': true,
        'regexTest("foo", /^^(fo|foo)$/)': true,
        'regexTest("", /^$/)': true,
        'regexTest("x", /^$/)': false,
        'regexTest("", /^^$/)': true,
        'regexTest("", /^$$/)': true,
        'regexTest("x", /^^$/)': false,
        'regexTest("x", /^$$/)': false,
        'regexTest("", /^^$$/)': true,
        'regexTest("x", /^^$$/)': false,
        'regexTest("", /^^^^^^^^$$$$$$$$/)': true,
        'regexTest("x", /^/)': true,
        'regexTest("x", /$/)': true,
        'regexTest("nofoo foo that", /\\bfoo\\b/)': true,
        'regexTest("faoa x", /a\\b/)': true,
        'regexTest("bar x", /\\bbar/)': true,
        'regexTest("foo\nbar x", /\\bbar/)': true,
        'regexTest("foobar", /bar\\b/)': true,
        'regexTest("foobar\nxxx", /bar\\b/)': true,
        'regexTest("foo", /(foo|bar|[A-Z])\\b/)': true,
        'regexTest("foo\n", /(foo|bar|[A-Z])\\b/)': true,
        'regexTest("", /\\b/)': false,
        'regexTest("x", /\\b/)': true,
        'regexTest("foo", /\\b(foo|bar|[A-Z])/)': true,
        'regexTest("X", /\\b(foo|bar|[A-Z])\\b/)': true,
        'regexTest("XY", /\\b(foo|bar|[A-Z])\\b/)': false,
        'regexTest("bar", /\\b(foo|bar|[A-Z])\\b/)': true,
        'regexTest("foo", /\\b(foo|bar|[A-Z])\\b/)': true,
        'regexTest("foo\n", /\\b(foo|bar|[A-Z])\\b/)': true,
        'regexTest("ffoo bbar N x", /\\b(foo|bar|[A-Z])\\b/)': true,
        'regexTest("fo", /\\b(fo|foo)\\b/)': true,
        'regexTest("foo", /\\b(fo|foo)\\b/)': true,
        'regexTest("", /\\b\\b/)': false,
        'regexTest("x", /\\b\\b/)': true,
        'regexTest("", /\\b$/)': false,
        'regexTest("x", /\\b$/)': true,
        'regexTest("y x", /\\b$/)': true,
        'regexTest("x", /\\b.$/)': true,
        'regexTest("fo", /^\\b(fo|foo)\\b/)': true,
        'regexTest("foo", /^\\b(fo|foo)\\b/)': true,
        'regexTest("", /^\\b/)': false,
        'regexTest("x", /^\\b/)': true,
        'regexTest("", /^\\b\\b/)': false,
        'regexTest("x", /^\\b\\b/)': true,
        'regexTest("", /^\\b$/)': false,
        'regexTest("x", /^\\b$/)': false,
        'regexTest("x", /^\\b.$/)': true,
        'regexTest("x", /^\\b.\\b$/)': true,
        'regexTest("", /^^^^^^^^\\b$$$$$$$/)': false,
        'regexTest("x", /^^^^^^^^\\b.$$$$$$/)': true,
        'regexTest("x", /^^^^^^^^\\b$$$$$$$/)': false,
        'regexTest("n foo xfoox that", /\\Bfoo\\B/)': true,
        'regexTest("faoa x", /a\\B/)': true,
        'regexTest("bar x", /\\Bbar/)': false,
        'regexTest("foo\nbar x", /\\Bbar/)': false,
        'regexTest("foobar", /bar\\B/)': false,
        'regexTest("foobar\nxxx", /bar\\B/)': false,
        'regexTest("foox", /(foo|bar|[A-Z])\\B/)': true,
        'regexTest("foo\n", /(foo|bar|[A-Z])\\B/)': false,
        'regexTest("", /\\B/)': true,
        'regexTest("x", /\\B/)': false,
        'regexTest("foo", /\\B(foo|bar|[A-Z])/)': false,
        'regexTest("xXy", /\\B(foo|bar|[A-Z])\\B/)': true,
        'regexTest("XY", /\\B(foo|bar|[A-Z])\\B/)': false,
        'regexTest("XYZ", /\\B(foo|bar|[A-Z])\\B/)': true,
        'regexTest("abara", /\\B(foo|bar|[A-Z])\\B/)': true,
        'regexTest("xfoo_", /\\B(foo|bar|[A-Z])\\B/)': true,
        'regexTest("xfoo\n", /\\B(foo|bar|[A-Z])\\B/)': false,
        'regexTest("foo bar vNx", /\\B(foo|bar|[A-Z])\\B/)': true,
        'regexTest("xfoo", /\\B(fo|foo)\\B/)': true,
        'regexTest("xfooo", /\\B(foo|fo)\\B/)': true,
        'regexTest("", /\\B\\B/)': true,
        'regexTest("x", /\\B\\B/)': false,
        'regexTest("", /\\B$/)': true,
        'regexTest("x", /\\B$/)': false,
        'regexTest("y x", /\\B$/)': false,
        'regexTest("x", /\\B.$/)': false,
        'regexTest("fo", /^\\B(fo|foo)\\B/)': false,
        'regexTest("foo", /^\\B(fo|foo)\\B/)': false,
        'regexTest("", /^\\B/)': true,
        'regexTest("x", /^\\B/)': false,
        'regexTest("", /^\\B\\B/)': true,
        'regexTest("x", /^\\B\\B/)': false,
        'regexTest("", /^\\B$/)': true,
        'regexTest("x", /^\\B$/)': false,
        'regexTest("x", /^\\B.$/)': false,
        'regexTest("x", /^\\B.\\B$/)': false,
        'regexTest("", /^^^^^^^^\\B$$$$$$$/)': true,
        'regexTest("x", /^^^^^^^^\\B.$$$$$$/)': false,
        'regexTest("x", /^^^^^^^^\\B$$$$$$$/)': false,
        'regexTest("x", /\\bx\\b/)': true,
        'regexTest("x>", /\\bx\\b/)': true,
        'regexTest("<x", /\\bx\\b/)': true,
        'regexTest("<x>", /\\bx\\b/)': true,
        'regexTest("ax", /\\bx\\b/)': false,
        'regexTest("xb", /\\bx\\b/)': false,
        'regexTest("axb", /\\bx\\b/)': false,
        'regexTest("«x", /\\bx\\b/)': true,
        'regexTest("x»", /\\bx\\b/)': true,
        'regexTest("«x»", /\\bx\\b/)': true,
        'regexTest("áxβ", /\\bx\\b/)': true,
        'regexTest("", /^$^$/)': true,
        'regexTest("", /^$^/)': true,
        'regexTest("", /$^$/)': true,
        'regexTest("x", /^$^$/)': false,
        'regexTest("x", /^$^/)': false,
        'regexTest("x", /$^$/)': false,
        'regexTest("x\ny", /^$^$/)': false,
        'regexTest("x\ny", /^$^/)': false,
        'regexTest("x\ny", /$^$/)': false,
        'regexTest("x\n\ny", /^$^$/)': false,
        'regexTest("x\n\ny", /^$^/)': false,
        'regexTest("x\n\ny", /$^$/)': false,
        'regexTest("foo$bar", /^(foo\\$)$/)': false,
        'regexTest("foo$bar", /(foo\\$)/)': true,
        'regexTest("abc", /^...$/)': true,
        'regexTest("\xe6\x9c\xac", /^\xe6\x9c\xac$/)': true,
        'regexTest("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e", /^...$/)': false,
        'regexTest(".\xe6\x9c\xac.", /^...$/)': false,
        'regexTest("xfooo", /\\B(fo|foo)\\B/)': true,
        'regexTest("foo", /(fo|foo)/)': true,
        'regexTest("abc123", /[^0-9]+/)': true,
        'regexTest("abc123²³¼½¾₀₉", /\\p{Nd}+/)': true,
        'regexTest("abc123²³¼½¾₀₉", /\\p{N}+/)': true,
        'regexTest("abc123", /\\p{Any}+/)': true,
        'regexTest("@AaB", /[@-A]+/)': true,
        'regexTest("aAzZ", /[A-Z]+/)': true,
        'regexTest("acegikmoqsuwyACEGIKMOQSUWY", /[acegikmoqsuwy]+/)': true,
        'regexTest("abcdef", /^abc/)': true,
        'regexTest("aabcdef", /^abc/)': false,
        'regexTest("abcdef", /^[ay]*[bx]+c/)': true,
        'regexTest("aabcdef", /^[ay]*[bx]+c/)': true,
        'regexTest("abcdef", /def$/)': true,
        'regexTest("abcdeff", /def$/)': false,
        'regexTest("abcdef", /d[ex][fy]$/)': true,
        'regexTest("abcdeff", /d[ex][fy]$/)': false,
        'regexTest("abcdef", /[dz][ex][fy]$/)': true,
        'regexTest("abcdeff", /[dz][ex][fy]$/)': false,
        'regexTest("a", /^/)': true,
        'regexTest("a", /^^/)': true,
        'regexTest("a", /ab*/)': true,
        'regexTest("Inc.", /\\w*I\\w*/)': true,
        'regexTest("aaa", /(?:|a)*/)': true,
        'regexTest("aaa", /(?:|a)+/)': true,
    }));

    describe('regexMatch()', factory({
        'regexMatch(1, "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch(number1, "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch("abc", "a")': { match: 'a', idx: 0, captures: [] },
        'regexMatch(Infinity, "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch("abc", Infinity)': new Error('optimize :: fn4 :: regexMatch,2nd'),
        'regexMatch(NaN, "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch("abc", NaN)': new Error('optimize :: fn4 :: regexMatch,2nd'),
        'regexMatch(string1, "a")': { match: 'a', idx: 0, captures: [] },
        'regexMatch([], "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch(array1, "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch(true, "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch(true1, "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch(unknown, "a")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'regexMatch(null, "a")': null,
        'regexMatch(null1, "a")': null,
        'regexMatch(null, "")': null,
        'regexMatch(null1, "")': null,
        'regexMatch({}, "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch(object1, "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch(toDate("2009-12T12:34"), "a")': new Error('evaluate :: fn4 :: regexMatch,1st'),
        'regexMatch("abcde", "a")': { match: 'a', idx: 0, captures: [] },
        'regexMatch("Hello World!", "a")': null,
        'regexMatch("cafeteria", "a")': { match: 'a', idx: 1, captures: [] },
        'regexMatch("cafétéria", "a")': { match: 'a', idx: 1, captures: [] },
        'regexMatch("$€λA", "a")': null,
        'regexMatch("寿司", "a")': null,
        'regexMatch("a", 1)': new Error('optimize :: fn4 :: regexMatch,2nd'),
        'regexMatch("a", number1)': new Error('evaluate :: fn4 :: regexMatch,2nd'),
        'regexMatch("a", "abc")': null,
        'regexMatch("a", string1)': null,
        'regexMatch("a", [])': new Error('optimize :: fn4 :: regexMatch,2nd'),
        'regexMatch("a", array1)': new Error('evaluate :: fn4 :: regexMatch,2nd'),
        'regexMatch("a", true)': new Error('optimize :: fn4 :: regexMatch,2nd'),
        'regexMatch("a", true1)': new Error('evaluate :: fn4 :: regexMatch,2nd'),
        'regexMatch("a", unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'regexMatch("a", null)': null,
        'regexMatch("a", null1)': null,
        'regexMatch("a", {})': new Error('optimize :: fn4 :: regexMatch,2nd'),
        'regexMatch("a", object1)': new Error('evaluate :: fn4 :: regexMatch,2nd'),
        'regexMatch("a", toDate("2009-12T12:34"))': new Error('evaluate :: fn4 :: regexMatch,2nd'),
        'regexMatch("a", "abcde")': null,
        'regexMatch("a", "Hello World!")': null,
        'regexMatch("a", "cafeteria")': null,
        'regexMatch("a", "cafétéria")': null,
        'regexMatch("a", "$€λA")': null,
        'regexMatch("a", "寿司")': null,
        'regexMatch("Hello World!", "World")': { match: 'World', idx: 6, captures: [] },
        'regexMatch("Hello World!", "World", 5)': new Error('evaluate :: regexMatch3'),
        'regexMatch("Hello World!", "World", "5")': new Error('evaluate :: regexMatch4'),
        'regexMatch("abcde", "a|b")': { match: 'a', idx: 0, captures: [] },
        'regexMatch("abcde", "x|y")': null,
        'regexMatch("abcde", "x|y|a")': { match: 'a', idx: 0, captures: [] },
        'regexMatch("abcde", "\c")': { match: 'c', idx: 2, captures: [] },
        'regexMatch("abcde", "\\c")': { match: 'c', idx: 2, captures: [] },
        'regexMatch("abcde", "[c]")': { match: 'c', idx: 2, captures: [] },
        'regexMatch("abcde", "C")': null,
        'regexMatch("abcde", "C", "i")': { match: 'c', idx: 2, captures: [] },
        'regexMatch("ab\ncde", "a.+d")': null,
        'regexMatch("ab\ncde", "a.+d", "s")': { match: 'ab\ncd', idx: 0, captures: [] },
        'regexMatch("ab\ncde", "a(.+)d", "s")': { match: 'ab\ncd', idx: 0, captures: ['b\nc'] },
        'regexMatch("ab\ncde", "a(.+)(d)", "s")': { match: 'ab\ncd', idx: 0, captures: ['b\nc', 'd'] },

        'regexMatch("café", "cafe")': null,
        'regexMatch("cafe", "cafe")': { match: 'cafe', idx: 0, captures: [] },
        'regexMatch("cafE", "cafe")': null,

        'regexMatch("Single LINE description.", "line")': null,
        'regexMatch("First lines\nsecond line", "line")': { match: 'line', idx: 6, captures: [] },
        'regexMatch("Many spaces before     line", "line")': { match: 'line', idx: 23, captures: [] },
        'regexMatch("Multiple\nline descriptions", "line")': { match: 'line', idx: 9, captures: [] },
        'regexMatch("anchors, links and hyperlinks", "line")': null,
        'regexMatch("métier work vocatio", "line")': null,

        'regexMatch("Single LINE description.", "line", "i")': { match: 'LINE', idx: 7, captures: [] },
        'regexMatch("First lines\nsecond line", "line", "i")': { match: 'line', idx: 6, captures: [] },
        'regexMatch("Many spaces before     line", "line", "i")': { match: 'line', idx: 23, captures: [] },
        'regexMatch("Multiple\nline descriptions", "line", "i")': { match: 'line', idx: 9, captures: [] },
        'regexMatch("anchors, links and hyperlinks", "line", "i")': null,
        'regexMatch("métier work vocatio", "line", "i")': null,

        'regexMatch("Single LINE description.", "^s", "im")': { match: 'S', idx: 0, captures: [] },
        'regexMatch("First lines\nsecond line", "^s", "im")': { match: 's', idx: 12, captures: [] },
        'regexMatch("Many spaces before     line", "^s", "im")': null,
        'regexMatch("Multiple\nline descriptions", "^s", "im")': null,
        'regexMatch("anchors, links and hyperlinks", "^s", "im")': null,
        'regexMatch("métier work vocatio", "^s", "im")': null,

        'regexMatch("abcd", "\\\\w+", "i")': { match: 'abcd', idx: 0, captures: [] },

        'regexMatch("Single LINE description.", "Single\\\\s*LINE", "i")': { match: 'Single LINE', idx: 0, captures: [] },
        'regexMatch("Single LINE description.", "Single" & "\\\\s*LINE", "i")': { match: 'Single LINE', idx: 0, captures: [] },
        'regexMatch("abc-dEf", string1 & "-" & string2, "i")': { match: 'abc-dEf', idx: 0, captures: [] },
        'regexMatch("abc-dEf", string1 & "-" & string2)': null,

        'regexMatch("Single LINE description.", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatch4'),
        'regexMatch("First lines\nsecond line", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatch4'),
        'regexMatch("Many spaces before     line", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatch4'),
        'regexMatch("Multiple\nline descriptions", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatch4'),
        'regexMatch("anchors, links and hyperlinks", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatch4'),
        'regexMatch("métier work vocatio", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatch4'),

        'regexMatch("Single LINE description.", "m.*line", "si")': null,
        'regexMatch("First lines\nsecond line", "m.*line", "si")': null,
        'regexMatch("Many spaces before     line", "m.*line", "si")': { match: 'Many spaces before     line', idx: 0, captures: [] },
        'regexMatch("Multiple\nline descriptions", "m.*line", "si")': { match: 'Multiple\nline', idx: 0, captures: [] },
        'regexMatch("anchors, links and hyperlinks", "m.*line", "si")': null,
        'regexMatch("métier work vocatio", "m.*line", "si")': null,

        'regexMatch("Hi, I\'m just reading about MongoDB -- aunt.arc.tica@example.com", "[a-z0-9_.+-]+@mongodb.com", "i")': null,
        'regexMatch("I wanted to concatenate a string", "[a-z0-9_.+-]+@mongodb.com", "i")': null,
        'regexMatch("How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com", "[a-z0-9_.+-]+@mongodb.com", "i")': { match: 'cam@mongodb.com', idx: 56, captures: [] },
        'regexMatch("It\'s just me. I\'m testing.  fred@MongoDB.com", "[a-z0-9_.+-]+@mongodb.com", "i")': { match: 'fred@MongoDB.com', idx: 28, captures: [] },

        'regexMatch("string", "[a-b]", "I")': new Error('evaluate :: regexMatch4'),

        'regexMatch("a𝌆b", "a.b")': new DifferentResults({
            mongo: { match: 'a𝌆b', idx: 0, captures: [] },
            php: null,
            node: { match: 'a𝌆b', idx: 0, captures: [] },
        }),

        'regexMatch("\nb", ".+")': { match: 'b', idx: 1, captures: [] },
        'regexMatch("\n", ".+")': null,
        'regexMatch("a\nb", ".+")': { match: 'a', idx: 0, captures: [] },
        'regexMatch("a\nb", "(.+)")': { match: 'a', idx: 0, captures: ['a'] },

        'regexMatch("abcdef", "^^[0-9_]+$")': null,
        'regexMatch("ab7cdef", "^^[0-9_]+$")': null,
        'regexMatch("ab_cdef", "^^[0-9_]+$")': null,

        'regexMatch("ab", "(?<=a)b")': { match: 'b', idx: 1, captures: [] },
        'regexMatch("b", "(?<=a)b")': null,
        'regexMatch("cb", "(?<=a)b")': null,

        'regexMatch("ab", "(?<!a)b")': null,
        'regexMatch("b", "(?<!a)b")': { match: 'b', idx: 0, captures: [] },
        'regexMatch("cb", "(?<!a)b")': { match: 'b', idx: 1, captures: [] },

        'regexMatch("abc", "\\\\babc")': { match: 'abc', idx: 0, captures: [] },
        'regexMatch(" abc", "\\\\babc")': { match: 'abc', idx: 1, captures: [] },
        'regexMatch("dabc", "\\\\babc")': null,
        'regexMatch("abc", "abc\\\\b")': { match: 'abc', idx: 0, captures: [] },
        'regexMatch("abc ", "abc\\\\b")': { match: 'abc', idx: 0, captures: [] },
        'regexMatch("abcd", "abc\\\\b")': null,
        'regexMatch("abc", "\\\\babc\\\\b")': { match: 'abc', idx: 0, captures: [] },
        'regexMatch("abcx", "\\\\babc\\\\b")': null,
        'regexMatch("vabc", "\\\\babc\\\\b")': null,
        'regexMatch(" abc ", "\\\\babc\\\\b")': { match: 'abc', idx: 1, captures: [] },
        'regexMatch(" abc:", "\\\\babc\\\\b")': { match: 'abc', idx: 1, captures: [] },

        'regexMatch("abc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc")': { match: 'abc', idx: 0, captures: [] },
        'regexMatch(" abc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc")': { match: 'abc', idx: 1, captures: [] },
        'regexMatch("dabc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc")': null,
        'regexMatch("abc", "abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': { match: 'abc', idx: 0, captures: [] },
        'regexMatch("abc ", "abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': { match: 'abc', idx: 0, captures: [] },
        'regexMatch("abcd", "abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': null,
        'regexMatch("abc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': { match: 'abc', idx: 0, captures: [] },
        'regexMatch("abcx", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': null,
        'regexMatch("vabc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': null,
        'regexMatch(" abc ", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': { match: 'abc', idx: 1, captures: [] },
        'regexMatch(" abc:", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': { match: 'abc', idx: 1, captures: [] },

        'regexMatch("ac", "(a)(b)?(c)")': { match: 'ac', idx: 0, captures: ['a', null, 'c'] },

        'regexMatch("привет", "\\\\w+")': null,
        'regexMatch("привет", /[а-я]+/)': null,
        'regexMatch("приветworld", "^\\\\w+$")': null,
        'regexMatch("приветworld", "^[а-я]+\\\\w+$")': { match: 'приветworld', idx: 0, captures: [] },
        'regexMatch("ПрИвЕтworld", "^[а-я]+\\\\w+$", "i")': { match: 'ПрИвЕтworld', idx: 0, captures: [] },
        'regexMatch("привет, world", /(\\w+)/)': { match: 'world', idx: 8, captures: ['world'] },
        'regexMatch("привет, world", "((\\\\w+))")': { match: 'world', idx: 8, captures: ['world', 'world'] },

        'regexMatch("cafétéria", "i")': { match: 'i', idx: 7, captures: [] },
        'regexMatch("йод", "д")': { match: 'д', idx: 2, captures: [] },
        'regexMatch("ёлка", "к")': { match: 'к', idx: 2, captures: [] },

        'regexMatch("ёлка", "к").captures': [],
    }));

    describe('regexMatchAll()', factory({
        'regexMatchAll(1, "a")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll(number1, "a")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll("abc", "a")': [{ match: 'a', idx: 0, captures: [] }],
        'regexMatchAll(string1, "a")': [{ match: 'a', idx: 0, captures: [] }],
        'regexMatchAll([], "a")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll(array1, "a")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll(true, "a")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll(true1, "a")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll(unknown, "a")': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'regexMatchAll(null, "a")': [],
        'regexMatchAll(null1, "a")': [],
        'regexMatchAll(null, "")': [],
        'regexMatchAll(null1, "")': [],
        'regexMatchAll({}, "a")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll(object1, "a")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll(toDate("2009-12T12:34"), "a")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll("abcde", "a")': [{ match: 'a', idx: 0, captures: [] }],
        'regexMatchAll("Hello World!", "a")': [],
        'regexMatchAll("cafeteria", "a")': [{ match: 'a', idx: 1, captures: [] }, { match: 'a', idx: 8, captures: [] }],
        'regexMatchAll("cafétéria", "a")': [{ match: 'a', idx: 1, captures: [] }, { match: 'a', idx: 8, captures: [] }],
        'regexMatchAll("$€λA", "a")': [],
        'regexMatchAll("寿司", "a")': [],
        'regexMatchAll("a", 1)': new Error('optimize :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", number1)': new Error('evaluate :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", "abc")': [],
        'regexMatchAll(Infinity, "abc")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll("a", Infinity)': new Error('optimize :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll(NaN, "abc")': new Error('evaluate :: fn4 :: regexMatchAll,1st'),
        'regexMatchAll("a", NaN)': new Error('optimize :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", string1)': [],
        'regexMatchAll("a", [])': new Error('optimize :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", array1)': new Error('evaluate :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", true)': new Error('optimize :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", true1)': new Error('evaluate :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'regexMatchAll("a", null)': [],
        'regexMatchAll("a", null1)': [],
        'regexMatchAll("a", {})': new Error('optimize :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", object1)': new Error('evaluate :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", toDate("2009-12T12:34"))': new Error('evaluate :: fn4 :: regexMatchAll,2nd'),
        'regexMatchAll("a", "abcde")': [],
        'regexMatchAll("a", "Hello World!")': [],
        'regexMatchAll("a", "cafeteria")': [],
        'regexMatchAll("a", "cafétéria")': [],
        'regexMatchAll("a", "$€λA")': [],
        'regexMatchAll("a", "寿司")': [],
        'regexMatchAll("Hello World!", "World")': [{ match: 'World', idx: 6, captures: [] }],
        'regexMatchAll("Hello World!", "World", 5)': new Error('evaluate :: regexMatchAll3'),
        'regexMatchAll("Hello World!", "World", "5")': new Error('evaluate :: regexMatchAll4'),
        'regexMatchAll("abcde", "a|b")': [{ match: 'a', idx: 0, captures: [] }, { match: 'b', idx: 1, captures: [] }],
        'regexMatchAll("abcde", "(a|b)")': [{ match: 'a', idx: 0, captures: ['a'] }, { match: 'b', idx: 1, captures: ['b'] }],
        'regexMatchAll("abcde", "x|y")': [],
        'regexMatchAll("abcde", "x|y|a")': [{ match: 'a', idx: 0, captures: [] }],
        'regexMatchAll("abcde", "\c")': [{ match: 'c', idx: 2, captures: [] }],
        'regexMatchAll("abcde", "\\c")': [{ match: 'c', idx: 2, captures: [] }],
        'regexMatchAll("abcde", "[c]")': [{ match: 'c', idx: 2, captures: [] }],
        'regexMatchAll("abcde", "C")': [],
        'regexMatchAll("abcde", "C", "i")': [{ match: 'c', idx: 2, captures: [] }],
        'regexMatchAll("ab\ncde", "a.+d")': [],
        'regexMatchAll("ab\ncde", "a.+d", "s")': [{ match: 'ab\ncd', idx: 0, captures: [] }],
        'regexMatchAll("ab\ncde", "a(.+)d", "s")': [{ match: 'ab\ncd', idx: 0, captures: ['b\nc'] }],
        'regexMatchAll("ab\ncde", "a(.+)(d)", "s")': [{ match: 'ab\ncd', idx: 0, captures: ['b\nc', 'd'] }],

        'regexMatchAll("café", "cafe")': [],
        'regexMatchAll("cafe", "cafe")': [{ match: 'cafe', idx: 0, captures: [] }],
        'regexMatchAll("cafE", "cafe")': [],

        'regexMatchAll("Single LINE description.", "line")': [],
        'regexMatchAll("First lines\nsecond line", "line")': [{ match: 'line', idx: 6, captures: [] }, { match: 'line', idx: 19, captures: [] }],
        'regexMatchAll("Many spaces before     line", "line")': [{ match: 'line', idx: 23, captures: [] }],
        'regexMatchAll("Multiple\nline descriptions", "line")': [{ match: 'line', idx: 9, captures: [] }],
        'regexMatchAll("anchors, links and hyperlinks", "line")': [],
        'regexMatchAll("métier work vocatio", "line")': [],

        'regexMatchAll("Single LINE description.", "line", "i")': [{ match: 'LINE', idx: 7, captures: [] }],
        'regexMatchAll("First lines\nsecond line", "line", "i")': [{ match: 'line', idx: 6, captures: [] }, { match: 'line', idx: 19, captures: [] }],
        'regexMatchAll("Many spaces before     line", "line", "i")': [{ match: 'line', idx: 23, captures: [] }],
        'regexMatchAll("Multiple\nline descriptions", "line", "i")': [{ match: 'line', idx: 9, captures: [] }],
        'regexMatchAll("anchors, links and hyperlinks", "line", "i")': [],
        'regexMatchAll("métier work vocatio", "line", "i")': [],

        'regexMatchAll("Single LINE description.", "^s", "im")': [{ match: 'S', idx: 0, captures: [] }],
        'regexMatchAll("First lines\nsecond line", "^s", "im")': [{ match: 's', idx: 12, captures: [] }],
        'regexMatchAll("Many spaces before     line", "^s", "im")': [],
        'regexMatchAll("Multiple\nline descriptions", "^s", "im")': [],
        'regexMatchAll("anchors, links and hyperlinks", "^s", "im")': [],
        'regexMatchAll("métier work vocatio", "^s", "im")': [],

        'regexMatchAll("abcd", "\\\\w+", "i")': [{ match: 'abcd', idx: 0, captures: [] }],

        'regexMatchAll("Single LINE description.", "Single\\\\s*LINE", "i")': [{ match: 'Single LINE', idx: 0, captures: [] }],
        'regexMatchAll("Single LINE description.", "Single" & "\\\\s*LINE", "i")': [{ match: 'Single LINE', idx: 0, captures: [] }],
        'regexMatchAll("abc-dEf", string1 & "-" & string2, "i")': [{ match: 'abc-dEf', idx: 0, captures: [] }],
        'regexMatchAll("abc-dEf", string1 & "-" & string2)': [],

        'regexMatchAll("Single LINE description.", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatchAll4'),
        'regexMatchAll("First lines\nsecond line", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatchAll4'),
        'regexMatchAll("Many spaces before     line", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatchAll4'),
        'regexMatchAll("Multiple\nline descriptions", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatchAll4'),
        'regexMatchAll("anchors, links and hyperlinks", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatchAll4'),
        'regexMatchAll("métier work vocatio", "lin(e|k) # matches line or link", "x")': new Error('evaluate :: regexMatchAll4'),

        'regexMatchAll("Single LINE description.", "m.*line", "si")': [],
        'regexMatchAll("First lines\nsecond line", "m.*line", "si")': [],
        'regexMatchAll("Many spaces before     line", "m.*line", "si")': [{ match: 'Many spaces before     line', idx: 0, captures: [] }],
        'regexMatchAll("Multiple\nline descriptions", "m.*line", "si")': [{ match: 'Multiple\nline', idx: 0, captures: [] }],
        'regexMatchAll("anchors, links and hyperlinks", "m.*line", "si")': [],
        'regexMatchAll("métier work vocatio", "m.*line", "si")': [],

        'regexMatchAll("Hi, I\'m just reading about MongoDB -- aunt.arc.tica@example.com", "[a-z0-9_.+-]+@mongodb.com", "i")': [],
        'regexMatchAll("I wanted to concatenate a string", "[a-z0-9_.+-]+@mongodb.com", "i")': [],
        'regexMatchAll("How do I convert a date to string? Contact me at either cam@mongodb.com or c.dia@mongodb.com", "[a-z0-9_.+-]+@mongodb.com", "i")': [{ match: 'cam@mongodb.com', idx: 56, captures: [] }, { match: 'c.dia@mongodb.com', idx: 75, captures: [] }],
        'regexMatchAll("It\'s just me. I\'m testing.  fred@MongoDB.com", "[a-z0-9_.+-]+@mongodb.com", "i")': [{ match: 'fred@MongoDB.com', idx: 28, captures: [] }],

        'regexMatchAll("string", "[a-b]", "I")': new Error('evaluate :: regexMatchAll4'),

        'regexMatchAll("a𝌆b", "a.b")': [{ match: 'a𝌆b', idx: 0, captures: [] }],

        'regexMatchAll("\nb", ".+")': [{ match: 'b', idx: 1, captures: [] }],
        'regexMatchAll("\n", ".+")': [],
        'regexMatchAll("a\nb", ".+")': [{ match: 'a', idx: 0, captures: [] }, { match: 'b', idx: 2, captures: [] }],
        'regexMatchAll("a\nb", "(.+)")': [{ match: 'a', idx: 0, captures: ['a'] }, { match: 'b', idx: 2, captures: ['b'] }],

        'regexMatchAll("abcdef", "^^[0-9_]+$")': [],
        'regexMatchAll("ab7cdef", "^^[0-9_]+$")': [],
        'regexMatchAll("ab_cdef", "^^[0-9_]+$")': [],

        'regexMatchAll("ab", "(?<=a)b")': [{ match: 'b', idx: 1, captures: [] }],
        'regexMatchAll("b", "(?<=a)b")': [],
        'regexMatchAll("cb", "(?<=a)b")': [],

        'regexMatchAll("ab", "(?<!a)b")': [],
        'regexMatchAll("b", "(?<!a)b")': [{ match: 'b', idx: 0, captures: [] }],
        'regexMatchAll("cb", "(?<!a)b")': [{ match: 'b', idx: 1, captures: [] }],

        'regexMatchAll("abc", "\\\\babc")': [{ match: 'abc', idx: 0, captures: [] }],
        'regexMatchAll(" abc", "\\\\babc")': [{ match: 'abc', idx: 1, captures: [] }],
        'regexMatchAll("dabc", "\\\\babc")': [],
        'regexMatchAll("abc", "abc\\\\b")': [{ match: 'abc', idx: 0, captures: [] }],
        'regexMatchAll("abc ", "abc\\\\b")': [{ match: 'abc', idx: 0, captures: [] }],
        'regexMatchAll("abcd", "abc\\\\b")': [],
        'regexMatchAll("abc", "\\\\babc\\\\b")': [{ match: 'abc', idx: 0, captures: [] }],
        'regexMatchAll("abcx", "\\\\babc\\\\b")': [],
        'regexMatchAll("vabc", "\\\\babc\\\\b")': [],
        'regexMatchAll(" abc ", "\\\\babc\\\\b")': [{ match: 'abc', idx: 1, captures: [] }],
        'regexMatchAll(" abc:", "\\\\babc\\\\b")': [{ match: 'abc', idx: 1, captures: [] }],

        'regexMatchAll("abc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc")': [{ match: 'abc', idx: 0, captures: [] }],
        'regexMatchAll(" abc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc")': [{ match: 'abc', idx: 1, captures: [] }],
        'regexMatchAll("dabc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc")': [],
        'regexMatchAll("abc", "abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': [{ match: 'abc', idx: 0, captures: [] }],
        'regexMatchAll("abc ", "abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': [{ match: 'abc', idx: 0, captures: [] }],
        'regexMatchAll("abcd", "abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': [],
        'regexMatchAll("abc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': [{ match: 'abc', idx: 0, captures: [] }],
        'regexMatchAll("abcx", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': [],
        'regexMatchAll("vabc", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': [],
        'regexMatchAll(" abc ", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': [{ match: 'abc', idx: 1, captures: [] }],
        'regexMatchAll(" abc:", "(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))abc(?:(?<![a-z])(?=[a-z])|(?<=[a-z])(?![a-z]))")': [{ match: 'abc', idx: 1, captures: [] }],

        'regexMatchAll("ac", "(a)(b)?(c)")': [{ match: 'ac', idx: 0, captures: ['a', null, 'c'] }],

        'regexMatchAll("привет", "\\\\w+")': [],
        'regexMatchAll("приветworld", "^\\\\w+$")': [],
        'regexMatchAll("приветworld", "^[а-я]+\\\\w+$")': [{ match: 'приветworld', idx: 0, captures: [] }],
        'regexMatchAll("ПрИвЕтworld", "^[а-я]+\\\\w+$", "i")': [{ match: 'ПрИвЕтworld', idx: 0, captures: [] }],
        'regexMatchAll("привет, world", "(\\\\w+)")': [{ match: 'world', idx: 8, captures: ['world'] }],
        'regexMatchAll("привет, world", "((\\\\w+))")': [{ match: 'world', idx: 8, captures: ['world', 'world'] }],
        'regexMatchAll("hello, world", "((\\\\w+))")': [{ match: 'hello', idx: 0, captures: ['hello', 'hello'] }, { match: 'world', idx: 7, captures: ['world', 'world'] }],

        'regexMatchAll("cafétéria", "i")': [{ match: 'i', idx: 7, captures: [] }],
        'regexMatchAll("йод", "д")': [{ match: 'д', idx: 2, captures: [] }],
        'regexMatchAll("ёлка", "к")': [{ match: 'к', idx: 2, captures: [] }],

        'regexMatchAll("ёлка", "к")[0].captures': [],
    }));

    describe('let()', factory({
        'let(1, true)': new Error('evaluate :: let1'),
        'let(Infinity, true)': new Error('evaluate :: let1'),
        'let(1, Infinity)': new Error('evaluate :: let1'),
        'let(NaN, true)': new Error('evaluate :: let1'),
        'let(1, NaN)': new Error('evaluate :: let1'),
        'let("a", true)': new Error('evaluate :: let1'),
        'let(number1, true)': new Error('evaluate :: let1'),
        'let(string1, true)': new Error('evaluate :: let1'),
        'let(array1, true)': new Error('evaluate :: let1'),
        'let(array1, item)': new Error('evaluate :: let1'),
        'let(object1, true)': new Error('evaluate :: let1'),
        'let(null, true)': new Error('evaluate :: let1'),
        'let(null1, true)': new Error('evaluate :: let1'),
        'let(unknown, true)': new Error('evaluate :: let1'),
        'let({x: 2}, x)': 2,
        'let({"x y": 2}, x)': new Error('evaluate :: let2 :: x y'),
        'let({"x :: y": 2}, x)': new Error('evaluate :: let2 :: x :: y'),
        'let({"1x": 2}, x)': new Error('evaluate :: let2 :: 1x'),
        'let({"": 2}, x)': new Error('evaluate :: let2 :: '),
        'let({" ": 2}, x)': new Error('evaluate :: let2 ::  '),
        'let({x: 2, x: x + 2}, x)': new DifferentResults({ // TODO wtf??
            mongo: new Error('convert :: var1 :: x'),
            php: new Error('evaluate :: var1 :: x'),
            node: new Error('evaluate :: var1 :: x'),
        }),
        'let({x: x + 2}, x)': new DifferentResults({
            mongo: new Error('convert :: var1 :: x'),
            php: new Error('evaluate :: var1 :: x'),
            node: new Error('evaluate :: var1 :: x'),
        }),
        'let({x: 2, y: x + 2}, x)': 2,
        'let({x: 2, y: x + 2}, y)': 4,
        'let({x: 2, y: x + 2}, y * x)': 8,
        'let({x: 2, y: x + 2, z: y * x}, z - 1)': 7,
        'let({x1: 2, y: x1 + 2, z: y * x1}, z - 1)': 7,
        'let({some_value: 1 + 1}, some_value)': 2,
        'let({so3me_vAlue33: 1 + 1}, so3me_vAlue33)': 2,
        'let({so3me_vAlue33: 1 + 1}, so3me_v3Alue33)': new DifferentResults({ // TODO wtf??
            mongo: new Error('convert :: var1 :: so3me_v3Alue33'),
            php: new Error('evaluate :: var1 :: so3me_v3Alue33'),
            node: new Error('evaluate :: var1 :: so3me_v3Alue33'),
        }),
        'let(object1, a)': new Error('evaluate :: let1'),
        'let(object1, null)': new Error('evaluate :: let1'),
        'let({}, null)': null,
        'let({x: 2}, let({y: x + 2}, y))': 4,
        'let({x: 2}, let({x: x + 2}, x))': 4,
        'map([1], let({item: 3}, item))[0]': 3,
        'map([1], let({item: item + 1}, item))[0]': 2,
        '[let({item: 23}, 12), item]': new DifferentResults({
            mongo: new Error('convert :: var1 :: item'),
            php: new Error('evaluate :: var1 :: item'),
            node: new Error('evaluate :: var1 :: item'),
        }),
    }));

    describe('exists()', factory({
        'exists(1)': true,
        'exists(true.asdf)': false,
        'exists([].asdf)': false,
        'exists({}.asdf)': false,
        'exists({}[1])': false,
        'exists(Infinity)': true,
        'exists(NaN)': true,
        'exists("a")': true,
        'exists("a" == "b")': new Error('validate :: exists1'),
        'exists(number1)': true,
        'exists(number1.a)': false,
        'exists(string1)': true,
        'exists(string1.a)': false,
        'exists(array1)': true,
        'exists(array1[111])': false,
        'exists(array1[0.5])': new Error('evaluate :: member3'),
        'exists(array1[1 - 0.5])': new Error('evaluate :: member3'),
        'exists(array1[0])': true,
        'exists(array1[-1])': true,
        'exists(array1[-19])': false,
        'exists([123][-1])': true,
        'exists([123][-19])': false,
        'exists(array1[0][1111])': false,
        'exists(object1)': true,
        'exists(object1.a)': true,
        'exists(object1.a[111])': false,
        'exists(object1.a.b)': false,
        'exists(object1.b)': false,
        'exists(null)': true,
        'exists(null1)': true,
        'exists(null1.b)': false,
        'exists(unknown)': false,
        'exists(unknown.a)': false,
        'exists(unknown[1])': false,
        'exists(unknown1) or if(true1, true, unknown2)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown2'),
            php: true,
            node: true,
        }),
        'exists(unknown1[unknown2])': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown2'),
            php: new Error('evaluate :: var1 :: unknown2'),
            node: new Error('evaluate :: var1 :: unknown2'),
        }),
        'exists(unknown1[string1])': false,
        'exists([{x:[1]}][0])': true,
        'exists([{x:[1]}][1])': false,
        'exists([{x:[1]}][0].x)': true,
        'exists([{x:[1]}][0].y)': false,
        'exists([{x:[1]}][0].x[0])': true,
        'exists([{x:[1]}][0].x[1])': false,
        'exists([{x:[1]}][0].x[1 - 1])': true,
        'exists([{x:[1]}][0].x[object1.b])': new Error('evaluate :: member2 :: b'),
        'exists([{x:[object1.b]}][1])': new Error('evaluate :: member2 :: b'),
        'if(exists(null1.b), 11, 22)': 22,
        'if(exists(null1.b), unknown, 22)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: 22,
            node: 22,
        }),
    }));

    describe('objectToArray()', factory({
        'objectToArray(1)': new Error('optimize :: objectToArray1 :: number'),
        'objectToArray(Infinity)': new Error('optimize :: objectToArray1 :: number'),
        'objectToArray(NaN)': new Error('optimize :: objectToArray1 :: number'),
        'objectToArray("a")': new Error('optimize :: objectToArray1 :: string'),
        'objectToArray("a" == "b")': new Error('optimize :: objectToArray1 :: boolean'),
        'objectToArray(number1)': new Error('evaluate :: objectToArray1 :: number'),
        'objectToArray(string1)': new Error('evaluate :: objectToArray1 :: string'),
        'objectToArray(array1)': new Error('evaluate :: objectToArray1 :: array'),
        'objectToArray(object1)': [{ k: 'a', v: 1 }],
        'objectToArray(null)': null,
        'objectToArray(null1)': null,
        'objectToArray(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'objectToArray([{x:[1]}][0])': [ { k: 'x', v: [1] } ],
        'objectToArray({})': [],
        'objectToArray({x: 1})': [{ k: 'x', v: 1 }],
        'objectToArray({x: 1, y: 2})': [{ k: 'x', v: 1 }, { k: 'y', v: 2 }],
        'objectToArray({y: 2, x: 1})': [{ k: 'y', v: 2 }, { k: 'x', v: 1 }],
        'objectToArray({"2": 2, x: 1})': [{ k: '2', v: 2 }, { k: 'x', v: 1 }],
    }));

    describe('arrayToObject()', factory({
        'arrayToObject(1)': new Error('optimize :: arrayToObject1 :: number'),
        'arrayToObject(Infinity)': new Error('optimize :: arrayToObject1 :: number'),
        'arrayToObject(NaN)': new Error('optimize :: arrayToObject1 :: number'),
        'arrayToObject("a")': new Error('optimize :: arrayToObject1 :: string'),
        'arrayToObject("a" == "b")': new Error('optimize :: arrayToObject1 :: boolean'),
        'arrayToObject(number1)': new Error('evaluate :: arrayToObject1 :: number'),
        'arrayToObject(string1)': new Error('evaluate :: arrayToObject1 :: string'),
        'arrayToObject(array1)': new Error('evaluate :: arrayToObject2 :: number'),
        'arrayToObject(object1)': new Error('evaluate :: arrayToObject1 :: object'),
        'arrayToObject(null)': null,
        'arrayToObject(null1)': null,
        'arrayToObject(unknown)': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('evaluate :: var1 :: unknown'),
            node: new Error('evaluate :: var1 :: unknown'),
        }),
        'arrayToObject([{x:[1]}][0])': new Error('evaluate :: arrayToObject1 :: object'),
        'arrayToObject(["x", [1, 2]])': new Error('optimize :: arrayToObject2 :: string'),
        'arrayToObject([[1, 2]])': new Error('optimize :: arrayToObject3 :: number'),
        'arrayToObject([null, [1, 2]])': new Error('optimize :: arrayToObject2 :: null'),
        'arrayToObject([["1", 2]])': { '1': 2 },
        'arrayToObject([["1"]])': new Error('optimize :: arrayToObject4 :: 1'),
        'arrayToObject([[]])': new Error('optimize :: arrayToObject4 :: 0'),
        'arrayToObject([[null, "1", 2]])': new Error('optimize :: arrayToObject4 :: 3'),
        'arrayToObject([["1", 2, 3]])': new Error('optimize :: arrayToObject4 :: 3'),
        'arrayToObject([["1", 2], null])': new Error('optimize :: arrayToObject5 :: array,null'),
        'arrayToObject([["1", 2], 123])': new Error('optimize :: arrayToObject5 :: array,number'),
        'arrayToObject([["1", 2], {k: "1", v: 2}])': new Error('optimize :: arrayToObject5 :: array,object'),
        'arrayToObject([[1, "2"]])': new Error('optimize :: arrayToObject3 :: number'),
        'arrayToObject([{k: 1, v: 2}])': new Error('optimize :: arrayToObject6 :: number'),
        'arrayToObject([{k: "1", v: 2}])': { '1': 2 },
        'arrayToObject([{k: "1", v: 2}, {k: "1", v: 2}])': { '1': 2 },
        'arrayToObject([{k: "1", v: 2}, {k: "1", v: 3}])': { '1': 3 },
        'arrayToObject([{k: "1", v: 2}, {k: "4", v: 2}])': { '1': 2, '4': 2 },
        'arrayToObject([{k: "2", v: 2}, {k: "1", v: 2}])': { '2': 2, '1': 2 },
        'arrayToObject([{v: 2, k: "1"}])': { '1': 2 },
        'arrayToObject([{k: 1}])': new Error('optimize :: arrayToObject7 :: 1'),
        'arrayToObject([{}])': new Error('optimize :: arrayToObject7 :: 0'),
        'arrayToObject([{x: 5, k: "1", v: 2}])': new Error('optimize :: arrayToObject7 :: 3'),
        'arrayToObject([{k: "1", v: 2, x: null}])': new Error('optimize :: arrayToObject7 :: 3'),
        'arrayToObject([{k: "1", x: null}])': new Error('optimize :: arrayToObject8'),
        'arrayToObject([{x: "1", v: null}])': new Error('optimize :: arrayToObject8'),
        'arrayToObject([{x: "1", y: null}])': new Error('optimize :: arrayToObject8'),
        'arrayToObject([{k: "1", v: 2}, null])': new Error('optimize :: arrayToObject5 :: object,null'),
        'arrayToObject([{k: "1", v: 2}, 123])': new Error('optimize :: arrayToObject5 :: object,number'),
        'arrayToObject([{k: "1", v: 2}, ["1", 2]])': new Error('optimize :: arrayToObject5 :: object,array'),
        'arrayToObject([{k: 1, v: "2"}])': new Error('optimize :: arrayToObject6 :: number'),
    }));

    describe.only('pickKeys()', factory({
        'pickKeys(1, ["a", "c"])': new Error('optimize :: pickKeys1 :: number'),
        'pickKeys(Infinity, ["a", "c"])': new Error('optimize :: pickKeys1 :: number'),
        'pickKeys(NaN, ["a", "c"])': new Error('optimize :: pickKeys1 :: number'),
        'pickKeys("a", ["a", "c"])': new Error('optimize :: pickKeys1 :: string'),
        'pickKeys([], ["a", "c"])': new Error('optimize :: pickKeys1 :: array'),
        'pickKeys(true, ["a", "c"])': new Error('optimize :: pickKeys1 :: boolean'),
        'pickKeys(object2, 1)': new Error('evaluate :: pickKeys2 :: number'),
        'pickKeys(object2, Infinity)': new Error('evaluate :: pickKeys2 :: number'),
        'pickKeys(object2, NaN)': new Error('evaluate :: pickKeys2 :: number'),
        'pickKeys(object2, "a")': new Error('evaluate :: pickKeys2 :: string'),
        'pickKeys(object2, {})': new Error('evaluate :: pickKeys2 :: object'),
        'pickKeys(object2, true)': new Error('evaluate :: pickKeys2 :: boolean'),
        'pickKeys(number1, ["a", "c"])': new Error('evaluate :: pickKeys1 :: number'),
        'pickKeys(string1, ["a", "c"])': new Error('evaluate :: pickKeys1 :: string'),
        'pickKeys(array1, ["a", "c"])': new Error('evaluate :: pickKeys1 :: array'),
        'pickKeys(object2, number1)': new Error('evaluate :: pickKeys2 :: number'),
        'pickKeys(object2, string1)': new Error('evaluate :: pickKeys2 :: string'),
        'pickKeys(object2, object1)': new Error('evaluate :: pickKeys2 :: object'),
        'pickKeys(object2, ["a", "c"])': { a: 1, c: 3 },
        'pickKeys(object2, ["a", "c", "e"])': { a: 1, c: 3 },
        'pickKeys(object2, [])': {},
        'pickKeys({}, ["a", "c"])': {},
        'pickKeys({}, [])': {},

        //'arrayToObject(1)': new Error('optimize :: arrayToObject1 :: number'),
        //'arrayToObject(Infinity)': new Error('optimize :: arrayToObject1 :: number'),
        //'arrayToObject(NaN)': new Error('optimize :: arrayToObject1 :: number'),
        //'arrayToObject("a")': new Error('optimize :: arrayToObject1 :: string'),
        //'arrayToObject("a" == "b")': new Error('optimize :: arrayToObject1 :: boolean'),
        //'arrayToObject(number1)': new Error('evaluate :: arrayToObject1 :: number'),
        //'arrayToObject(string1)': new Error('evaluate :: arrayToObject1 :: string'),
        //'arrayToObject(array1)': new Error('evaluate :: arrayToObject2 :: number'),
        //'arrayToObject(object1)': new Error('evaluate :: arrayToObject1 :: object'),
        //'arrayToObject(null)': null,
        //'arrayToObject(null1)': null,
        //'arrayToObject(unknown)': new DifferentResults({
            //mongo: new Error('convert :: var1 :: unknown'),
            //php: new Error('evaluate :: var1 :: unknown'),
            //node: new Error('evaluate :: var1 :: unknown'),
        //}),
        //'arrayToObject([{x:[1]}][0])': new Error('evaluate :: arrayToObject1 :: object'),
        //'arrayToObject(["x", [1, 2]])': new Error('optimize :: arrayToObject2 :: string'),
        //'arrayToObject([[1, 2]])': new Error('optimize :: arrayToObject3 :: number'),
        //'arrayToObject([null, [1, 2]])': new Error('optimize :: arrayToObject2 :: null'),
        //'arrayToObject([["1", 2]])': { '1': 2 },
        //'arrayToObject([["1"]])': new Error('optimize :: arrayToObject4 :: 1'),
        //'arrayToObject([[]])': new Error('optimize :: arrayToObject4 :: 0'),
        //'arrayToObject([[null, "1", 2]])': new Error('optimize :: arrayToObject4 :: 3'),
        //'arrayToObject([["1", 2, 3]])': new Error('optimize :: arrayToObject4 :: 3'),
        //'arrayToObject([["1", 2], null])': new Error('optimize :: arrayToObject5 :: array,null'),
        //'arrayToObject([["1", 2], 123])': new Error('optimize :: arrayToObject5 :: array,number'),
        //'arrayToObject([["1", 2], {k: "1", v: 2}])': new Error('optimize :: arrayToObject5 :: array,object'),
        //'arrayToObject([[1, "2"]])': new Error('optimize :: arrayToObject3 :: number'),
        //'arrayToObject([{k: 1, v: 2}])': new Error('optimize :: arrayToObject6 :: number'),
        //'arrayToObject([{k: "1", v: 2}])': { '1': 2 },
        //'arrayToObject([{k: "1", v: 2}, {k: "1", v: 2}])': { '1': 2 },
        //'arrayToObject([{k: "1", v: 2}, {k: "1", v: 3}])': { '1': 3 },
        //'arrayToObject([{k: "1", v: 2}, {k: "4", v: 2}])': { '1': 2, '4': 2 },
        //'arrayToObject([{k: "2", v: 2}, {k: "1", v: 2}])': { '2': 2, '1': 2 },
        //'arrayToObject([{v: 2, k: "1"}])': { '1': 2 },
        //'arrayToObject([{k: 1}])': new Error('optimize :: arrayToObject7 :: 1'),
        //'arrayToObject([{}])': new Error('optimize :: arrayToObject7 :: 0'),
        //'arrayToObject([{x: 5, k: "1", v: 2}])': new Error('optimize :: arrayToObject7 :: 3'),
        //'arrayToObject([{k: "1", v: 2, x: null}])': new Error('optimize :: arrayToObject7 :: 3'),
        //'arrayToObject([{k: "1", x: null}])': new Error('optimize :: arrayToObject8'),
        //'arrayToObject([{x: "1", v: null}])': new Error('optimize :: arrayToObject8'),
        //'arrayToObject([{x: "1", y: null}])': new Error('optimize :: arrayToObject8'),
        //'arrayToObject([{k: "1", v: 2}, null])': new Error('optimize :: arrayToObject5 :: object,null'),
        //'arrayToObject([{k: "1", v: 2}, 123])': new Error('optimize :: arrayToObject5 :: object,number'),
        //'arrayToObject([{k: "1", v: 2}, ["1", 2]])': new Error('optimize :: arrayToObject5 :: object,array'),
        //'arrayToObject([{k: 1, v: "2"}])': new Error('optimize :: arrayToObject6 :: number'),
    }));

    describe('let() в виде сахара', factory({
        'x = 2; x': 2,
        'x = 2; x = x + 2; x': new DifferentResults({
            mongo: new Error('convert :: var1 :: x'),
            php: new Error('evaluate :: var1 :: x'),
            node: new Error('evaluate :: var1 :: x'),
        }),
        'x = x + 2; x': new DifferentResults({
            mongo: new Error('convert :: var1 :: x'),
            php: new Error('evaluate :: var1 :: x'),
            node: new Error('evaluate :: var1 :: x'),
        }),
        'x = 2; y = x + 2; x': 2,
        'x = 2; y = x + 2; y': 4,
        'x = 2; y = x + 2; y * x': 8,
        'x = 2; y = x + 2; z = y * x; z - 1': 7,
        'x1 = 2; y = x1 + 2; z = y * x1; z - 1': 7,
        'some_value = 1 + 1; some_value': 2,
        'so3me_vAlue33 = 1 + 1; so3me_vAlue33': 2,
        'so3me_vAlue33 = 1 + 1; so3me_v3Alue33': new DifferentResults({
            mongo: new Error('convert :: var1 :: so3me_v3Alue33'),
            php: new Error('evaluate :: var1 :: so3me_v3Alue33'),
            node: new Error('evaluate :: var1 :: so3me_v3Alue33'),
        }),
        'x = 2; let({y: x + 2}, y)': 4,
        'x = 2; let({x: x + 2}, x)': 4,
        'X = 2; X': new Error('evaluate :: let2 :: X'),
        '_X = 2; _X': new Error('evaluate :: let2 :: _X'),
        '_x = 2; _x': new Error('evaluate :: let2 :: _x'),
    }));

    describe('Оптимизация до выполнения', factory({
        'if(1, 2, 2 - "")': new Error('optimize :: subtract1 :: string,number'),
        'if(1, 2, [2 - ""][0])': new Error('optimize :: subtract1 :: string,number'),
        'if(number1, number2, 2 - "")': new Error('optimize :: subtract1 :: string,number'),
        'null1 * sum([number1, string1])': null,
        'null1 + multiply([number1, string1])': null,
        'array1[if(1, 0, 2)]': 1,
        'array1[if(1, 0, 2 - "")]': new Error('optimize :: subtract1 :: string,number'),
        'array1[if(1, 0, number1 - "")]': 1,
        '0 + unknown + "null"': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('optimize :: add1 :: string'),
            node: new Error('optimize :: add1 :: string'),
        }),
        'sum([unknown, number1, 0]) + false': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('optimize :: add1 :: boolean'),
            node: new Error('optimize :: add1 :: boolean'),
        }),
        '1 * unknown * "null"': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('optimize :: fn7 :: multiply,string'),
            node: new Error('optimize :: fn7 :: multiply,string'),
        }),
        'multiply([unknown, number1, 0]) * false': new DifferentResults({
            mongo: new Error('convert :: var1 :: unknown'),
            php: new Error('optimize :: fn7 :: multiply,boolean'),
            node: new Error('optimize :: fn7 :: multiply,boolean'),
        }),
        '(true or number1) + null1': new Error('evaluate :: add1 :: boolean'),
        '(true or number1) * null1': new Error('evaluate :: fn7 :: multiply,boolean'),
        '(false and number1) + null1': new Error('evaluate :: add1 :: boolean'),
        '(false and number1) * null1': new Error('evaluate :: fn7 :: multiply,boolean'),
        'if(true1, true1, [][false])': true,
        '1 or [][false]': true,
        '[][false] or 1': true,
        '0 and [][false]': false,
        '[][false] and 0': false,
    }));

    0 || describe('Известные проблемы', factory({
        // Даты выходящие за диапазон 0-9999 передаются неточно в __formula_encoded_type__
        // Чтобы это исправить, нужно передавать отдельно числа даты массивом, скорее всего
        // Еще важно помнить базовое ограничение монги - она не умеет даты в строки конвертировать,
        // если дата выходит за пределы 0-9999, к сожалению
        'toDate(1200000000000000)': new Date('+039996-06-26T21:20:00.000Z'),
        'toDate(-1100000000000000)': new Date('-032888-05-22T12:26:40.000Z'),
        'toDate(-62167227654000)': new Date('-000001-12-31T21:39:06.000Z'),

        // Монга возвращает Invalid Date
        'toDate("2022-05-19T07:46:49.203Z") + 10000000000000000': new Error('evaluate :: toDate1'),
        'dateAdd(#2009-12-01T12:34:00.000Z#, "hour", 4399500000)': new Error('optimize :: dateAdd5'),

        // Конвертируется по разному
        'toString(120000000000.1234)': '120000000000.1234',
        'toString(6.02214129e23)': '6.02214129e+23',

        // Тут видимо где-то предел точности дробей сбоит, и дробь искажается
        'toString(21474836487.5678)': '21474836487.5678',
        'toString(-21474836487.5678)': '-21474836487.5678',

        // Разные коды ошибки в разных местах
        '[] + if(1, "test", unknown)': new Error('evaluate :: add1 :: string'),
        '[] * if(1, "test", unknown)': new Error('evaluate :: fn7 :: multiply,string'),

        // Разное поведение регулярок, по мелочам
        'regexTest("string", "[a-b]+\0[c-d]+")': new Error('optimize :: regexTest3'),
        'regexTest("string", "[a-b]+\0" & "[c-d]+")': new Error('optimize :: regexTest3'),
        'regexTest("string", "[a-b]+\0" & string1)': new Error('evaluate :: regexTest3'),
        'regexTest("string", "sasd\0")': new Error('optimize :: regexTest3'),
        'regexTest("string", "[a-" & string1)': new Error('evaluate :: regexTest3'),
        'regexTest("string", "^(*UCP)[[:alpha:]]+$")': new Error('optimize :: regexTest3'),
        'regexTest("string", "((*UCP)[[:alpha:]]+$)")': new Error('optimize :: regexTest3'),
        'regexTest("ПрИвЕтworld", "\\\\p{Letter}")': true,

        // Тут немного разное округление в выводе ошибки, но не страшно
        'acos(1234.5678)': new Error('optimize :: acos2 :: 1234.5678'),
        'acos(-1234.5678)': new Error('optimize :: acos2 :: -1234.5678'),

        // PHP решил не округлять
        'round(27.289917197127753, 14)': 27.28991719712775,
        // Node делает по своему
        'round(sinh(4), 14)': 27.28991719712775,
        'round(27.289917197127753, 13)': 27.2899171971278,

        // Ошибка верная, но этап (evaluate/optimize) разный
        'pow(Infinity, 2)': new Error('evaluate :: pow3'),
        'pow(NaN, 2)': new Error('evaluate :: pow4'),
        'pow(2, Infinity)': new Error('evaluate :: pow3'),
        'pow(2, NaN)': new Error('evaluate :: pow4'),
        'pow(-Infinity, 2)': new Error('evaluate :: pow3'),

        // Так можно получить NaN в монге, но это значение мы не поддерживаем
        'toNumber("NaN")': null,

        // В монге небольшое отличие
        'sin(1234.8)': -0.15347811810748466,
        'sin(-1234.8)': 0.15347811810748466,

        // Не очень приятные отличия в регулярках
        'regexTest("string", "[a-")': new Error('optimize :: regexTest3'),
        'regexTest("a𝌆b", "a.b")': true,
        'regexTest("foo\n", /(foo|bar|[A-Z])$/)': true,
        'regexTest("foo\n", /^(foo|bar|[A-Z])$/)': true,
        'regexTest("приветworld", "^[а-я]+\\\\w+$")': true,
        'regexTest("привет world", "^[а-я]+ \\\\w+$")': true,
        'regexTest("привет", "^[а-я]+$")': true,
        'regexTest("привет", "[а-я]+$")': true,
        'regexTest(" привет ", "^ [а-я]+ $")': true,
        'regexTest(" привет ", " [а-я]+ $")': true,
        'regexTest(" привет ", " [а-я]+ ")': true,
        'regexTest("привет ", "[а-я]+ ")': true,
        'regexTest("ПрИвЕтworld", "^[а-я]+\\\\w+$", "i")': true,
        'regexTest("foo\n", /foo$/)': true,
        'regexTest("привет\n", /привет$/)': true,

        // Вроде бы не страшные отличия в регулярках
        // 'regexTest("\xe6\x9c\xac", /^\\C\\C\\C$/)': false,
        // 'regexTest("\xe6\x9c\xac", /^\\C$/)': false,
        // 'regexTest("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e", /^\\C\\C\\C$/)': false,
        // 'regexTest("\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e", /^.........$/)': true,
        // 'regexTest(".\xe6\x9c\xac.", /^.....$/)': true,
        // 'regexTest("a", /\\141/)': true,
        // 'regexTest("0", /\\060/)': true,
        // 'regexTest("00", /\\0600/)': true,
        // 'regexTest("08", /\\608/)': true,
        // 'regexTest("\01", /\\01/)': true,
        // 'regexTest("\01" & "8", /\\018/)': true,
        // 'regexTest("a", /\\x{61}/)': true,
        // 'regexTest("a", /\\x61/)': true,
        // 'regexTest("a", /\\x{00000061}/)': true,
        // 'regexTest("aαβb", /\\p{Greek}+/)': true,
        // 'regexTest("aαβb", /\\P{Greek}+/)': true,
        // 'regexTest("aαβb", /\\p{^Greek}+/)': true,
        // 'regexTest("aαβb", /\\P{^Greek}+/)': true,
        // 'regexTest("abc123²³¼½¾₀₉", /\\P{^Nd}+/)': true,
        // 'regexTest("abc123²³¼½¾₀₉", /\\pN+/)': true,
        // 'regexTest("abc123²³¼½¾₀₉", /\\p{^N}+/)': true,
        // 'regexTest("@AaB", /(?i)[@-A]+/)': true,
        // 'regexTest("aAzZ", /(?i)[A-Z]+/)': true,
        // 'regexTest("Aa\\", /(?i)[^\\\\]+/)': true,
        // 'regexTest("Aa", /{ "(?i)[\\\\]+/)': false,
        // 'regexTest("acegikmoqsuwyACEGIKMOQSUWY", /(?i)[acegikmoqsuwy]+/)': true,
        // 'regexTest("Aa\\", /[^\\\\]+/)': false,
        // 'regexTest("abcdef", /(?m)^abc/)': true,
        // 'regexTest("aabcdef", /(?m)^abc/)': false,
        // 'regexTest("abcdef", /(?m)^[ay]*[bx]+c/)': true,
        // 'regexTest("aabcdef", /(?m)^[ay]*[bx]+c/)': true,
        // 'regexTest("abcdef", /(?m)def$/)': true,
        // 'regexTest("abcdeff", /(?m)def$/)': false,
        // 'regexTest("abcdef", /(?m)d[ex][fy]$/)': true,
        // 'regexTest("abcdeff", /(?m)d[ex][fy]$/)': false,
        // 'regexTest("abcdef", /(?m)[dz][ex][fy]$/)': true,
        // 'regexTest("abcdeff", /(?m)[dz][ex][fy]$/)': false,
        // 'regexTest("a", /a\\C*/)': true,
        // 'regexTest("a", /a\\C+/)': false,
        // 'regexTest("a", /a\\C?/)': true,
        // 'regexTest("a", /a\\C*?/)': true,
        // 'regexTest("a", /a\\C+?/)': false,
        // 'regexTest("a", /a\\C??/)': true,
        // 'regexTest("baba", /a\\C*|ba\\C/)': true,
    }));

    describe('Песочница', factory({
    }));
});
